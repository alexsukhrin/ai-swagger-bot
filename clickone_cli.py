#!/usr/bin/env python3
"""
CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Clickone Shop API
"""

import json
import os
from datetime import datetime

import requests
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
CLICKONE_SHOP_API_URL = "https://api.oneshop.click"
CLICKONE_SHOP_SWAGGER_URL = "https://api.oneshop.click/docs/ai-json"
JWT_TOKEN = os.getenv("CLICKONE_JWT_TOKEN")


def print_banner():
    """–í–∏–≤–æ–¥–∏—Ç—å –±–∞–Ω–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("üöÄ" * 50)
    print("üîç CLICKONE SHOP API CLI")
    print("üöÄ" * 50)
    print()


def print_menu():
    """–í–∏–≤–æ–¥–∏—Ç—å –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("\nüéØ –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:")
    print("1. üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é")
    print("2. üîç –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É API")
    print("3. üìÇ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
    print("4. ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
    print("5. üì¶ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")
    print("6. üîå –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API")
    print("7. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API")
    print("8. üîç –¢–µ—Å—Ç—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ API")
    print("0. üö™ –í–∏—Ö—ñ–¥")
    print()


def download_swagger_spec():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é"""
    print("üìã –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é...")

    try:
        response = requests.get(
            CLICKONE_SHOP_SWAGGER_URL, timeout=30, headers={"User-Agent": "AI-Swagger-Bot/1.0"}
        )

        if response.status_code == 200:
            swagger_spec = response.json()
            print(f"‚úÖ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            print(f"   üìä API: {swagger_spec.get('info', {}).get('title', 'Unknown')}")
            print(f"   üìä –í–µ—Ä—Å—ñ—è: {swagger_spec.get('info', {}).get('version', 'Unknown')}")
            print(f"   üìä –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏: {len(swagger_spec.get('paths', {}))}")
            return swagger_spec
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: HTTP {response.status_code}")
            return None

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        return None


def analyze_api_structure(swagger_spec):
    """–ê–Ω–∞–ª—ñ–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É API"""
    if not swagger_spec:
        print("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—ñ—Ç—å Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é")
        return

    print("üîç –ê–Ω–∞–ª—ñ–∑—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É API...")

    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
    paths = swagger_spec.get("paths", {})
    print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤: {len(paths)}")

    # –ì—Ä—É–ø—É—î–º–æ –∑–∞ —Ç–µ–≥–∞–º–∏
    endpoints_by_tag = {}
    for path, methods in paths.items():
        for method, details in methods.items():
            if isinstance(details, dict):
                tags = details.get("tags", ["–ë–µ–∑ —Ç–µ–≥—É"])
                for tag in tags:
                    if tag not in endpoints_by_tag:
                        endpoints_by_tag[tag] = []
                    endpoints_by_tag[tag].append(f"{method.upper()} {path}")

    print("\nüìä –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –∑–∞ —Ç–µ–≥–∞–º–∏:")
    for tag, endpoints in endpoints_by_tag.items():
        print(f"   üè∑Ô∏è  {tag}: {len(endpoints)} –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤")
        for endpoint in endpoints[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
            print(f"      ‚Ä¢ {endpoint}")
        if len(endpoints) > 5:
            print(f"      ... —Ç–∞ —â–µ {len(endpoints) - 5}")

    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ö–µ–º–∏
    components = swagger_spec.get("components", {})
    schemas = components.get("schemas", {})
    print(f"\nüìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ö–µ–º –¥–∞–Ω–∏—Ö: {len(schemas)}")

    # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Å—Ö–µ–º
    schema_names = list(schemas.keys())[:10]
    print(f"üìä –ü—Ä–∏–∫–ª–∞–¥–∏ —Å—Ö–µ–º: {', '.join(schema_names)}")


def get_categories():
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    if not JWT_TOKEN:
        print("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        return

    print("üìÇ –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")

    try:
        headers = {
            "Authorization": f"Bearer {JWT_TOKEN}",
            "Content-Type": "application/json",
            "User-Agent": "AI-Swagger-Bot/1.0",
        }

        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/api/categories", headers=headers, timeout=30
        )

        print(f"üìä GET /api/categories: HTTP {response.status_code}")

        if response.status_code == 200:
            categories = response.json()
            print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")

            for i, category in enumerate(categories[:10]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
                print(
                    f"   {i+1}. {category.get('name', 'Unknown')} (ID: {category.get('id', 'Unknown')})"
                )
                if category.get("description"):
                    print(f"      üìù {category.get('description')}")
                print(f"      üè∑Ô∏è  Slug: {category.get('slug', 'Unknown')}")
                print(f"      üìä –ê–∫—Ç–∏–≤–Ω–∞: {'–¢–∞–∫' if category.get('isActive') else '–ù—ñ'}")
                print()

            if len(categories) > 10:
                print(f"   ... —Ç–∞ —â–µ {len(categories) - 10} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.text}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")


def create_category():
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"""
    if not JWT_TOKEN:
        print("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        return

    print("‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó...")

    try:
        # –ó–∞–ø–∏—Ç—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        name = input("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: ").strip()
        if not name:
            print("‚ùå –ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é")
            return

        slug = input("üè∑Ô∏è  –í–≤–µ–¥—ñ—Ç—å slug (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó): ").strip()
        if not slug:
            slug = f"test-category-{datetime.now().strftime('%Y%m%d_%H%M%S')}"

        description = input("üìÑ –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É): ").strip()

        # –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        category_data = {"name": name, "slug": slug, "isActive": True, "sortOrder": 999}

        if description:
            category_data["description"] = description

        print(f"\nüìä –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:")
        print(json.dumps(category_data, ensure_ascii=False, indent=2))

        confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è? (y/N): ").strip().lower()
        if confirm != "y":
            print("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return

        headers = {
            "Authorization": f"Bearer {JWT_TOKEN}",
            "Content-Type": "application/json",
            "User-Agent": "AI-Swagger-Bot/1.0",
        }

        response = requests.post(
            f"{CLICKONE_SHOP_API_URL}/api/categories",
            headers=headers,
            json=category_data,
            timeout=30,
        )

        print(f"üìä POST /api/categories: HTTP {response.status_code}")

        if response.status_code == 201:
            created_category = response.json()
            print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            print(f"   üìä ID: {created_category.get('id', 'Unknown')}")
            print(f"   üìä –ù–∞–∑–≤–∞: {created_category.get('name', 'Unknown')}")
            print(f"   üìä Slug: {created_category.get('slug', 'Unknown')}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {response.text}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")


def get_products():
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤"""
    if not JWT_TOKEN:
        print("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        return

    print("üì¶ –û—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤...")

    try:
        headers = {
            "Authorization": f"Bearer {JWT_TOKEN}",
            "Content-Type": "application/json",
            "User-Agent": "AI-Swagger-Bot/1.0",
        }

        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/api/products", headers=headers, timeout=30
        )

        print(f"üìä GET /api/products: HTTP {response.status_code}")

        if response.status_code == 200:
            products = response.json()
            print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")

            for i, product in enumerate(products[:10]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
                print(
                    f"   {i+1}. {product.get('name', 'Unknown')} (ID: {product.get('id', 'Unknown')})"
                )
                if product.get("price"):
                    print(
                        f"      üí∞ –¶—ñ–Ω–∞: {product.get('price', 'Unknown')} {product.get('currency', '')}"
                    )
                if product.get("status"):
                    print(f"      üìä –°—Ç–∞—Ç—É—Å: {product.get('status', 'Unknown')}")
                if product.get("sku"):
                    print(f"      üè∑Ô∏è  SKU: {product.get('sku', 'Unknown')}")
                print()

            if len(products) > 10:
                print(f"   ... —Ç–∞ —â–µ {len(products) - 10} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.text}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")


def check_api_connection():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API"""
    print("üîå –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Clickone Shop API...")

    try:
        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/health",
            timeout=10,
            headers={"User-Agent": "AI-Swagger-Bot/1.0"},
        )

        if response.status_code == 200:
            print("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ API –ø—Ä–∞—Ü—é—î")
            return True
        else:
            print(f"‚ö†Ô∏è API –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
        return False


def show_api_statistics():
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API"""
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API...")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    swagger_spec = download_swagger_spec()
    if not swagger_spec:
        return

    paths = swagger_spec.get("paths", {})
    components = swagger_spec.get("components", {})
    schemas = components.get("schemas", {})

    print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üîó –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏: {len(paths)}")
    print(f"   üìã –°—Ö–µ–º–∏ –¥–∞–Ω–∏—Ö: {len(schemas)}")
    print(
        f"   üè∑Ô∏è  –¢–µ–≥–∏: {len(set([tag for path in paths.values() for method in path.values() if isinstance(method, dict) for tag in method.get('tags', [])]))}"
    )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Ç–æ–¥–∞–º–∏
    methods_count = {}
    for path in paths.values():
        for method in path.keys():
            methods_count[method.upper()] = methods_count.get(method.upper(), 0) + 1

    print(f"\nüìä –ú–µ—Ç–æ–¥–∏ HTTP:")
    for method, count in methods_count.items():
        print(f"   {method}: {count}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–≥–∞–º–∏
    tags_count = {}
    for path in paths.values():
        for method in path.values():
            if isinstance(method, dict):
                for tag in method.get("tags", []):
                    tags_count[tag] = tags_count.get(tag, 0) + 1

    print(f"\nüìä –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –∑–∞ —Ç–µ–≥–∞–º–∏:")
    for tag, count in sorted(tags_count.items(), key=lambda x: x[1], reverse=True):
        print(f"   {tag}: {count}")


def test_real_api_endpoints():
    """–¢–µ—Å—Ç—É—î —Ä–µ–∞–ª—å–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ API —Ç–∞ –ø–æ–∫–∞–∑—É—î —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å"""
    print("\nüîç –¢–µ—Å—Ç—É—é —Ä–µ–∞–ª—å–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ API...")

    # –°–ø–∏—Å–æ–∫ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    endpoints_to_test = [
        ("/api/categories", "GET"),
        ("/api/products", "GET"),
        ("/api/brands", "GET"),
        ("/api/orders", "GET"),
        ("/api/customers", "GET"),
        ("/api/users", "GET"),
        ("/api/collections", "GET"),
        ("/api/families", "GET"),
        ("/api/attributes", "GET"),
        ("/api/settings", "GET"),
        ("/api/warehouse", "GET"),
    ]

    working_endpoints = []

    for endpoint, method in endpoints_to_test:
        try:
            response = requests.get(
                f"{CLICKONE_SHOP_API_URL}{endpoint}",
                timeout=10,
                headers={"User-Agent": "AI-Swagger-Bot/1.0"},
            )

            if response.status_code == 200:
                print(f"‚úÖ {method} {endpoint}: HTTP {response.status_code}")
                working_endpoints.append(endpoint)
            elif response.status_code == 401:
                print(
                    f"üîí {method} {endpoint}: HTTP {response.status_code} (Unauthorized - –ø–æ—Ç—Ä–µ–±—É—î —Ç–æ–∫–µ–Ω)"
                )
                working_endpoints.append(endpoint)
            elif response.status_code == 404:
                print(f"‚ùå {method} {endpoint}: HTTP {response.status_code} (Not Found)")
            else:
                print(f"‚ö†Ô∏è  {method} {endpoint}: HTTP {response.status_code}")

        except Exception as e:
            print(f"‚ùå {method} {endpoint}: –ü–æ–º–∏–ª–∫–∞ - {e}")

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"   ‚úÖ –ü—Ä–∞—Ü—é—é—á—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏: {len(working_endpoints)}")
    print(f"   üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∞—Ü—é—é—á–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤:")
    for endpoint in working_endpoints:
        print(f"      ‚Ä¢ {endpoint}")

    return working_endpoints


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print_banner()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞
    if not JWT_TOKEN:
        print("‚ö†Ô∏è  –£–í–ê–ì–ê: CLICKONE_JWT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        print("   –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
        print()

    # –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏
    while True:
        print_menu()

        try:
            choice = input("üéØ –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (0-7): ").strip()

            if choice == "0":
                print("\nüëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Clickone Shop API CLI!")
                break
            elif choice == "1":
                download_swagger_spec()
            elif choice == "2":
                swagger_spec = download_swagger_spec()
                if swagger_spec:
                    analyze_api_structure(swagger_spec)
            elif choice == "3":
                get_categories()
            elif choice == "4":
                create_category()
            elif choice == "5":
                get_products()
            elif choice == "6":
                check_api_connection()
            elif choice == "7":
                show_api_statistics()
            elif choice == "8":
                test_real_api_endpoints()
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

            input("\n‚è∏Ô∏è  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            break
        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            input("‚è∏Ô∏è  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")


if __name__ == "__main__":
    main()
