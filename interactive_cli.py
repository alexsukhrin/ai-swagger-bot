#!/usr/bin/env python3
"""
–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è AI Swagger Bot API
–ó—Ä—É—á–Ω–µ –º–µ–Ω—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π
"""

import json
import os
import sys
from typing import Optional

from cli_tester import APITester


class InteractiveCLI:
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""

    def __init__(self, base_url: str = "http://localhost:8000"):
        self.tester = APITester(base_url)
        self.running = True

    def print_header(self):
        """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("\n" + "=" * 60)
        print("ü§ñ AI Swagger Bot - –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π CLI –¢–µ—Å—Ç–µ—Ä")
        print("=" * 60)
        print(f"üìç API URL: {self.tester.base_url}")
        print("üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–∏—Ñ—Ä–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–µ–Ω—é")
        if self.tester.current_user:
            print(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {self.tester.current_user.get('email', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}")
        else:
            print("üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: –ù–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")
        print("=" * 60)

    def print_menu(self):
        """–í–∏–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        print("\nüìã –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ:")
        print("1.  üè• Health Check")
        print("2.  üë§ –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        print("3.  üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Swagger —Ñ–∞–π–ª")
        print("4.  üí¨ –ß–∞—Ç –∑ AI")
        print("5.  üìú –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É")
        print("6.  üìù –ü—Ä–æ–º–ø—Ç–∏")
        print("7.  üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤")
        print("8.  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–ø—Ç—ñ–≤")
        print("9.  üìã Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
        print("10. üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        print("11. ‚ú® –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç")
        print("12. üîç –ü–æ—à—É–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤")
        print("13. üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤")
        print("14. üîß –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É")
        print("15. üì§ –ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç—ñ–≤")
        print("16. üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏")
        print("17. üìä –°—Ç–∞—Ç—É—Å")
        print("0.  üö™ –í–∏—Ö—ñ–¥")
        print("-" * 60)

    def get_input(self, prompt: str, default: str = "") -> str:
        """–û—Ç—Ä–∏–º—É—î –≤–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if default:
            user_input = input(f"{prompt} [{default}]: ").strip()
            return user_input if user_input else default
        return input(f"{prompt}: ").strip()

    def get_file_path(self, prompt: str) -> Optional[str]:
        """–û—Ç—Ä–∏–º—É—î —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é"""
        while True:
            file_path = self.get_input(prompt)
            if not file_path:
                return None

            if os.path.exists(file_path):
                return file_path
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
                retry = self.get_input("–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑? (y/n)", "y")
                if retry.lower() != "y":
                    return None

    def handle_health_check(self):
        """–û–±—Ä–æ–±–∫–∞ health check"""
        self.tester.health_check()
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_demo_user(self):
        """–û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        self.tester.create_demo_user()
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_upload_swagger(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Ñ–∞–π–ª—É"""
        print("\nüìÅ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø SWAGGER –§–ê–ô–õ–£")
        print("–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏:")

        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ñ–∞–π–ª–∏
        examples_dir = "examples/swagger_specs"
        if os.path.exists(examples_dir):
            for file in os.listdir(examples_dir):
                if file.endswith(".json"):
                    print(f"  ‚Ä¢ {examples_dir}/{file}")

        file_path = self.get_file_path("–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ Swagger —Ñ–∞–π–ª—É")
        if file_path:
            self.tester.upload_swagger(file_path)

        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_chat(self):
        """–û–±—Ä–æ–±–∫–∞ —á–∞—Ç—É"""
        print("\nüí¨ –ß–ê–¢ –ó AI")
        print("–ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:")
        print("  ‚Ä¢ –ü–æ–∫–∞–∂–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ endpoints")
        print("  ‚Ä¢ –°—Ç–≤–æ—Ä–∏ —Ç–æ–≤–∞—Ä –∑ –Ω–∞–∑–≤–æ—é –¢–µ–ª–µ—Ñ–æ–Ω")
        print("  ‚Ä¢ –ü–æ–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤")
        print("  ‚Ä¢ –Ø–∫ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é?")

        message = self.get_input("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è AI")
        if message:
            self.tester.chat(message)

        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_chat_history(self):
        """–û–±—Ä–æ–±–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É"""
        self.tester.get_chat_history()
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_prompts(self):
        """–û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        print("\nüìù –ü–†–û–ú–ü–¢–ò")
        print("1. –í—Å—ñ –ø—Ä–æ–º–ø—Ç–∏")
        print("2. –ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é")
        print("3. –ü–æ—à—É–∫")

        choice = self.get_input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é", "1")

        if choice == "1":
            self.tester.get_prompts()
        elif choice == "2":
            category = self.get_input("–í–≤–µ–¥—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", "system")
            self.tester.get_prompts(category=category)
        elif choice == "3":
            search = self.get_input("–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç")
            self.tester.get_prompts(search=search)

        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_prompt_categories(self):
        """–û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        self.tester.get_prompt_categories()
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_prompt_statistics(self):
        """–û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        self.tester.get_prompt_statistics()
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_swagger_specs(self):
        """–û–±—Ä–æ–±–∫–∞ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ–π"""
        self.tester.get_swagger_specs()
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_user_info(self):
        """–û–±—Ä–æ–±–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        self.tester.get_user_info()
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_create_prompt(self):
        """–û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É"""
        print("\n‚ú® –°–¢–í–û–†–ï–ù–ù–Ø –ö–ê–°–¢–û–ú–ù–û–ì–û –ü–†–û–ú–ü–¢–£")

        name = self.get_input("–ù–∞–∑–≤–∞ –ø—Ä–æ–º–ø—Ç—É")
        if not name:
            return

        description = self.get_input("–û–ø–∏—Å –ø—Ä–æ–º–ø—Ç—É")
        template = self.get_input("–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ {user_query} –¥–ª—è –∑–∞–ø–∏—Ç—É)")
        category = self.get_input("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "user_defined")

        if name and template:
            self.tester.create_custom_prompt(name, description, template, category)

        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_search_prompts(self):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        print("\nüîç –ü–û–®–£–ö –ü–†–û–ú–ü–¢–Ü–í")

        query = self.get_input("–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç")
        if not query:
            return

        category = self.get_input("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)")

        self.tester.search_prompts(query, category if category else None)
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_prompt_suggestions(self):
        """–û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        print("\nüí° –ü–†–û–ü–û–ó–ò–¶–Ü–á –ü–†–û–ú–ü–¢–Ü–í")

        query = self.get_input("–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π")
        if not query:
            return

        context = self.get_input("–ö–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)")

        self.tester.get_prompt_suggestions(query, context)
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_format_prompt(self):
        """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É"""
        print("\nüîß –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –ü–†–û–ú–ü–¢–£")

        prompt_id = self.get_input("ID –ø—Ä–æ–º–ø—Ç—É")
        if not prompt_id:
            return

        print('–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ (JSON —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: {"user_query": "—Ç–µ—Å—Ç"})')
        parameters_str = self.get_input("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")

        parameters = {}
        if parameters_str:
            try:
                parameters = json.loads(parameters_str)
            except json.JSONDecodeError:
                print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON")
                input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
                return

        self.tester.format_prompt(prompt_id, **parameters)
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_export_prompts(self):
        """–û–±—Ä–æ–±–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        print("\nüì§ –ï–ö–°–ü–û–†–¢ –ü–†–û–ú–ü–¢–Ü–í")

        include_custom = self.get_input("–í–∫–ª—é—á–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏? (y/n)", "y")
        include_custom_bool = include_custom.lower() == "y"

        self.tester.export_prompts(include_custom_bool)
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_reload_prompts(self):
        """–û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        print("\nüîÑ –ü–ï–†–ï–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ü–†–û–ú–ü–¢–Ü–í")
        self.tester.reload_prompts()
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def handle_status(self):
        """–û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç—É—Å—É"""
        self.tester.show_status()
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    def run(self):
        """–ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ CLI"""
        while self.running:
            try:
                self.print_header()
                self.print_menu()

                choice = self.get_input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é", "0")

                if choice == "0":
                    print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                    self.running = False

                elif choice == "1":
                    self.handle_health_check()

                elif choice == "2":
                    self.handle_demo_user()

                elif choice == "3":
                    self.handle_upload_swagger()

                elif choice == "4":
                    self.handle_chat()

                elif choice == "5":
                    self.handle_chat_history()

                elif choice == "6":
                    self.handle_prompts()

                elif choice == "7":
                    self.handle_prompt_categories()

                elif choice == "8":
                    self.handle_prompt_statistics()

                elif choice == "9":
                    self.handle_swagger_specs()

                elif choice == "10":
                    self.handle_user_info()

                elif choice == "11":
                    self.handle_create_prompt()

                elif choice == "12":
                    self.handle_search_prompts()

                elif choice == "13":
                    self.handle_prompt_suggestions()

                elif choice == "14":
                    self.handle_format_prompt()

                elif choice == "15":
                    self.handle_export_prompts()

                elif choice == "16":
                    self.handle_reload_prompts()

                elif choice == "17":
                    self.handle_status()

                else:
                    print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            except KeyboardInterrupt:
                print("\n\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                self.running = False

            except Exception as e:
                print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π CLI —Ç–µ—Å—Ç–µ—Ä –¥–ª—è AI Swagger Bot API")
    parser.add_argument("--url", default="http://localhost:8000", help="Base URL API")

    args = parser.parse_args()

    try:
        cli = InteractiveCLI(args.url)
        cli.run()
    except KeyboardInterrupt:
        print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    main()
