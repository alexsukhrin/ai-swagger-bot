#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ Clickone Shop API
"""

import json
import re

import requests


def extract_swagger_from_js():
    """–í–∏—Ç—è–≥—É—î –ø–æ–≤–Ω—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑ JavaScript —Ñ–∞–π–ª—É"""
    print("üîç –í–∏—Ç—è–≥—É—é –ø–æ–≤–Ω—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é...")

    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ JavaScript —Ñ–∞–π–ª
        response = requests.get(
            "https://api.oneshop.click/docs/swagger-ui-init.js",
            timeout=30,
            headers={"User-Agent": "AI-Swagger-Bot/1.0"},
        )

        if response.status_code != 200:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: HTTP {response.status_code}")
            return None

        js_content = response.text
        print(f"‚úÖ JavaScript —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(js_content)} —Å–∏–º–≤–æ–ª—ñ–≤")

        # –®—É–∫–∞—î–º–æ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ JSON –æ–±'—î–∫—Ç
        json_pattern = r"(\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\})"
        matches = re.findall(json_pattern, js_content)

        for match in matches:
            try:
                # –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON
                data = json.loads(match)

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è
                if isinstance(data, dict) and "openapi" in data and "paths" in data:
                    print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤–Ω—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é!")
                    print(f"   üìä OpenAPI –≤–µ—Ä—Å—ñ—è: {data.get('openapi', 'Unknown')}")
                    print(f"   üìä API: {data.get('info', {}).get('title', 'Unknown')}")
                    print(f"   üìä –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏: {len(data.get('paths', {}))}")
                    print(f"   üìä –°—Ö–µ–º–∏: {len(data.get('components', {}).get('schemas', {}))}")

                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω—É —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
                    with open("full_clickone_swagger.json", "w", encoding="utf-8") as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)

                    print("üíæ –ü–æ–≤–Ω–∞ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ full_clickone_swagger.json")
                    return data

            except json.JSONDecodeError:
                continue

        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–≤–Ω—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é")
        return None

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None


def analyze_full_spec(swagger_spec):
    """–ê–Ω–∞–ª—ñ–∑—É—î –ø–æ–≤–Ω—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é"""
    if not swagger_spec:
        return

    print("\nüîç –ê–Ω–∞–ª—ñ–∑—É—é –ø–æ–≤–Ω—É —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é...")

    paths = swagger_spec.get("paths", {})
    components = swagger_spec.get("components", {})
    schemas = components.get("schemas", {})

    print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üîó –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏: {len(paths)}")
    print(f"   üìã –°—Ö–µ–º–∏ –¥–∞–Ω–∏—Ö: {len(schemas)}")

    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –∑–∞ —Ç–µ–≥–∞–º–∏
    endpoints_by_tag = {}
    for path, methods in paths.items():
        for method, details in methods.items():
            if isinstance(details, dict):
                tags = details.get("tags", ["–ë–µ–∑ —Ç–µ–≥—É"])
                for tag in tags:
                    if tag not in endpoints_by_tag:
                        endpoints_by_tag[tag] = []
                    endpoints_by_tag[tag].append(f"{method.upper()} {path}")

    print(f"\nüìä –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –∑–∞ —Ç–µ–≥–∞–º–∏:")
    for tag, endpoints in endpoints_by_tag.items():
        print(f"   üè∑Ô∏è  {tag}: {len(endpoints)} –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤")
        for endpoint in endpoints[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
            print(f"      ‚Ä¢ {endpoint}")
        if len(endpoints) > 5:
            print(f"      ... —Ç–∞ —â–µ {len(endpoints) - 5}")

    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ö–µ–º–∏
    print(f"\nüìä –ü—Ä–∏–∫–ª–∞–¥–∏ —Å—Ö–µ–º –¥–∞–Ω–∏—Ö:")
    schema_names = list(schemas.keys())[:15]  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 15
    for i, name in enumerate(schema_names, 1):
        print(f"   {i:2d}. {name}")

    if len(schemas) > 15:
        print(f"   ... —Ç–∞ —â–µ {len(schemas) - 15} —Å—Ö–µ–º")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –í–∏—Ç—è–≥ –ø–æ–≤–Ω–æ—ó Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Clickone Shop API")
    print("=" * 60)

    # –í–∏—Ç—è–≥—É—î–º–æ –ø–æ–≤–Ω—É —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    full_spec = extract_swagger_from_js()

    if full_spec:
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —ó—ó
        analyze_full_spec(full_spec)

        print("\n‚úÖ –í–∏—Ç—è–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("üìÅ –§–∞–π–ª: full_clickone_swagger.json")
    else:
        print("\n‚ùå –í–∏—Ç—è–≥ –Ω–µ –≤–¥–∞–≤—Å—è")


if __name__ == "__main__":
    main()
