#!/usr/bin/env python3
"""
CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è AI Swagger Bot API
–î–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
"""

import argparse
import json
import sys
from datetime import datetime
from typing import Any, Dict, Optional

import requests

from src.postgres_prompt_manager import PostgresPromptManager, PromptTemplate


class APITester:
    """CLI —Ç–µ—Å—Ç–µ—Ä –¥–ª—è AI Swagger Bot API"""

    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.current_user = None
        self.current_token = None

    def print_response(self, response: requests.Response, show_headers: bool = False) -> None:
        """–í–∏–≤–æ–¥–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å API –≤ –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ"""
        print(f"\n{'='*60}")
        print(f"üì° {response.request.method} {response.request.url}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code} {response.reason}")

        if show_headers:
            print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:")
            for key, value in response.headers.items():
                print(f"   {key}: {value}")

        try:
            data = response.json()
            print(f"üì¶ –î–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:")
            print(json.dumps(data, indent=2, ensure_ascii=False))
        except json.JSONDecodeError:
            print(f"üìÑ –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:")
            print(response.text)

        print(f"{'='*60}\n")

    def health_check(self) -> None:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—É"""
        print("üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—É...")
        response = self.session.get(f"{self.base_url}/health")
        self.print_response(response)

    def create_demo_user(self) -> None:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        print("üë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
        response = self.session.post(f"{self.base_url}/demo/create-user")
        self.print_response(response)

        if response.status_code == 200:
            data = response.json()
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–∞–Ω–∏—Ö API
            self.current_user = {
                "id": data.get("user_id"),
                "email": f"{data.get('user_id')}@demo.com",
                "username": data.get("user_id"),
            }
            self.current_token = data.get("token")
            print(f"‚úÖ –î–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!")
            print(f"   ID: {self.current_user.get('id')}")
            print(f"   Email: {self.current_user.get('email')}")
            print(f"   Token: {self.current_token[:20]}...")

    def upload_swagger(self, file_path: str) -> None:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Ñ–∞–π–ª—É"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print(f"üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Ñ–∞–π–ª—É: {file_path}")

        try:
            with open(file_path, "rb") as f:
                files = {"file": f}
                headers = {"Authorization": f"Bearer {self.current_token}"}
                response = self.session.post(
                    f"{self.base_url}/upload-swagger", files=files, headers=headers
                )
                self.print_response(response)
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")

    def chat(self, message: str) -> None:
        """–ß–∞—Ç –∑ AI –∞–≥–µ–Ω—Ç–æ–º"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print(f"üí¨ –ß–∞—Ç: {message}")

        data = {"message": message}
        headers = {
            "Authorization": f"Bearer {self.current_token}",
            "Content-Type": "application/json",
        }

        response = self.session.post(f"{self.base_url}/chat", json=data, headers=headers)
        self.print_response(response)

    def get_chat_history(self) -> None:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print("üìú –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É...")

        headers = {"Authorization": f"Bearer {self.current_token}"}
        response = self.session.get(f"{self.base_url}/chat-history", headers=headers)
        self.print_response(response)

    def get_prompts(self, category: Optional[str] = None, search: Optional[str] = None) -> None:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print("üìù –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤...")

        params = {}
        if category:
            params["category"] = category
        if search:
            params["search"] = search

        headers = {"Authorization": f"Bearer {self.current_token}"}
        response = self.session.get(f"{self.base_url}/prompts/", params=params, headers=headers)
        self.print_response(response)

    def get_prompt_categories(self) -> None:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print("üìÇ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–æ–º–ø—Ç—ñ–≤...")

        headers = {"Authorization": f"Bearer {self.current_token}"}
        response = self.session.get(f"{self.base_url}/prompts/categories", headers=headers)
        self.print_response(response)

    def get_prompt_statistics(self) -> None:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print("üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤...")

        headers = {"Authorization": f"Bearer {self.current_token}"}
        response = self.session.get(f"{self.base_url}/prompts/statistics", headers=headers)
        self.print_response(response)

    def get_swagger_specs(self) -> None:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ–π"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print("üìã –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ–π...")

        headers = {"Authorization": f"Bearer {self.current_token}"}
        response = self.session.get(f"{self.base_url}/swagger-specs", headers=headers)
        self.print_response(response)

    def get_user_info(self) -> None:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print("üë§ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")

        headers = {"Authorization": f"Bearer {self.current_token}"}
        response = self.session.get(f"{self.base_url}/users/me", headers=headers)
        self.print_response(response)

    def create_custom_prompt(
        self, name: str, description: str, template: str, category: str
    ) -> None:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print(f"‚ú® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É: {name}")

        data = {
            "name": name,
            "description": description,
            "template": template,
            "category": category,
            "is_public": False,
        }

        headers = {
            "Authorization": f"Bearer {self.current_token}",
            "Content-Type": "application/json",
        }

        response = self.session.post(f"{self.base_url}/prompts/", json=data, headers=headers)
        self.print_response(response)

    def search_prompts(self, query: str, category: Optional[str] = None) -> None:
        """–ü–æ—à—É–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print(f"üîç –ü–æ—à—É–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤: {query}")

        params = {"query": query}
        if category:
            params["category"] = category

        headers = {"Authorization": f"Bearer {self.current_token}"}
        response = self.session.get(
            f"{self.base_url}/prompts/search", params=params, headers=headers
        )
        self.print_response(response)

    def get_prompt_suggestions(self, query: str, context: str = "") -> None:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print(f"üí° –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –¥–ª—è: {query}")

        params = {"query": query}
        if context:
            params["context"] = context

        headers = {"Authorization": f"Bearer {self.current_token}"}
        response = self.session.get(
            f"{self.base_url}/prompts/suggestions", params=params, headers=headers
        )
        self.print_response(response)

    def format_prompt(self, prompt_id: str, **parameters) -> None:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print(f"üîß –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É: {prompt_id}")

        data = {"prompt_id": prompt_id, "parameters": parameters}

        headers = {
            "Authorization": f"Bearer {self.current_token}",
            "Content-Type": "application/json",
        }

        response = self.session.post(f"{self.base_url}/prompts/format", json=data, headers=headers)
        self.print_response(response)

    def export_prompts(self, include_custom: bool = True) -> None:
        """–ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print("üì§ –ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç—ñ–≤...")

        params = {"include_custom": include_custom}
        headers = {"Authorization": f"Bearer {self.current_token}"}
        response = self.session.post(
            f"{self.base_url}/prompts/export", params=params, headers=headers
        )
        self.print_response(response)

    def reload_prompts(self) -> None:
        """–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        if not self.current_token:
            print("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
            return

        print("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤...")

        headers = {"Authorization": f"Bearer {self.current_token}"}
        response = self.session.post(f"{self.base_url}/prompts/reload", headers=headers)
        self.print_response(response)

    def show_status(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å"""
        print("üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:")
        print(f"   Base URL: {self.base_url}")
        if self.current_user:
            print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {self.current_user.get('email', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}")
        else:
            print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: –ù–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")
        print(f"   Token: {'–¢–∞–∫' if self.current_token else '–ù—ñ'}")
        print(f"   –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    def generate_prompts_from_swagger(self, swagger_file: str, api_key: str = None) -> None:
        """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ–º–ø—Ç–∏ —á–µ—Ä–µ–∑ GPT –Ω–∞ –æ—Å–Ω–æ–≤—ñ Swagger —Ñ–∞–π–ª—É."""
        try:
            # –ß–∏—Ç–∞—î–º–æ Swagger —Ñ–∞–π–ª
            with open(swagger_file, "r", encoding="utf-8") as f:
                swagger_data = json.load(f)

            print(f"üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ Swagger —Ñ–∞–π–ª: {swagger_file}")
            print(f"üîç –ê–Ω–∞–ª—ñ–∑—É—é {len(swagger_data.get('paths', {}))} endpoints...")

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–º–ø—Ç–∏
            response = self.session.post(
                f"{self.base_url}/prompts/generate-from-swagger",
                json={"swagger_data": swagger_data, "api_key": api_key},
            )

            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ {data['message']}")
                print(f"üìä –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {data['generated_count']} –ø—Ä–æ–º–ø—Ç—ñ–≤")
                print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {data['saved_count']} –ø—Ä–æ–º–ø—Ç—ñ–≤")

                if data.get("prompts"):
                    print("\nüìã –î–µ—Ç–∞–ª—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤:")
                    for prompt in data["prompts"]:
                        print(f"  ‚Ä¢ {prompt['name']} ({prompt['category']})")
                        print(f"    –†–µ—Å—É—Ä—Å: {prompt['resource_type']}")
                        print(f"    Endpoint: {prompt['http_method']} {prompt['endpoint_path']}")
                        print()
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤: {response.status_code}")
                print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")

        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {swagger_file}")
        except json.JSONDecodeError:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON —Ñ–∞–π–ª—É: {swagger_file}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    def generate_smart_suggestions(self, swagger_file: str, api_key: str = None) -> None:
        """–ì–µ–Ω–µ—Ä—É—î —Ä–æ–∑—É–º–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏ —á–µ—Ä–µ–∑ GPT –Ω–∞ –æ—Å–Ω–æ–≤—ñ Swagger —Ñ–∞–π–ª—É."""
        try:
            # –ß–∏—Ç–∞—î–º–æ Swagger —Ñ–∞–π–ª
            with open(swagger_file, "r", encoding="utf-8") as f:
                swagger_data = json.load(f)

            print(f"üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ Swagger —Ñ–∞–π–ª: {swagger_file}")
            print(f"üéØ –ì–µ–Ω–µ—Ä—É—é —Ä–æ–∑—É–º–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏...")

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏
            response = self.session.post(
                f"{self.base_url}/prompts/generate-suggestions",
                json={"swagger_data": swagger_data, "api_key": api_key},
            )

            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ {data['message']}")
                print(f"üí° –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {data['suggestions_count']} –ø—ñ–¥–∫–∞–∑–æ–∫")

                if data.get("suggestions"):
                    print("\nüìã –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏:")
                    for i, suggestion in enumerate(data["suggestions"], 1):
                        print(f"  {i}. {suggestion.get('title', '–ü—ñ–¥–∫–∞–∑–∫–∞')}")
                        print(f"     –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {suggestion.get('category', '–Ü–Ω—à—ñ')}")
                        print(f"     –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {suggestion.get('difficulty', 'medium')}")
                        if suggestion.get("description"):
                            print(f"     –û–ø–∏—Å: {suggestion['description']}")
                        if suggestion.get("example_query"):
                            print(f"     –ü—Ä–∏–∫–ª–∞–¥: {suggestion['example_query']}")
                        print()
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥–∫–∞–∑–æ–∫: {response.status_code}")
                print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")

        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {swagger_file}")
        except json.JSONDecodeError:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON —Ñ–∞–π–ª—É: {swagger_file}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    def auto_generate_prompts_for_user(self, swagger_spec_id: str, api_key: str = None) -> None:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")

        data = {"swagger_spec_id": swagger_spec_id}

        if api_key:
            data["api_key"] = api_key

        response = requests.post(f"{self.base_url}/prompts/auto-generate-for-user", json=data)
        self.print_response(response)

    def test_postgres_prompts(self) -> None:
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è PostgreSQL –ø—Ä–æ–º–ø—Ç—ñ–≤."""
        print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è PostgreSQL –ø—Ä–æ–º–ø—Ç—ñ–≤...")

        try:
            from src.postgres_prompt_manager import PostgresPromptManager, PromptTemplate

            manager = PostgresPromptManager()

            # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç
            test_prompt = PromptTemplate(
                name="–¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç PostgreSQL",
                description="–ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è PostgreSQL",
                template="–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç –∑ PostgreSQL",
                category="test",
                tags=["test", "demo", "postgresql"],
            )

            prompt_id = manager.add_prompt(test_prompt)
            print(f"‚úÖ –î–æ–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç –∑ ID: {prompt_id}")

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç
            retrieved_prompt = manager.get_prompt(prompt_id)
            if retrieved_prompt:
                print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–æ–º–ø—Ç: {retrieved_prompt.name}")

            # –®—É–∫–∞—î–º–æ –ø—Ä–æ–º–ø—Ç–∏
            search_results = manager.search_prompts("—Ç–µ—Å—Ç")
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(search_results)} –ø—Ä–æ–º–ø—Ç—ñ–≤ –ø—Ä–∏ –ø–æ—à—É–∫—É")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = manager.get_statistics()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_prompts']} –ø—Ä–æ–º–ø—Ç—ñ–≤")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è PostgreSQL –ø—Ä–æ–º–ø—Ç—ñ–≤: {e}")

    def migrate_prompts(self) -> None:
        """–ú—ñ–≥—Ä–∞—Ü—ñ—è –ø—Ä–æ–º–ø—Ç—ñ–≤ –∑ SQLite –≤ PostgreSQL."""
        print("üîÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è –ø—Ä–æ–º–ø—Ç—ñ–≤ –∑ SQLite –≤ PostgreSQL...")

        try:
            from src.postgres_prompt_manager import PostgresPromptManager

            manager = PostgresPromptManager()
            manager.migrate_from_sqlite("prompts.db")
            print("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")

    def list_postgres_prompts(self) -> None:
        """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –ø—Ä–æ–º–ø—Ç–∏ –≤ PostgreSQL."""
        print("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤ –≤ PostgreSQL...")

        try:
            from sqlalchemy import text

            from src.postgres_prompt_manager import PostgresPromptManager

            manager = PostgresPromptManager()

            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—Ä–æ–º–ø—Ç–∏
            with manager.get_db_session() as session:
                result = session.execute(
                    text(
                        """
                    SELECT id, name, description, category, is_active, created_at
                    FROM prompt_templates
                    ORDER BY created_at DESC
                """
                    )
                )

                prompts = result.fetchall()

                if not prompts:
                    print("üì≠ –ü—Ä–æ–º–ø—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    return

                print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(prompts)} –ø—Ä–æ–º–ø—Ç—ñ–≤:")
                print("-" * 80)

                for i, prompt in enumerate(prompts, 1):
                    status = "‚úÖ" if prompt[4] else "‚ùå"
                    print(f"{i:2d}. {status} {prompt[1]}")
                    print(f"     ID: {prompt[0]}")
                    print(f"     –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {prompt[3]}")
                    print(f"     –°—Ç–≤–æ—Ä–µ–Ω–æ: {prompt[5]}")
                    if prompt[2]:
                        print(f"     –û–ø–∏—Å: {prompt[2][:50]}...")
                    print()

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤: {e}")

    def remove_sqlite_files(self) -> None:
        """–í–∏–¥–∞–ª—è—î SQLite —Ñ–∞–π–ª–∏."""
        print("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è SQLite —Ñ–∞–π–ª—ñ–≤...")
        try:
            import os

            sqlite_files = ["prompts.db", "prompts.db-shm", "prompts.db-wal"]
            for file in sqlite_files:
                if os.path.exists(file):
                    os.remove(file)
                    print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {file}")
                else:
                    print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file}")
            print("‚úÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è SQLite —Ñ–∞–π–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è SQLite —Ñ–∞–π–ª—ñ–≤: {e}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è CLI"""
    parser = argparse.ArgumentParser(
        description="CLI —Ç–µ—Å—Ç–µ—Ä –¥–ª—è AI Swagger Bot API",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
  python cli_tester.py health
  python cli_tester.py demo-user
  python cli_tester.py upload-swagger examples/swagger_specs/shop_api.json
  python cli_tester.py chat "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ endpoints"
  python cli_tester.py prompts
  python cli_tester.py prompts --category system
  python cli_tester.py create-prompt "–ú—ñ–π –ø—Ä–æ–º–ø—Ç" "–û–ø–∏—Å" "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç {user_query}" user_defined
        """,
    )

    parser.add_argument("command", help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
    parser.add_argument("--url", default="http://localhost:8000", help="Base URL API")
    parser.add_argument("--file", help="–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É (–¥–ª—è upload-swagger)")
    parser.add_argument("--message", help="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç—É")
    parser.add_argument("--category", help="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø—Ä–æ–º–ø—Ç—ñ–≤")
    parser.add_argument("--search", help="–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç")
    parser.add_argument("--query", help="–ó–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É")
    parser.add_argument("--context", help="–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π")
    parser.add_argument("--name", help="–ù–∞–∑–≤–∞ –ø—Ä–æ–º–ø—Ç—É")
    parser.add_argument("--description", help="–û–ø–∏—Å –ø—Ä–æ–º–ø—Ç—É")
    parser.add_argument("--template", help="–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç—É")
    parser.add_argument("--prompt-id", help="ID –ø—Ä–æ–º–ø—Ç—É")
    parser.add_argument("--parameters", help="–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (JSON)")
    parser.add_argument("--include-custom", action="store_true", help="–í–∫–ª—é—á–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏")
    parser.add_argument("--api-key", help="OpenAI API –∫–ª—é—á")
    parser.add_argument("--swagger-spec-id", help="ID Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")

    args = parser.parse_args()

    tester = APITester(args.url)

    try:
        if args.command == "health":
            tester.health_check()

        elif args.command == "demo-user":
            tester.create_demo_user()

        elif args.command == "upload-swagger":
            if not args.file:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É: --file path/to/file.json")
                sys.exit(1)
            tester.upload_swagger(args.file)

        elif args.command == "chat":
            if not args.message:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: --message '–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'")
                sys.exit(1)
            tester.chat(args.message)

        elif args.command == "chat-history":
            tester.get_chat_history()

        elif args.command == "prompts":
            tester.get_prompts(category=args.category, search=args.search)

        elif args.command == "prompt-categories":
            tester.get_prompt_categories()

        elif args.command == "prompt-statistics":
            tester.get_prompt_statistics()

        elif args.command == "swagger-specs":
            tester.get_swagger_specs()

        elif args.command == "user-info":
            tester.get_user_info()

        elif args.command == "create-prompt":
            if not all([args.name, args.description, args.template]):
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É, –æ–ø–∏—Å —Ç–∞ —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç—É")
                sys.exit(1)
            tester.create_custom_prompt(
                args.name, args.description, args.template, args.category or "user_defined"
            )

        elif args.command == "search-prompts":
            if not args.query:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É: --query '–ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç'")
                sys.exit(1)
            tester.search_prompts(args.query, args.category)

        elif args.command == "prompt-suggestions":
            if not args.query:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π: --query '–∑–∞–ø–∏—Ç'")
                sys.exit(1)
            tester.get_prompt_suggestions(args.query, args.context or "")

        elif args.command == "format-prompt":
            if not args.prompt_id:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –ø—Ä–æ–º–ø—Ç—É: --prompt-id 'prompt_id'")
                sys.exit(1)
            parameters = {}
            if args.parameters:
                try:
                    parameters = json.loads(args.parameters)
                except json.JSONDecodeError:
                    print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤")
                    sys.exit(1)
            tester.format_prompt(args.prompt_id, **parameters)

        elif args.command == "export-prompts":
            tester.export_prompts(args.include_custom)

        elif args.command == "reload-prompts":
            tester.reload_prompts()

        elif args.command == "generate-prompts":
            if not args.file:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å Swagger —Ñ–∞–π–ª: --file path/to/swagger.json")
                sys.exit(1)
            tester.generate_prompts_from_swagger(args.file, args.api_key)

        elif args.command == "generate-suggestions":
            if not args.file:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å Swagger —Ñ–∞–π–ª: --file path/to/swagger.json")
                sys.exit(1)
            tester.generate_smart_suggestions(args.file, args.api_key)

        elif args.command == "auto-generate":
            if not args.swagger_spec_id:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å ID Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: --swagger-spec-id 'id'")
                sys.exit(1)
            tester.auto_generate_prompts_for_user(args.swagger_spec_id, args.api_key)

        elif args.command == "test-postgres-prompts":
            tester.test_postgres_prompts()

        elif args.command == "migrate-prompts":
            tester.migrate_prompts()

        elif args.command == "list-postgres-prompts":
            tester.list_postgres_prompts()

        elif args.command == "remove-sqlite":
            tester.remove_sqlite_files()

        elif args.command == "status":
            tester.show_status()

        else:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {args.command}")
            print("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
            print("  health, demo-user, upload-swagger, chat, chat-history")
            print("  prompts, prompt-categories, prompt-statistics, swagger-specs")
            print("  user-info, create-prompt, search-prompts, prompt-suggestions")
            print("  format-prompt, export-prompts, reload-prompts")
            print("  generate-prompts, generate-suggestions, auto-generate")
            print("  test-postgres-prompts, migrate-prompts, list-postgres-prompts, status")
            sys.exit(1)

    except requests.exceptions.ConnectionError:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ {args.url}")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π API —Å–µ—Ä–≤–µ—Ä")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
