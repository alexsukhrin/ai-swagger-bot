"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π Streamlit —á–∞—Ç-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è InteractiveSwaggerAgent
"""

import streamlit as st
import os
import sys
from pathlib import Path
import json
import requests
from datetime import datetime
import logging
from typing import Dict, Any, List
import time
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ src
current_dir = os.path.dirname(os.path.abspath(__file__))
src_path = os.path.join(current_dir, 'src')
sys.path.insert(0, src_path)

try:
    from interactive_api_agent import InteractiveSwaggerAgent
except ImportError as e:
    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É InteractiveSwaggerAgent: {e}")
    st.info("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ conda —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ: conda activate ai-swagger")
    st.stop()


def check_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞."""
    if not os.getenv('OPENAI_API_KEY'):
        st.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ OPENAI_API_KEY –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        st.info("–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∑ OPENAI_API_KEY=your_key_here")
        return False
    return True


def initialize_session_state():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó –¥–ª—è —á–∞—Ç—É."""
    if 'messages' not in st.session_state:
        st.session_state.messages = []
    if 'agent' not in st.session_state:
        st.session_state.agent = None
    if 'swagger_path' not in st.session_state:
        st.session_state.swagger_path = None
    if 'user_id' not in st.session_state:
        st.session_state.user_id = f"user_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    if 'needs_followup' not in st.session_state:
        st.session_state.needs_followup = False
    if 'last_interaction' not in st.session_state:
        st.session_state.last_interaction = None
    if 'chat_started' not in st.session_state:
        st.session_state.chat_started = False
    if 'api_calls_enabled' not in st.session_state:
        st.session_state.api_calls_enabled = False


def initialize_agent(swagger_path: str, enable_api_calls: bool = False):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î InteractiveSwaggerAgent."""
    try:
        with st.spinner("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è InteractiveSwaggerAgent..."):
            agent = InteractiveSwaggerAgent(
                swagger_spec_path=swagger_path,
                enable_api_calls=enable_api_calls,
                openai_api_key=os.getenv('OPENAI_API_KEY'),
                jwt_token=os.getenv('JWT_TOKEN')
            )
            return agent
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞: {e}")
        return None


def format_message(content: str, role: str, timestamp: datetime = None, status: str = None):
    """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç—É."""
    if timestamp is None:
        timestamp = datetime.now()
    
    return {
        "role": role,
        "content": content,
        "timestamp": timestamp,
        "status": status
    }


def display_message(message: Dict[str, Any]):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ."""
    role = message["role"]
    content = message["content"]
    timestamp = message.get("timestamp", datetime.now())
    status = message.get("status")
    
    if role == "user":
        with st.chat_message("user", avatar="üë§"):
            st.write(content)
            st.caption(f"üïê {timestamp.strftime('%H:%M:%S')}")
    elif role == "assistant":
        with st.chat_message("assistant", avatar="ü§ñ"):
            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —è–∫—â–æ —î
            if status:
                status_emoji = {
                    'success': '‚úÖ',
                    'error': '‚ùå',
                    'needs_followup': 'üîÑ',
                    'preview': 'üëÅÔ∏è'
                }.get(status, '‚ùì')
                st.markdown(f"{status_emoji} **–°—Ç–∞—Ç—É—Å: {status.upper()}**")
                st.markdown("---")
            
            st.markdown(content)
            st.caption(f"üïê {timestamp.strftime('%H:%M:%S')}")
    elif role == "system":
        with st.chat_message("assistant", avatar="‚öôÔ∏è"):
            st.info(content)
            st.caption(f"üïê {timestamp.strftime('%H:%M:%S')}")


def process_user_message(user_message: str, agent: InteractiveSwaggerAgent, user_id: str):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    try:
        if st.session_state.needs_followup:
            # –û–±—Ä–æ–±–ª—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
            response = agent.process_followup_query(user_message, user_id)
            st.session_state.needs_followup = response.get('needs_followup', False)
        else:
            # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
            response = agent.process_interactive_query(user_message, user_id)
            st.session_state.needs_followup = response.get('needs_followup', False)
        
        return response
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return {
            'response': f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {str(e)}",
            'status': 'error',
            'needs_followup': False
        }


def get_enhanced_chat_style():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–∫—Ä–∞—â–µ–Ω—ñ CSS —Å—Ç–∏–ª—ñ –¥–ª—è —á–∞—Ç—É."""
    return """
    <style>
    /* –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç–∏–ª—ñ */
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 10px;
        color: white;
        margin-bottom: 20px;
    }
    
    .chat-container {
        background-color: #f8f9fa;
        border-radius: 15px;
        padding: 20px;
        margin: 10px 0;
        border: 1px solid #e9ecef;
    }
    
    .message-bubble {
        background-color: white;
        border-radius: 15px;
        padding: 15px;
        margin: 10px 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        border-left: 4px solid #007bff;
    }
    
    .user-message {
        background-color: #e3f2fd;
        border-left-color: #2196f3;
    }
    
    .assistant-message {
        background-color: #f3e5f5;
        border-left-color: #9c27b0;
    }
    
    .system-message {
        background-color: #fff3e0;
        border-left-color: #ff9800;
    }
    
    .status-badge {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 10px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    
    .status-success {
        background-color: #4caf50;
        color: white;
    }
    
    .status-error {
        background-color: #f44336;
        color: white;
    }
    
    .status-needs-followup {
        background-color: #ff9800;
        color: white;
    }
    
    .status-preview {
        background-color: #2196f3;
        color: white;
    }
    
    .sidebar-section {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        border: 1px solid #e9ecef;
    }
    
    .input-container {
        background-color: white;
        border-radius: 15px;
        padding: 20px;
        border: 2px solid #e9ecef;
        margin-top: 20px;
    }
    
    .button-primary {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 10px 20px;
        font-weight: bold;
    }
    
    .button-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 25px;
        padding: 10px 20px;
    }
    
    .stats-card {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        border: 1px solid #e9ecef;
        text-align: center;
    }
    
    .stats-number {
        font-size: 24px;
        font-weight: bold;
        color: #007bff;
    }
    
    .stats-label {
        font-size: 12px;
        color: #6c757d;
        text-transform: uppercase;
    }
    </style>
    """


def display_chat_stats():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç—É."""
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="stats-card">
            <div class="stats-number">""" + str(len(st.session_state.messages)) + """</div>
            <div class="stats-label">–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        user_messages = len([m for m in st.session_state.messages if m["role"] == "user"])
        st.markdown(f"""
        <div class="stats-card">
            <div class="stats-number">{user_messages}</div>
            <div class="stats-label">–í–∞—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        assistant_messages = len([m for m in st.session_state.messages if m["role"] == "assistant"])
        st.markdown(f"""
        <div class="stats-card">
            <div class="stats-number">{assistant_messages}</div>
            <div class="stats-label">–í—ñ–¥–ø–æ–≤—ñ–¥–µ–π –±–æ—Ç–∞</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        if st.session_state.needs_followup:
            status_text = "üîÑ –û—á—ñ–∫—É—î"
            status_color = "#ff9800"
        else:
            status_text = "‚úÖ –ì–æ—Ç–æ–≤–∏–π"
            status_color = "#4caf50"
        
        st.markdown(f"""
        <div class="stats-card">
            <div class="stats-number" style="color: {status_color};">{status_text}</div>
            <div class="stats-label">–°—Ç–∞—Ç—É—Å</div>
        </div>
        """, unsafe_allow_html=True)


def main():
    st.set_page_config(
        page_title="AI Swagger Bot - –†–æ–∑—É–º–Ω–∏–π –ß–∞—Ç",
        page_icon="üí¨",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # –î–æ–¥–∞—î–º–æ CSS —Å—Ç–∏–ª—ñ
    st.markdown(get_enhanced_chat_style(), unsafe_allow_html=True)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    if not check_environment():
        return
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó
    initialize_session_state()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div class="main-header">
        <h1>üí¨ AI Swagger Bot - –†–æ–∑—É–º–Ω–∏–π –ß–∞—Ç</h1>
        <p>ü§ñ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API —á–µ—Ä–µ–∑ –ø—Ä–∏—Ä–æ–¥–Ω—É –º–æ–≤—É</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
        # –í–∏–±—ñ—Ä Swagger —Ñ–∞–π–ª—É
        swagger_files = list(Path("examples/swagger_specs").glob("*.json"))
        swagger_files.extend(Path("examples/swagger_specs").glob("*.yaml"))
        swagger_files.extend(Path("examples/swagger_specs").glob("*.yml"))
        
        if swagger_files:
            selected_file = st.selectbox(
                "üìÑ Swagger —Ñ–∞–π–ª:",
                [f.name for f in swagger_files],
                index=0
            )
            swagger_path = f"examples/swagger_specs/{selected_file}"
        else:
            st.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ Swagger —Ñ–∞–π–ª—ñ–≤ –≤ examples/swagger_specs/")
            return
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –≤–∏–∫–ª–∏–∫—ñ–≤
        enable_api_calls = st.checkbox("üîó –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤–∏–∫–ª–∏–∫–∏ API", value=False)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞
        if st.button("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∞–≥–µ–Ω—Ç–∞", type="primary"):
            agent = initialize_agent(swagger_path, enable_api_calls)
            if agent:
                st.session_state.agent = agent
                st.session_state.swagger_path = swagger_path
                st.session_state.api_calls_enabled = enable_api_calls
                st.session_state.chat_started = True
                st.success("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
                
                # –î–æ–¥–∞—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                welcome_message = format_message(
                    f"ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø InteractiveSwaggerAgent –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ API.\n\n"
                    f"üìã –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
                    f"‚Ä¢ Swagger —Ñ–∞–π–ª: {selected_file}\n"
                    f"‚Ä¢ API –≤–∏–∫–ª–∏–∫–∏: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if enable_api_calls else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
                    f"‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ID: {st.session_state.user_id}\n\n"
                    f"üí° –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Ç–∏ —è–∫:\n"
                    f"‚Ä¢ '–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é'\n"
                    f"‚Ä¢ '–ü–æ–∫–∞–∂–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏'\n"
                    f"‚Ä¢ '–û—Ç—Ä–∏–º–∞–π —Ç–æ–≤–∞—Ä –∑ ID 1'\n"
                    f"‚Ä¢ '–°—Ç–≤–æ—Ä–∏ —Ç–æ–≤–∞—Ä –∑ –Ω–∞–∑–≤–æ—é –¢–µ–ª–µ—Ñ–æ–Ω'",
                    "assistant"
                )
                st.session_state.messages.append(welcome_message)
                st.rerun()
            else:
                st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞")
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≥–µ–Ω—Ç–∞
        if st.session_state.agent:
            st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
            st.subheader("üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≥–µ–Ω—Ç–∞")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API
            try:
                api_summary = st.session_state.agent.get_api_summary()
                st.write(f"üåê –ë–∞–∑–æ–≤–∏–π URL: {api_summary.get('base_url', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
                st.write(f"üìã Endpoints: {api_summary.get('total_endpoints', 0)}")
                st.write(f"üìö –°—Ö–µ–º–∏: {api_summary.get('total_schemas', 0)}")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API: {e}")
            st.markdown('</div>', unsafe_allow_html=True)
            
            # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
            st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
            st.subheader("üéõÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é"):
                    st.session_state.messages = []
                    st.session_state.needs_followup = False
                    st.session_state.last_interaction = None
                    st.success("‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è –æ—á–∏—â–µ–Ω–∞!")
                    st.rerun()
            
            with col2:
                if st.button("üì• –ï–∫—Å–ø–æ—Ä—Ç —á–∞—Ç—É"):
                    export_chat_history()
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó
        st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
        st.subheader("üìà –°—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó")
        st.write(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {st.session_state.user_id}")
        st.write(f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {len(st.session_state.messages)}")
        if st.session_state.needs_followup:
            st.warning("üîÑ –û—á—ñ–∫—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó")
        else:
            st.success("‚úÖ –ì–æ—Ç–æ–≤–∏–π –¥–æ –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤")
        st.markdown('</div>', unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if not st.session_state.agent:
        st.info("üöÄ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∞–≥–µ–Ω—Ç–∞' –≤ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç—É
    display_chat_stats()
    
    # –ß–∞—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    st.subheader("üí¨ –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏")
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    for message in st.session_state.messages:
        display_message(message)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    if st.session_state.needs_followup:
        st.warning("üîÑ –û—á—ñ–∫—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤—ñ–¥ –≤–∞—Å...")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è
    st.markdown('<div class="input-container">', unsafe_allow_html=True)
    st.subheader("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ placeholder
    if st.session_state.needs_followup:
        placeholder = "üí° –ù–∞–¥–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é..."
    else:
        placeholder = "üí¨ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é..."
    
    # –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è
    user_input = st.text_area(
        "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:",
        placeholder=placeholder,
        height=100,
        key="user_input"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
    col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
    
    with col1:
        if st.button("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", type="primary"):
            if user_input.strip():
                process_user_input(user_input.strip())
    
    with col2:
        if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏"):
            st.rerun()
    
    with col3:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª–µ"):
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è
            st.rerun()
    
    with col4:
        if st.button("üí° –ü—ñ–¥–∫–∞–∑–∫–∏"):
            show_tips()
    
    st.markdown('</div>', unsafe_allow_html=True)


def process_user_input(user_input: str):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Ç–µ–∫—Å—Ç."""
    if not user_input.strip():
        return
    
    # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_message = format_message(user_input, "user")
    st.session_state.messages.append(user_message)
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç
    with st.spinner("ü§ñ –û–±—Ä–æ–±–ª—è—é –∑–∞–ø–∏—Ç..."):
        response = process_user_message(
            user_input, 
            st.session_state.agent, 
            st.session_state.user_id
        )
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    status = response.get('status', 'unknown')
    content = response.get('response', '–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ')
    
    # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
    assistant_message = format_message(content, "assistant", status=status)
    st.session_state.messages.append(assistant_message)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É (–±–µ–∑ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è)
    st.rerun()


def export_chat_history():
    """–ï–∫—Å–ø–æ—Ä—Ç—É—î —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É."""
    if not st.session_state.messages:
        st.warning("üì≠ –ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É")
        return
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    export_data = {
        "user_id": st.session_state.user_id,
        "timestamp": datetime.now().isoformat(),
        "messages": st.session_state.messages
    }
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    json_str = json.dumps(export_data, ensure_ascii=False, indent=2, default=str)
    
    st.download_button(
        label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É",
        data=json_str,
        file_name=f"chat_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        mime="application/json"
    )


def show_tips():
    """–ü–æ–∫–∞–∑—É—î –ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    tips = [
        "üí° –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Ç–∏ —è–∫: '–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é'",
        "üí° –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: '–ü–æ–∫–∞–∂–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏'",
        "üí° –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: '–û–Ω–æ–≤–∏ —Ç–æ–≤–∞—Ä –∑ ID 1'",
        "üí° –î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: '–í–∏–¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é 2'",
        "üí° –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è - –±–æ—Ç –∑–∞–ø–∏—Ç–∞—î —ó—ó",
        "üí° –ë–æ—Ç –ø–∞–º'—è—Ç–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤",
        "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∏—Ä–æ–¥–Ω—É –º–æ–≤—É - –±–æ—Ç –∑—Ä–æ–∑—É–º—ñ—î"
    ]
    
    st.info("üí° **–ö–æ—Ä–∏—Å–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏:**")
    for tip in tips:
        st.write(tip)


if __name__ == "__main__":
    main()
