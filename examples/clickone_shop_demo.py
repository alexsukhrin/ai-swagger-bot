#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ AI Swagger Bot –∑ Clickone Shop API

–¶–µ–π —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—É—î, —è–∫ AI Swagger Bot –º–æ–∂–µ:
1. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
2. –°—Ç–≤–æ—Ä–∏—Ç–∏ embeddings –¥–ª—è API endpoints
3. –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
4. –ù–∞–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API —Å—Ç—Ä—É–∫—Ç—É—Ä—É
"""

import json
import sys
from pathlib import Path
from typing import Any, Dict, List

# –î–æ–¥–∞—î–º–æ src –¥–æ Python path
src_path = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(src_path))


def load_swagger_spec() -> Dict[str, Any]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î Clickone Shop API —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é"""
    spec_path = Path(__file__).parent / "swagger_specs" / "clickone_shop_api.json"

    try:
        with open(spec_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª {spec_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é:")
        print(
            "curl 'https://api.oneshop.click/docs/ai-json' > examples/swagger_specs/clickone_shop_api.json"
        )
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
        sys.exit(1)


def analyze_api_structure(swagger_spec: Dict[str, Any]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª—ñ–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É API —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    paths = swagger_spec.get("paths", {})
    schemas = swagger_spec.get("components", {}).get("schemas", {})

    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ endpoints –∑–∞ –º–µ—Ç–æ–¥–∞–º–∏
    methods_count = {}
    total_endpoints = 0

    for path, operations in paths.items():
        for method in operations.keys():
            if method.upper() in methods_count:
                methods_count[method.upper()] += 1
            else:
                methods_count[method.upper()] = 1
            total_endpoints += 1

    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ö–µ–º–∏ –∑–∞ —Ç–∏–ø–∞–º–∏
    schema_types = {}
    for schema_name, schema in schemas.items():
        schema_type = schema.get("type", "unknown")
        if schema_type in schema_types:
            schema_types[schema_type] += 1
        else:
            schema_types[schema_type] = 1

    return {
        "total_endpoints": total_endpoints,
        "methods_count": methods_count,
        "total_schemas": len(schemas),
        "schema_types": schema_types,
        "api_info": swagger_spec.get("info", {}),
        "security_schemes": list(
            swagger_spec.get("components", {}).get("securitySchemes", {}).keys()
        ),
    }


def get_endpoint_details(
    swagger_spec: Dict[str, Any], path: str, method: str = None
) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ endpoint"""
    paths = swagger_spec.get("paths", {})

    if path not in paths:
        return {"error": f"Endpoint {path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}

    endpoint = paths[path]

    if method and method.upper() in endpoint:
        operation = endpoint[method.upper()]
        return {
            "path": path,
            "method": method.upper(),
            "summary": operation.get("summary", "–ù–µ–º–∞—î –æ–ø–∏—Å—É"),
            "description": operation.get("description", "–ù–µ–º–∞—î –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å—É"),
            "operationId": operation.get("operationId", "–ù–µ–º–∞—î ID –æ–ø–µ—Ä–∞—Ü—ñ—ó"),
            "tags": operation.get("tags", []),
            "parameters": operation.get("parameters", []),
            "responses": list(operation.get("responses", {}).keys()),
            "security": operation.get("security", []),
        }

    # –Ø–∫—â–æ –º–µ—Ç–æ–¥ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç–æ–¥–∏
    available_methods = list(endpoint.keys())
    return {
        "path": path,
        "available_methods": available_methods,
        "operations": {method: endpoint[method] for method in available_methods},
    }


def get_schema_details(swagger_spec: Dict[str, Any], schema_name: str) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ö–µ–º—É"""
    schemas = swagger_spec.get("components", {}).get("schemas", {})

    if schema_name not in schemas:
        return {"error": f"–°—Ö–µ–º–∞ {schema_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"}

    schema = schemas[schema_name]

    return {
        "name": schema_name,
        "type": schema.get("type", "unknown"),
        "description": schema.get("description", "–ù–µ–º–∞—î –æ–ø–∏—Å—É"),
        "properties": list(schema.get("properties", {}).keys()),
        "required": schema.get("required", []),
        "examples": schema.get("examples", {}),
    }


def search_endpoints(swagger_spec: Dict[str, Any], query: str) -> List[Dict[str, Any]]:
    """–®—É–∫–∞—î endpoints –∑–∞ –∑–∞–ø–∏—Ç–æ–º"""
    paths = swagger_spec.get("paths", {})
    results = []

    query_lower = query.lower()

    for path, operations in paths.items():
        for method, operation in operations.items():
            summary = operation.get("summary", "").lower()
            description = operation.get("description", "").lower()
            tags = [tag.lower() for tag in operation.get("tags", [])]

            if (
                query_lower in summary
                or query_lower in description
                or any(query_lower in tag for tag in tags)
            ):
                results.append(
                    {
                        "path": path,
                        "method": method.upper(),
                        "summary": operation.get("summary", ""),
                        "tags": operation.get("tags", []),
                    }
                )

    return results


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("üöÄ AI Swagger Bot - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ Clickone Shop API")
    print("=" * 70)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    print("\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")
    swagger_spec = load_swagger_spec()
    print("‚úÖ –°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")

    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É API
    print("\nüîç –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ API...")
    analysis = analyze_api_structure(swagger_spec)

    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:")
    print(f"   ‚Ä¢ –ù–∞–∑–≤–∞: {analysis['api_info'].get('title', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
    print(f"   ‚Ä¢ –í–µ—Ä—Å—ñ—è: {analysis['api_info'].get('version', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
    print(f"   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å endpoints: {analysis['total_endpoints']}")
    print(f"   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ö–µ–º: {analysis['total_schemas']}")

    print(f"\nüìã –ú–µ—Ç–æ–¥–∏ HTTP:")
    for method, count in analysis["methods_count"].items():
        print(f"   ‚Ä¢ {method}: {count}")

    print(f"\nüîê –°—Ö–µ–º–∏ –±–µ–∑–ø–µ–∫–∏:")
    for scheme in analysis["security_schemes"]:
        print(f"   ‚Ä¢ {scheme}")

    # –î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ –ø–æ—à—É–∫ endpoints
    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É endpoints...")

    search_queries = ["category", "product", "order", "customer"]
    for query in search_queries:
        print(f"\nüìù –ü–æ—à—É–∫: '{query}'")
        results = search_endpoints(swagger_spec, query)

        if results:
            print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} endpoints:")
            for result in results[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
                print(f"     ‚Ä¢ {result['method']} {result['path']} - {result['summary']}")
            if len(results) > 3:
                print(f"     ... —Ç–∞ —â–µ {len(results) - 3}")
        else:
            print(f"   Endpoints –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    # –î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ –¥–µ—Ç–∞–ª—ñ endpoints
    print("\nüìã –î–µ—Ç–∞–ª—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö endpoints...")

    main_endpoints = [
        ("/api/categories", "GET"),
        ("/api/categories", "POST"),
        ("/api/categories/{id}", "GET"),
    ]

    for path, method in main_endpoints:
        details = get_endpoint_details(swagger_spec, path, method)
        if "error" not in details and "summary" in details:
            print(f"\nüîó {method} {path}")
            print(f"   ‚Ä¢ –û–ø–∏—Å: {details['summary']}")
            print(f"   ‚Ä¢ –¢–µ–≥–∏: {', '.join(details['tags'])}")
            print(f"   ‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ: {', '.join(details['responses'])}")

    # –î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ —Å—Ö–µ–º–∏
    print("\nüìä –î–µ—Ç–∞–ª—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å—Ö–µ–º...")

    main_schemas = ["CreateCategoryDto", "CreateProductDto", "CreateOrderDto"]
    for schema_name in main_schemas:
        details = get_schema_details(swagger_spec, schema_name)
        if "error" not in details:
            print(f"\nüìù {schema_name}")
            print(f"   ‚Ä¢ –¢–∏–ø: {details['type']}")
            print(f"   ‚Ä¢ –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: {', '.join(details['properties'][:5])}")
            if len(details["properties"]) > 5:
                print(f"     ... —Ç–∞ —â–µ {len(details['properties']) - 5}")
            print(f"   ‚Ä¢ –û–±–æ–≤'—è–∑–∫–æ–≤—ñ: {', '.join(details['required'])}")

    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –¶–µ –ø–æ–∫–∞–∑—É—î, —è–∫ AI Swagger Bot –º–æ–∂–µ:")
    print("   ‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É API")
    print("   ‚Ä¢ –®—É–∫–∞—Ç–∏ endpoints –∑–∞ –∑–∞–ø–∏—Ç–∞–º–∏")
    print("   ‚Ä¢ –ù–∞–¥–∞–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ endpoints —Ç–∞ —Å—Ö–µ–º–∏")
    print("   ‚Ä¢ –î–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º —Ä–æ–∑—É–º—ñ—Ç–∏ API")


if __name__ == "__main__":
    main()
