#!/usr/bin/env python3
"""
–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI Swagger Bot —è–∫ —Å–µ—Ä–≤–µ—Ä–ª–µ—Å —Å–µ—Ä–≤—ñ—Å–∞
"""

import json
import os
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É –¥–æ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def example_health_check():
    """–ü—Ä–∏–∫–ª–∞–¥ health check –∑–∞–ø–∏—Ç—É."""
    print("üîç –ü—Ä–∏–∫–ª–∞–¥ health check –∑–∞–ø–∏—Ç—É:")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π event
    event = {
        "version": "2.0",
        "routeKey": "GET /health",
        "rawPath": "/health",
        "rawQueryString": "",
        "headers": {
            "accept": "application/json",
            "content-type": "application/json",
            "host": "api.example.com"
        },
        "requestContext": {
            "accountId": "123456789012",
            "apiId": "api-id",
            "domainName": "api.example.com",
            "http": {
                "method": "GET",
                "path": "/health",
                "protocol": "HTTP/1.1",
                "sourceIp": "127.0.0.1"
            },
            "requestId": "request-id",
            "routeKey": "GET /health",
            "stage": "$default"
        },
        "isBase64Encoded": False,
        "body": ""
    }
    
    print(f"üì§ Event: {json.dumps(event, indent=2)}")
    
    try:
        from lambda_handler import handler
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ Lambda handler
        response = handler(event, {})
        
        print(f"üì• Response: {json.dumps(response, indent=2)}")
        return response
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

def example_chat_request():
    """–ü—Ä–∏–∫–ª–∞–¥ chat –∑–∞–ø–∏—Ç—É."""
    print("\nüí¨ –ü—Ä–∏–∫–ª–∞–¥ chat –∑–∞–ø–∏—Ç—É:")
    
    chat_data = {
        "message": "–ü–æ–∫–∞–∂–∏ –º–µ–Ω—ñ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ API endpoints",
        "user_id": "user-123"
    }
    
    event = {
        "version": "2.0",
        "routeKey": "POST /chat",
        "rawPath": "/chat",
        "rawQueryString": "",
        "headers": {
            "accept": "application/json",
            "content-type": "application/json",
            "authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "host": "api.example.com"
        },
        "requestContext": {
            "accountId": "123456789012",
            "apiId": "api-id",
            "domainName": "api.example.com",
            "http": {
                "method": "POST",
                "path": "/chat",
                "protocol": "HTTP/1.1",
                "sourceIp": "127.0.0.1"
            },
            "requestId": "request-id",
            "routeKey": "POST /chat",
            "stage": "$default"
        },
        "isBase64Encoded": False,
        "body": json.dumps(chat_data)
    }
    
    print(f"üì§ Event: {json.dumps(event, indent=2)}")
    
    try:
        from lambda_handler import handler
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ Lambda handler
        response = handler(event, {})
        
        print(f"üì• Response: {json.dumps(response, indent=2)}")
        return response
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

def example_upload_swagger():
    """–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó."""
    print("\nüìÑ –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:")
    
    # –¢–µ—Å—Ç–æ–≤–∞ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è
    swagger_spec = {
        "openapi": "3.0.0",
        "info": {
            "title": "E-commerce API",
            "version": "1.0.0",
            "description": "API –¥–ª—è e-commerce –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏"
        },
        "paths": {
            "/products": {
                "get": {
                    "summary": "–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤",
                    "responses": {
                        "200": {
                            "description": "–£—Å–ø—ñ—à–Ω–æ"
                        }
                    }
                },
                "post": {
                    "summary": "–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä",
                    "responses": {
                        "201": {
                            "description": "–¢–æ–≤–∞—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ"
                        }
                    }
                }
            },
            "/orders": {
                "get": {
                    "summary": "–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å",
                    "responses": {
                        "200": {
                            "description": "–£—Å–ø—ñ—à–Ω–æ"
                        }
                    }
                }
            }
        }
    }
    
    # –°–∏–º—É–ª—é—î–º–æ multipart form data
    import base64
    swagger_content = json.dumps(swagger_spec)
    encoded_content = base64.b64encode(swagger_content.encode()).decode()
    
    event = {
        "version": "2.0",
        "routeKey": "POST /upload-swagger",
        "rawPath": "/upload-swagger",
        "rawQueryString": "",
        "headers": {
            "accept": "application/json",
            "content-type": "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
            "authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "host": "api.example.com"
        },
        "requestContext": {
            "accountId": "123456789012",
            "apiId": "api-id",
            "domainName": "api.example.com",
            "http": {
                "method": "POST",
                "path": "/upload-swagger",
                "protocol": "HTTP/1.1",
                "sourceIp": "127.0.0.1"
            },
            "requestId": "request-id",
            "routeKey": "POST /upload-swagger",
            "stage": "$default"
        },
        "isBase64Encoded": True,
        "body": encoded_content
    }
    
    print(f"üì§ Event: {json.dumps(event, indent=2)}")
    
    try:
        from lambda_handler import handler
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ Lambda handler
        response = handler(event, {})
        
        print(f"üì• Response: {json.dumps(response, indent=2)}")
        return response
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

def example_error_handling():
    """–ü—Ä–∏–∫–ª–∞–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫."""
    print("\n‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫:")
    
    # Event –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —à–ª—è—Ö–æ–º
    event = {
        "version": "2.0",
        "routeKey": "GET /invalid-endpoint",
        "rawPath": "/invalid-endpoint",
        "rawQueryString": "",
        "headers": {
            "accept": "application/json",
            "content-type": "application/json",
            "host": "api.example.com"
        },
        "requestContext": {
            "accountId": "123456789012",
            "apiId": "api-id",
            "domainName": "api.example.com",
            "http": {
                "method": "GET",
                "path": "/invalid-endpoint",
                "protocol": "HTTP/1.1",
                "sourceIp": "127.0.0.1"
            },
            "requestId": "request-id",
            "routeKey": "GET /invalid-endpoint",
            "stage": "$default"
        },
        "isBase64Encoded": False,
        "body": ""
    }
    
    print(f"üì§ Event: {json.dumps(event, indent=2)}")
    
    try:
        from lambda_handler import handler
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ Lambda handler
        response = handler(event, {})
        
        print(f"üì• Response: {json.dumps(response, indent=2)}")
        return response
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

def run_all_examples():
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —Å–µ—Ä–≤–µ—Ä–ª–µ—Å —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ...")
    print("=" * 60)
    
    examples = [
        ("Health Check", example_health_check),
        ("Chat Request", example_chat_request),
        ("Upload Swagger", example_upload_swagger),
        ("Error Handling", example_error_handling)
    ]
    
    results = []
    
    for name, func in examples:
        print(f"\n{'='*20} {name} {'='*20}")
        try:
            result = func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–∏–∫–ª–∞–¥—ñ {name}: {e}")
            results.append((name, None))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –ü—ñ–¥—Å—É–º–æ–∫ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤:")
    
    success_count = 0
    total_count = len(results)
    
    for example_name, result in results:
        if result and result.get('statusCode') in [200, 201, 404]:
            print(f"‚úÖ {example_name}: –£–°–ü–Ü–®–ù–û")
            success_count += 1
        else:
            print(f"‚ùå {example_name}: –ù–ï–£–°–ü–Ü–®–ù–û")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    
    return results

def show_usage_instructions():
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é."""
    print("üìö –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é:")
    print("=" * 50)
    
    print("\n1Ô∏è‚É£ –õ–æ–∫–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print("   python test_lambda.py --all")
    print("   python test_lambda.py --health")
    print("   python test_lambda.py --chat")
    
    print("\n2Ô∏è‚É£ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞ AWS:")
    print("   make -f Makefile.lambda deploy")
    print("   make -f Makefile.lambda deploy-prod")
    
    print("\n3Ô∏è‚É£ Terraform —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è:")
    print("   cd terraform")
    print("   make quick-deploy ENVIRONMENT=dev")
    
    print("\n4Ô∏è‚É£ Docker —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print("   make -f Makefile.lambda test-docker")
    print("   docker-compose -f docker-compose.lambda.yml up")
    
    print("\n5Ô∏è‚É£ CI/CD:")
    print("   GitHub Actions: .github/workflows/deploy-lambda.yml")
    print("   GitLab CI: .gitlab-ci.yml")
    
    print("\nüìñ –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:")
    print("   README_SERVERLESS.md")
    print("   terraform/README.md")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–ü—Ä–∏–∫–ª–∞–¥–∏ —Å–µ—Ä–≤–µ—Ä–ª–µ—Å —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ AI Swagger Bot")
    parser.add_argument("--all", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏")
    parser.add_argument("--health", action="store_true", help="–ü—Ä–∏–∫–ª–∞–¥ health check")
    parser.add_argument("--chat", action="store_true", help="–ü—Ä–∏–∫–ª–∞–¥ chat –∑–∞–ø–∏—Ç—É")
    parser.add_argument("--upload", action="store_true", help="–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger")
    parser.add_argument("--error", action="store_true", help="–ü—Ä–∏–∫–ª–∞–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫")
    parser.add_argument("--usage", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó")
    
    args = parser.parse_args()
    
    if args.usage:
        show_usage_instructions()
    elif args.health:
        example_health_check()
    elif args.chat:
        example_chat_request()
    elif args.upload:
        example_upload_swagger()
    elif args.error:
        example_error_handling()
    elif args.all:
        run_all_examples()
    else:
        print("üîç –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:")
        print("  --all          - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏")
        print("  --health       - –ü—Ä–∏–∫–ª–∞–¥ health check")
        print("  --chat         - –ü—Ä–∏–∫–ª–∞–¥ chat –∑–∞–ø–∏—Ç—É")
        print("  --upload       - –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger")
        print("  --error        - –ü—Ä–∏–∫–ª–∞–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫")
        print("  --usage        - –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó")
        print("\nüí° –ü—Ä–∏–∫–ª–∞–¥: python examples/serverless_example.py --all") 