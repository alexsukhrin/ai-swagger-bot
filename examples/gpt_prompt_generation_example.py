#!/usr/bin/env python3
"""
–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è GPT –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
"""

import json
import os
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—è
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.gpt_prompt_generator import generate_prompts_with_gpt, generate_smart_suggestions_with_gpt


def main():
    """–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è GPT –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤."""

    print("ü§ñ –ü—Ä–∏–∫–ª–∞–¥ GPT –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
    print("=" * 70)

    # –®–ª—è—Ö –¥–æ Swagger —Ñ–∞–π–ª—É
    swagger_file = "examples/swagger_specs/shop_api.json"

    if not os.path.exists(swagger_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {swagger_file}")
        print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î –∞–±–æ –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö")
        return

    # OpenAI API –∫–ª—é—á (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å OPENAI_API_KEY –¥–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ")
        print("üí° –ë–µ–∑ API –∫–ª—é—á–∞ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏")

    try:
        # –ß–∏—Ç–∞—î–º–æ Swagger —Ñ–∞–π–ª
        with open(swagger_file, "r", encoding="utf-8") as f:
            swagger_data = json.load(f)

        print(f"üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ Swagger —Ñ–∞–π–ª: {swagger_file}")
        print(f"üîç –ê–Ω–∞–ª—ñ–∑—É—é {len(swagger_data.get('paths', {}))} endpoints...")

        # 1. –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–º–ø—Ç–∏ —á–µ—Ä–µ–∑ GPT
        print("\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–º–ø—Ç—ñ–≤ —á–µ—Ä–µ–∑ GPT...")
        generated_prompts = generate_prompts_with_gpt(swagger_data, api_key)

        if generated_prompts:
            print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(generated_prompts)} –ø—Ä–æ–º–ø—Ç—ñ–≤")

            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤
            print("\nüìã –î–µ—Ç–∞–ª—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤:")
            for i, prompt in enumerate(generated_prompts, 1):
                print(f"\n{i}. {prompt.name}")
                print(f"   ID: {prompt.id}")
                print(f"   –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {prompt.category}")
                print(f"   –†–µ—Å—É—Ä—Å: {prompt.resource_type}")
                print(f"   Endpoint: {prompt.http_method} {prompt.endpoint_path}")
                print(f"   –¢–µ–≥–∏: {', '.join(prompt.tags)}")
                print(f"   –û–ø–∏—Å: {prompt.description}")
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏")

        # 2. –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–æ–∑—É–º–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏
        print("\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ–∑—É–º–Ω–∏—Ö –ø—ñ–¥–∫–∞–∑–æ–∫...")
        suggestions = generate_smart_suggestions_with_gpt(swagger_data, api_key)

        if suggestions:
            print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(suggestions)} –ø—ñ–¥–∫–∞–∑–æ–∫")

            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏
            print("\nüìã –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏:")
            for i, suggestion in enumerate(suggestions, 1):
                print(f"\n{i}. {suggestion.get('title', '–ü—ñ–¥–∫–∞–∑–∫–∞')}")
                print(f"   –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {suggestion.get('category', '–Ü–Ω—à—ñ')}")
                print(f"   –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {suggestion.get('difficulty', 'medium')}")
                if suggestion.get("description"):
                    print(f"   –û–ø–∏—Å: {suggestion['description']}")
                if suggestion.get("example_query"):
                    print(f"   –ü—Ä–∏–∫–ª–∞–¥: {suggestion['example_query']}")
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫–∏")

        # 3. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –≤ YAML —Ñ–∞–π–ª
        if generated_prompts:
            output_file = "examples/generated_prompts.yaml"
            print(f"\nüíæ –ó–±–µ—Ä—ñ–≥–∞—é –ø—Ä–æ–º–ø—Ç–∏ –≤ —Ñ–∞–π–ª: {output_file}")

            from src.swagger_prompt_generator import save_generated_prompts_to_yaml

            save_generated_prompts_to_yaml(generated_prompts, output_file)
            print(f"‚úÖ –ü—Ä–æ–º–ø—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {output_file}")

        print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüí° –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:")
        print("  1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—ñ")
        print("  2. –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —ó—Ö —á–µ—Ä–µ–∑ API")
        print("  3. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —ó—Ö –ø—ñ–¥ —Å–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        print("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:")
        print("  - –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω–∏–π —à–ª—è—Ö –¥–æ Swagger —Ñ–∞–π–ª—É")
        print("  - –ß–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π OpenAI API –∫–ª—é—á")
        print("  - –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è")


def demo_cli_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —á–µ—Ä–µ–∑ CLI."""
    print("\nüñ•Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —á–µ—Ä–µ–∑ CLI:")
    print("=" * 50)

    print("\n1. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–º–ø—Ç—ñ–≤ –∑ Swagger —Ñ–∞–π–ª—É:")
    print("   python cli_tester.py generate-prompts --file examples/swagger_specs/shop_api.json")

    print("\n2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥–∫–∞–∑–æ–∫:")
    print(
        "   python cli_tester.py generate-suggestions --file examples/swagger_specs/shop_api.json"
    )

    print("\n3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    print("   python cli_tester.py auto-generate --swagger-spec-id your_spec_id")

    print("\n4. –ó API –∫–ª—é—á–µ–º:")
    print(
        "   python cli_tester.py generate-prompts --file examples/swagger_specs/shop_api.json --api-key your_openai_key"
    )


def demo_streamlit_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Streamlit."""
    print("\nüåê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Streamlit:")
    print("=" * 50)

    print("\n1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å Streamlit —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥:")
    print("   streamlit run streamlit_frontend.py")

    print("\n2. –£ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ:")
    print("   - –°—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    print("   - –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Swagger —Ñ–∞–π–ª")
    print("   - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏ —á–µ—Ä–µ–∑ GPT'")
    print("   - –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏")


if __name__ == "__main__":
    main()
    demo_cli_usage()
    demo_streamlit_usage()
