"""
–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è YAML —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤
"""

import json
import os
import sys

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—è
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.yaml_prompt_manager import PromptCategory, YAMLPromptManager


def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è YAML –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç—ñ–≤."""

    print("üéØ –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è YAML —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤")
    print("=" * 50)

    # 1. –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä
    print("\n1Ô∏è‚É£ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    manager = YAMLPromptManager("prompts/base_prompts.yaml")

    # 2. –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n2Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–ø—Ç—ñ–≤:")
    stats = manager.get_statistics()
    print(f"   üìä –í—Å—å–æ–≥–æ –ø—Ä–æ–º–ø—Ç—ñ–≤: {stats['total_prompts']}")
    print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤: {stats['active_prompts']}")
    print(f"   üåê –ü—É–±–ª—ñ—á–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤: {stats['public_prompts']}")

    print("\n   üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:")
    for category, count in stats["categories"].items():
        print(f"      ‚Ä¢ {category}: {count} –ø—Ä–æ–º–ø—Ç—ñ–≤")

    # 3. –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
    print("\n3Ô∏è‚É£ –ü—Ä–æ–º–ø—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:")

    system_prompts = manager.get_prompts_by_category("system")
    print(f"   üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ ({len(system_prompts)}):")
    for prompt in system_prompts:
        print(f"      ‚Ä¢ {prompt.name} (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {prompt.priority})")

    creation_prompts = manager.get_prompts_by_category("data_creation")
    print(f"   üõ†Ô∏è –ü—Ä–æ–º–ø—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ({len(creation_prompts)}):")
    for prompt in creation_prompts:
        print(f"      ‚Ä¢ {prompt.name} (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {prompt.priority})")

    # 4. –ü–æ—à—É–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤
    print("\n4Ô∏è‚É£ –ü–æ—à—É–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤:")

    search_results = manager.search_prompts("—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    print(f"   üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É '—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è' ({len(search_results)}):")
    for prompt in search_results:
        print(f"      ‚Ä¢ {prompt.name} ({prompt.category})")

    # 5. –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤
    print("\n5Ô∏è‚É£ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤:")

    suggestions = manager.get_prompt_suggestions("–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
    print(f"   üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è '–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é' ({len(suggestions)}):")
    for prompt in suggestions:
        print(f"      ‚Ä¢ {prompt.name} (–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {prompt.category}, –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {prompt.priority})")

    # 6. –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤
    print("\n6Ô∏è‚É£ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤:")

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
    system_prompt = manager.get_prompt("system_base")
    if system_prompt:
        formatted = manager.format_prompt(
            "system_base", user_query="–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", context="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
        )
        print(f"   üìù –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç:")
        print(f"      {formatted[:100]}...")

    # 7. –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É
    print("\n7Ô∏è‚É£ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É:")

    custom_prompt_data = {
        "name": "–ú—ñ–π –∫–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç",
        "description": "–ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π",
        "template": """
–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ API. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç—É—î: {user_query}

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–ü—Ä–∞–≤–∏–ª–∞:
1. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è
3. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–º —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–º

–í—ñ–¥–ø–æ–≤—ñ–¥—å:
""",
        "category": "user_defined",
        "tags": ["custom", "test", "example"],
        "is_active": True,
        "is_public": False,
        "priority": 100,
    }

    prompt_id = manager.add_custom_prompt(custom_prompt_data, user_id="example_user")
    print(f"   ‚úÖ –î–æ–¥–∞–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –∑ ID: {prompt_id}")

    # 8. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É
    print("\n8Ô∏è‚É£ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É:")

    update_data = {
        "name": "–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç",
        "description": "–û–Ω–æ–≤–ª–µ–Ω–∏–π –æ–ø–∏—Å –ø—Ä–æ–º–ø—Ç—É",
        "template": "–û–Ω–æ–≤–ª–µ–Ω–∏–π —à–∞–±–ª–æ–Ω: {user_query}",
        "category": "system",
    }

    success = manager.update_prompt(prompt_id, update_data)
    if success:
        print(f"   ‚úÖ –ü—Ä–æ–º–ø—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        updated_prompt = manager.get_prompt(prompt_id)
        print(f"   üìù –ù–æ–≤–∞ –Ω–∞–∑–≤–∞: {updated_prompt.name}")
        print(f"   üìù –ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {updated_prompt.category}")

    # 9. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É
    print("\n9Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É:")

    formatted_custom = manager.format_prompt(
        prompt_id, user_query="–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", context="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
    )
    print(f"   üìù –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –∫–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç:")
    print(f"      {formatted_custom[:100]}...")

    # 10. –ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç—ñ–≤
    print("\nüîü –ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç—ñ–≤:")

    export_file = "examples/prompts_export_example.yaml"
    manager.export_prompts_to_yaml(export_file, include_custom=True)
    print(f"   üì§ –ü—Ä–æ–º–ø—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤: {export_file}")

    # 11. –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    final_stats = manager.get_statistics()
    print(f"   üìà –í—Å—å–æ–≥–æ –ø—Ä–æ–º–ø—Ç—ñ–≤: {final_stats['total_prompts']}")
    print(f"   üìà –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤: {final_stats['active_prompts']}")

    print("\n   üìÇ –î–∂–µ—Ä–µ–ª–∞ –ø—Ä–æ–º–ø—Ç—ñ–≤:")
    for source, count in final_stats["sources"].items():
        print(f"      ‚Ä¢ {source}: {count} –ø—Ä–æ–º–ø—Ç—ñ–≤")

    # 12. –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É
    print("\nüóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É:")

    delete_success = manager.delete_prompt(prompt_id)
    if delete_success:
        print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç –≤–∏–¥–∞–ª–µ–Ω–æ")

    print("\n‚úÖ –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def demo_search_and_suggestions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π."""

    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π")
    print("=" * 40)

    manager = YAMLPromptManager("prompts/base_prompts.yaml")

    # –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
    test_queries = [
        "–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
        "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏",
        "–û–Ω–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        "–í–∏–¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
        "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ",
    ]

    for query in test_queries:
        print(f"\nüîç –ó–∞–ø–∏—Ç: '{query}'")

        # –ü–æ—à—É–∫
        search_results = manager.search_prompts(query)
        print(f"   üìã –ü–æ—à—É–∫ ({len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤):")
        for prompt in search_results[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
            print(f"      ‚Ä¢ {prompt.name} ({prompt.category})")

        # –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
        suggestions = manager.get_prompt_suggestions(query)
        print(f"   üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó ({len(suggestions)}):")
        for prompt in suggestions[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
            print(f"      ‚Ä¢ {prompt.name} (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {prompt.priority})")


def demo_formatting():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤."""

    print("\nüìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤")
    print("=" * 40)

    manager = YAMLPromptManager("prompts/base_prompts.yaml")

    # –¢–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
    test_scenarios = [
        {
            "prompt_id": "intent_analysis_base",
            "parameters": {
                "user_query": "–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –Ω–∞–∑–≤–æ—é '–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞'",
                "context": "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∞—Ü—é—î –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏",
            },
        },
        {
            "prompt_id": "error_analysis_base",
            "parameters": {
                "error_message": "Validation error: description is required",
                "original_query": "–°—Ç–≤–æ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞",
                "api_request": {
                    "url": "http://localhost:3030/api/categories",
                    "method": "POST",
                    "data": {"name": "–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞"},
                },
            },
        },
        {
            "prompt_id": "api_response_processing_base",
            "parameters": {
                "user_query": "–ü–æ–∫–∞–∂–∏ —Ç—ñ–ª—å–∫–∏ –Ω–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
                "api_response": {
                    "categories": [
                        {"id": 1, "name": "–û–¥—è–≥", "description": "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–¥—è–≥—É"},
                        {"id": 2, "name": "–í–∑—É—Ç—Ç—è", "description": "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∑—É—Ç—Ç—è"},
                        {"id": 3, "name": "–ê–∫—Å–µ—Å—É–∞—Ä–∏", "description": "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤"},
                    ]
                },
                "processing_type": "filtered",
                "available_fields": ["id", "name", "description"],
            },
        },
    ]

    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\nüìù –°—Ü–µ–Ω–∞—Ä—ñ–π {i}: {scenario['prompt_id']}")

        try:
            formatted = manager.format_prompt(scenario["prompt_id"], **scenario["parameters"])
            print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ")
            print(f"   üìÑ –ü–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤:")
            print(f"      {formatted[:200]}...")
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {e}")


def demo_categories():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏."""

    print("\nüìÇ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")
    print("=" * 40)

    manager = YAMLPromptManager("prompts/base_prompts.yaml")

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    stats = manager.get_statistics()

    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:")
    for category, count in stats["categories"].items():
        if count > 0:
            print(f"   ‚Ä¢ {category}: {count} –ø—Ä–æ–º–ø—Ç—ñ–≤")

    print("\nüîç –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:")
    for category in PromptCategory:
        prompts = manager.get_prompts_by_category(category.value)
        if prompts:
            print(f"\n   üìÇ {category.value.upper()}:")
            for prompt in prompts:
                print(f"      ‚Ä¢ {prompt.name} (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {prompt.priority})")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    main()
    demo_search_and_suggestions()
    demo_formatting()
    demo_categories()

    print("\nüéâ –í—Å—ñ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
