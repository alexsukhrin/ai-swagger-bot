#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è Chroma –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
–í–∏–¥–∞–ª—è—î –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—î —á–∏—Å—Ç—É –±–∞–∑—É.
"""

import shutil
from pathlib import Path
import sqlite3
import os
import sys


def clear_chroma_database():
    """–û—á–∏—â—É—î Chroma –±–∞–∑—É –¥–∞–Ω–∏—Ö."""
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è Chroma –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–∏–¥–≤—ñ –º–æ–∂–ª–∏–≤—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    chroma_dirs = [Path("./chroma_db"), Path("./temp_chroma_db")]
    
    for chroma_dir in chroma_dirs:
        if chroma_dir.exists():
            print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {chroma_dir}")
            
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
            try:
                shutil.rmtree(chroma_dir)
                print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {chroma_dir}")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {chroma_dir}: {e}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —ñ–Ω—à—ñ SQLite —Ñ–∞–π–ª–∏
    sqlite_files = list(Path(".").glob("*.sqlite*"))
    for sqlite_file in sqlite_files:
        try:
            os.remove(sqlite_file)
            print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ SQLite —Ñ–∞–π–ª: {sqlite_file}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {sqlite_file}: {e}")
    
    print("‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def verify_clean_state():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –¥—ñ–π—Å–Ω–æ –æ—á–∏—â–µ–Ω–∞."""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è")
    print("=" * 50)
    
    chroma_dirs = [Path("./chroma_db"), Path("./temp_chroma_db")]
    
    for chroma_dir in chroma_dirs:
        if chroma_dir.exists():
            print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –≤—Å–µ —â–µ —ñ—Å–Ω—É—î: {chroma_dir}")
        else:
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞: {chroma_dir}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ SQLite —Ñ–∞–π–ª–∏
    sqlite_files = list(Path(".").glob("*.sqlite*"))
    if sqlite_files:
        print(f"‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ SQLite —Ñ–∞–π–ª–∏: {sqlite_files}")
    else:
        print("‚úÖ SQLite —Ñ–∞–π–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ")


def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è."""
    print("üßπ –û–ß–ò–©–ï–ù–ù–Ø CHROMA –ë–ê–ó–ò –î–ê–ù–ò–•")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ñ–ª–∞–≥ --auto
    auto_mode = "--auto" in sys.argv
    
    if not auto_mode:
        print("‚ö†Ô∏è  –¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Ü –¥–∞–Ω—ñ –∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏!")
        print("‚ö†Ô∏è  –ü—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –ø–µ—Ä–µ—ñ–Ω–¥–µ–∫—Å—É–≤–∞—Ç–∏ Swagger —Ñ–∞–π–ª–∏")
        print("=" * 50)
        
        # –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        response = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ—á–∏—â–µ–Ω–Ω—è? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –û—á–∏—â–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return
    
    clear_chroma_database()
    verify_clean_state()
    
    print("\n‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    if not auto_mode:
        print("üí° –¢–µ–ø–µ—Ä –∑–∞–ø—É—Å—Ç—ñ—Ç—å —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é Swagger —Ñ–∞–π–ª—ñ–≤ –∑–∞–Ω–æ–≤–æ")


if __name__ == "__main__":
    main()
