#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
"""

import os
import sys
import uuid
from datetime import datetime
from pathlib import Path

import yaml

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
sys.path.append(str(Path(__file__).parent.parent))

from api.database import SessionLocal
from api.models import PromptTemplate, User


def load_base_prompts_from_yaml():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑ YAML —Ñ–∞–π–ª—É"""
    yaml_path = Path("prompts/base_prompts.yaml")

    if not yaml_path.exists():
        print("‚ùå –§–∞–π–ª prompts/base_prompts.yaml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return []

    with open(yaml_path, "r", encoding="utf-8") as file:
        yaml_data = yaml.safe_load(file)

    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø—Ä–æ–º–ø—Ç–∏ –∑ —Å–µ–∫—Ü—ñ—ó prompts
    prompts_data = yaml_data.get("prompts", {})
    base_prompts = []

    for prompt_id, prompt_data in prompts_data.items():
        prompt = {
            "name": prompt_data.get("name", ""),
            "description": prompt_data.get("description", ""),
            "template": prompt_data.get("template", ""),
            "category": prompt_data.get("category", "general"),
            "is_public": True,
            "is_active": True,
            "usage_count": 0,
            "success_rate": 0,
        }
        base_prompts.append(prompt)

    return base_prompts


def load_prompts_for_user(user_id: str, db: SessionLocal):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∂–µ –ø—Ä–æ–º–ø—Ç–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        existing_prompts = (
            db.query(PromptTemplate).filter(PromptTemplate.user_id == user_id).count()
        )
        if existing_prompts > 0:
            print(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –º–∞—î {existing_prompts} –ø—Ä–æ–º–ø—Ç—ñ–≤")
            return False

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏
        base_prompts = load_base_prompts_from_yaml()

        if not base_prompts:
            print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            return False

        print(f"üìã –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é {len(base_prompts)} –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

        for i, prompt_data in enumerate(base_prompts):
            print(f"üìù –°—Ç–≤–æ—Ä—é—é –ø—Ä–æ–º–ø—Ç {i+1}/{len(base_prompts)}: {prompt_data['name']}")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_prompt = PromptTemplate(
                id=str(uuid.uuid4()),
                user_id=user_id,
                name=prompt_data["name"],
                description=prompt_data["description"],
                template=prompt_data["template"],
                category=prompt_data["category"],
                is_public=False,  # –ü—Ä–æ–º–ø—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –ø—É–±–ª—ñ—á–Ω—ñ
                is_active=True,
                usage_count=0,
                success_rate=0,
                created_at=datetime.now(),
                updated_at=datetime.now(),
            )
            db.add(user_prompt)

        db.commit()
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(base_prompts)} –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        db.rollback()
        return False


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üîß –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")

    db = SessionLocal()

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        users = db.query(User).all()

        if not users:
            print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        print(f"üë• –ó–Ω–∞–π–¥–µ–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

        success_count = 0
        skip_count = 0

        for user in users:
            print(f"\nüë§ –û–±—Ä–æ–±–ª—è—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.username} ({user.email})")

            if load_prompts_for_user(user.id, db):
                success_count += 1
            else:
                skip_count += 1

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {success_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skip_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    finally:
        db.close()


if __name__ == "__main__":
    main()
