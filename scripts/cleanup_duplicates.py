#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ embeddings –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.
"""

import os
import sys

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—è
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.postgres_vector_manager import PostgresVectorManager


def cleanup_duplicates():
    """–û—á–∏—â–∞—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ embeddings."""
    print("üßπ –ü–æ—á–∞—Ç–æ–∫ –æ—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ embeddings...")

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –≤–µ–∫—Ç–æ—Ä—ñ–≤
        vector_manager = PostgresVectorManager()

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—â–µ–Ω–Ω—è
        stats_before = vector_manager.get_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –æ—á–∏—â–µ–Ω–Ω—è:")
        print(f"   ‚Ä¢ –í—Å—å–æ–≥–æ embeddings: {stats_before.get('total_embeddings', 0)}")
        print(f"   ‚Ä¢ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö endpoints: {stats_before.get('unique_endpoints', 0)}")

        # –û—á–∏—â–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        deleted_count = vector_manager.cleanup_duplicates()

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
        stats_after = vector_manager.get_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è:")
        print(f"   ‚Ä¢ –í—Å—å–æ–≥–æ embeddings: {stats_after.get('total_embeddings', 0)}")
        print(f"   ‚Ä¢ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö endpoints: {stats_after.get('unique_endpoints', 0)}")

        if deleted_count > 0:
            print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
        else:
            print("‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    success = cleanup_duplicates()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
