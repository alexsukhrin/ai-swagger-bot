#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ Chroma –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
–ü–æ–∫–∞–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Ä–æ–∑–º—ñ—Ä–∏ —Ç–∞ –≤–º—ñ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏.
"""

import json
import sqlite3
from datetime import datetime
from pathlib import Path


def analyze_chroma_database():
    """–ê–Ω–∞–ª—ñ–∑—É—î Chroma –±–∞–∑—É –¥–∞–Ω–∏—Ö."""
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ Chroma –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
    print("=" * 60)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–∏–¥–≤—ñ –º–æ–∂–ª–∏–≤—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    chroma_dirs = [Path("./chroma_db"), Path("./temp_chroma_db")]
    sqlite_file = None
    chroma_dir = None

    for dir_path in chroma_dirs:
        if dir_path.exists():
            sqlite_file = dir_path / "chroma.sqlite3"
            if sqlite_file.exists():
                chroma_dir = dir_path
                break

    if not sqlite_file or not sqlite_file.exists():
        print("‚ùå SQLite —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ ./chroma_db –∞–±–æ ./temp_chroma_db")
        return

    if not sqlite_file.exists():
        print("‚ùå SQLite —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    try:
        conn = sqlite3.connect(sqlite_file)
        cursor = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        print(f"üìã –¢–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ: {[table[0] for table in tables]}")

        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–Ω—É —Ç–∞–±–ª–∏—Ü—é
        for table in tables:
            table_name = table[0]
            print(f"\nüìä –¢–∞–±–ª–∏—Ü—è: {table_name}")

            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            row_count = cursor.fetchone()[0]
            print(f"   –†—è–¥–∫—ñ–≤: {row_count}")

            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()
            print(f"   –ö–æ–ª–æ–Ω–∫–∏:")
            for col in columns:
                print(f"     ‚Ä¢ {col[1]} ({col[2]})")

            # –ü—Ä–∏–∫–ª–∞–¥–∏ –¥–∞–Ω–∏—Ö
            if row_count > 0:
                cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
                rows = cursor.fetchall()
                print(f"   –ü—Ä–∏–∫–ª–∞–¥–∏ –¥–∞–Ω–∏—Ö:")
                for i, row in enumerate(rows):
                    print(f"     {i+1}. {str(row)[:100]}...")

        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ embeddings —Ç–∞–±–ª–∏—Ü—ñ
        if "embeddings" in [t[0] for t in tables]:
            print(f"\nüéØ –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ embeddings:")

            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
            cursor.execute("SELECT COUNT(*) FROM embeddings")
            doc_count = cursor.fetchone()[0]
            print(f"   üìÑ –í—Å—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {doc_count}")

            # –†–æ–∑–º—ñ—Ä embeddings (—è–∫—â–æ –∫–æ–ª–æ–Ω–∫–∞ —ñ—Å–Ω—É—î)
            try:
                cursor.execute("SELECT LENGTH(embedding) FROM embeddings LIMIT 1")
                embedding_size = cursor.fetchone()
                if embedding_size:
                    print(f"   üìè –†–æ–∑–º—ñ—Ä –æ–¥–Ω–æ–≥–æ embedding: {embedding_size[0]} –±–∞–π—Ç")
            except sqlite3.OperationalError:
                print("   üìè –†–æ–∑–º—ñ—Ä embedding: –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–ª–æ–Ω–∫–∞ metadata
            cursor.execute("PRAGMA table_info(embeddings)")
            columns_info = cursor.fetchall()
            column_names = [col[1] for col in columns_info]

            if "metadata" in column_names:
                # –ü—Ä–∏–∫–ª–∞–¥–∏ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
                try:
                    cursor.execute("SELECT metadata FROM embeddings LIMIT 5")
                    metadatas = cursor.fetchall()
                    print(f"   üìã –ü—Ä–∏–∫–ª–∞–¥–∏ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö:")
                    for i, metadata in enumerate(metadatas):
                        if metadata[0]:
                            try:
                                meta_dict = json.loads(metadata[0])
                                method = meta_dict.get("method", "N/A")
                                path = meta_dict.get("path", "N/A")
                                print(f"     {i+1}. {method} {path}")
                            except:
                                print(f"     {i+1}. {metadata[0][:50]}...")
                        else:
                            print(f"     {i+1}. <–ø—É—Å—Ç–æ>")
                except Exception as e:
                    print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö: {e}")
            else:
                print("   üìã –ö–æ–ª–æ–Ω–∫–∞ metadata –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ embeddings")

        conn.close()

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")


def analyze_binary_files():
    """–ê–Ω–∞–ª—ñ–∑—É—î –±—ñ–Ω–∞—Ä–Ω—ñ —Ñ–∞–π–ª–∏ Chroma."""
    print(f"\nüîç –ê–Ω–∞–ª—ñ–∑ –±—ñ–Ω–∞—Ä–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤")
    print("=" * 60)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–∏–¥–≤—ñ –º–æ–∂–ª–∏–≤—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    chroma_dirs = [Path("./chroma_db"), Path("./temp_chroma_db")]
    chroma_dir = None

    for dir_path in chroma_dirs:
        if dir_path.exists():
            chroma_dir = dir_path
            break

    if not chroma_dir:
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è Chroma –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return

    for item in chroma_dir.iterdir():
        if item.is_dir():
            print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {item.name}")

            total_size = 0
            for subitem in item.iterdir():
                if subitem.is_file():
                    size_bytes = subitem.stat().st_size
                    size_kb = size_bytes / 1024
                    size_mb = size_kb / 1024
                    total_size += size_bytes

                    print(f"   üìÑ {subitem.name}: {size_kb:.1f} KB ({size_mb:.2f} MB)")

            total_kb = total_size / 1024
            total_mb = total_kb / 1024
            print(f"   üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {total_kb:.1f} KB ({total_mb:.2f} MB)")


def check_memory_usage():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ."""
    print(f"\nüß† –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ")
    print("=" * 60)

    try:
        import psutil

        process = psutil.Process()
        memory_info = process.memory_info()

        print(f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –ø–æ—Ç–æ—á–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º:")
        print(f"   RSS (—Ñ—ñ–∑–∏—á–Ω–∞ –ø–∞–º'—è—Ç—å): {memory_info.rss / 1024 / 1024:.1f} MB")
        print(f"   VMS (–≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∞ –ø–∞–º'—è—Ç—å): {memory_info.vms / 1024 / 1024:.1f} MB")

    except ImportError:
        print("‚ö†Ô∏è psutil –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install psutil")


def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É."""
    print("üîç –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó CHROMA –ë–ê–ó–ò –î–ê–ù–ò–•")
    print("=" * 60)
    print(f"‚è∞ –ß–∞—Å –∞–Ω–∞–ª—ñ–∑—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    analyze_chroma_database()
    analyze_binary_files()
    check_memory_usage()

    print(f"\n‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
