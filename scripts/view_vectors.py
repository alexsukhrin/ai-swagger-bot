#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤–µ–∫—Ç–æ—Ä—ñ–≤ –≤ ChromaDB.
"""

import os
import sys
import json
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ src —Ç–∞ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.config import Config
from rag_engine import RAGEngine

def view_chromadb_vectors():
    """–ü–µ—Ä–µ–≥–ª—è–¥–∞—î –≤–µ–∫—Ç–æ—Ä–∏ –≤ ChromaDB."""
    print("üîç –ü–µ—Ä–µ–≥–ª—è–¥ –≤–µ–∫—Ç–æ—Ä—ñ–≤ –≤ ChromaDB")
    print("=" * 60)
    
    try:
        # –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        if not Config.validate():
            return False
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ RAG Engine
        print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –±–∞–∑–∏: {Config.CHROMA_DB_PATH}")
        
        if not os.path.exists(Config.CHROMA_DB_PATH):
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å reindex_swagger.py")
            return False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ RAG Engine –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞–∑–∏
        rag_config = Config.get_rag_config()
        rag_engine = RAGEngine(Config.SWAGGER_SPEC_PATH, config=rag_config)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ endpoints
        print("\nüìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤–µ–∫—Ç–æ—Ä—ñ–≤...")
        all_endpoints = rag_engine.get_all_endpoints()
        
        if not all_endpoints:
            print("‚ùå –í–µ–∫—Ç–æ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_endpoints)} –≤–µ–∫—Ç–æ—Ä—ñ–≤\n")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä
        for i, endpoint in enumerate(all_endpoints, 1):
            print(f"üîó –í–µ–∫—Ç–æ—Ä {i}:")
            print("-" * 40)
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç
            content = endpoint.get('content', '')
            print(f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:200]}...")
            
            # –ú–µ—Ç–∞–¥–∞–Ω—ñ
            metadata = endpoint.get('metadata', {})
            print(f"üè∑Ô∏è  –ú–µ—Ç–∞–¥–∞–Ω—ñ:")
            for key, value in metadata.items():
                print(f"   {key}: {value}")
            
            print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def search_vectors(query: str, k: int = 5):
    """–®—É–∫–∞—î –≤–µ–∫—Ç–æ—Ä–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º."""
    print(f"üîç –ü–æ—à—É–∫ –≤–µ–∫—Ç–æ—Ä—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Ç—É: '{query}'")
    print("=" * 60)
    
    try:
        # –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        if not Config.validate():
            return False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ RAG Engine
        rag_config = Config.get_rag_config()
        rag_engine = RAGEngine(Config.SWAGGER_SPEC_PATH, config=rag_config)
        
        # –®—É–∫–∞—î–º–æ –ø–æ–¥—ñ–±–Ω—ñ –≤–µ–∫—Ç–æ—Ä–∏
        results = rag_engine.search_similar_endpoints(query, k=k)
        
        if not results:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤\n")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        for i, result in enumerate(results, 1):
            print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç {i}:")
            print("-" * 40)
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç
            content = result.get('content', '')
            print(f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:200]}...")
            
            # –ú–µ—Ç–∞–¥–∞–Ω—ñ
            metadata = result.get('metadata', {})
            print(f"üè∑Ô∏è  –ú–µ—Ç–∞–¥–∞–Ω—ñ:")
            for key, value in metadata.items():
                print(f"   {key}: {value}")
            
            print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def analyze_vector_statistics():
    """–ê–Ω–∞–ª—ñ–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ–∫—Ç–æ—Ä—ñ–≤."""
    print("üìä –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–∫—Ç–æ—Ä—ñ–≤")
    print("=" * 60)
    
    try:
        # –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        if not Config.validate():
            return False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ RAG Engine
        rag_config = Config.get_rag_config()
        rag_engine = RAGEngine(Config.SWAGGER_SPEC_PATH, config=rag_config)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ endpoints
        all_endpoints = rag_engine.get_all_endpoints()
        
        if not all_endpoints:
            print("‚ùå –í–µ–∫—Ç–æ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
        methods = {}
        paths = {}
        tags = {}
        
        for endpoint in all_endpoints:
            metadata = endpoint.get('metadata', {})
            
            # –ú–µ—Ç–æ–¥–∏
            method = metadata.get('method', 'UNKNOWN')
            methods[method] = methods.get(method, 0) + 1
            
            # –®–ª—è—Ö–∏
            path = metadata.get('path', 'UNKNOWN')
            paths[path] = paths.get(path, 0) + 1
            
            # –¢–µ–≥–∏
            tag = metadata.get('tags', 'UNKNOWN')
            tags[tag] = tags.get(tag, 0) + 1
        
        print(f"üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å—å–æ–≥–æ –≤–µ–∫—Ç–æ—Ä—ñ–≤: {len(all_endpoints)}")
        print(f"   –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤: {len(methods)}")
        print(f"   –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤: {len(paths)}")
        print(f"   –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–µ–≥—ñ–≤: {len(tags)}")
        
        print(f"\nüîß –ú–µ—Ç–æ–¥–∏:")
        for method, count in methods.items():
            print(f"   {method}: {count}")
        
        print(f"\nüõ£Ô∏è  –®–ª—è—Ö–∏:")
        for path, count in paths.items():
            print(f"   {path}: {count}")
        
        print(f"\nüè∑Ô∏è  –¢–µ–≥–∏:")
        for tag, count in tags.items():
            print(f"   {tag}: {count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    print("üîç –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤–µ–∫—Ç–æ—Ä—ñ–≤ –≤ ChromaDB")
    print("=" * 60)
    
    while True:
        print("\nüìã –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:")
        print("1. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –≤–µ–∫—Ç–æ—Ä–∏")
        print("2. –ü–æ—à—É–∫ –≤–µ–∫—Ç–æ—Ä—ñ–≤")
        print("3. –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print("4. –í–∏—Ö—ñ–¥")
        
        choice = input("\nüéØ –í–∞—à –≤–∏–±—ñ—Ä (1-4): ").strip()
        
        if choice == "1":
            view_chromadb_vectors()
        elif choice == "2":
            query = input("üîç –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É: ").strip()
            if query:
                search_vectors(query)
            else:
                print("‚ùå –ó–∞–ø–∏—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
        elif choice == "3":
            analyze_vector_statistics()
        elif choice == "4":
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

if __name__ == "__main__":
    main()
