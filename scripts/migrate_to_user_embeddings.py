#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–æ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î –∑ –ø—Ä–∏–≤'—è–∑–∫–æ—é embeddings –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
"""

import json
import os
import sys
import uuid
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—è
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from api.database import engine, get_db
from api.models import ApiEmbedding, Base, SwaggerSpec, User
from sqlalchemy import text


def create_new_tables():
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é."""
    print("üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å...")

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ —á–µ—Ä–µ–∑ SQLAlchemy
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")
        return False

    return True


def migrate_existing_embeddings():
    """–ú—ñ–≥—Ä—É—î —ñ—Å–Ω—É—é—á—ñ embeddings –¥–æ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏."""
    print("üîÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è —ñ—Å–Ω—É—é—á–∏—Ö embeddings...")

    try:
        with engine.connect() as conn:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Å—Ç–∞—Ä–∞ —Ç–∞–±–ª–∏—Ü—è
            result = conn.execute(
                text(
                    """
                SELECT EXISTS (
                    SELECT FROM information_schema.tables
                    WHERE table_name = 'api_embeddings_old'
                )
            """
                )
            )

            if result.fetchone()[0]:
                print("üìã –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—É —Ç–∞–±–ª–∏—Ü—é api_embeddings_old")

                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å—Ç–∞—Ä–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
                result = conn.execute(
                    text(
                        """
                    SELECT id, endpoint_path, method, description, embedding, metadata, created_at
                    FROM api_embeddings_old
                """
                    )
                )

                old_embeddings = result.fetchall()
                print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(old_embeddings)} —Å—Ç–∞—Ä–∏—Ö embeddings")

                # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
                system_user_id = "system"
                conn.execute(
                    text(
                        """
                    INSERT INTO users (id, email, username, hashed_password, is_active, created_at, updated_at)
                    VALUES (:id, 'system@ai-swagger-bot.com', 'system', 'system_hash', true, :created_at, :updated_at)
                    ON CONFLICT (id) DO NOTHING
                """
                    ),
                    {
                        "id": system_user_id,
                        "created_at": datetime.now().isoformat(),
                        "updated_at": datetime.now().isoformat(),
                    },
                )

                # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
                system_swagger_id = "system-swagger"
                conn.execute(
                    text(
                        """
                    INSERT INTO swagger_specs (id, user_id, filename, original_data, parsed_data, endpoints_count, is_active, created_at, updated_at)
                    VALUES (:id, :user_id, 'system-swagger.json', '{}', '{}', 0, true, :created_at, :updated_at)
                    ON CONFLICT (id) DO NOTHING
                """
                    ),
                    {
                        "id": system_swagger_id,
                        "user_id": system_user_id,
                        "created_at": datetime.now().isoformat(),
                        "updated_at": datetime.now().isoformat(),
                    },
                )

                # –ú—ñ–≥—Ä—É—î–º–æ embeddings
                migrated_count = 0
                for row in old_embeddings:
                    try:
                        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ embedding –≤ JSON string —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                        embedding_data = row[4]
                        if isinstance(embedding_data, list):
                            embedding_json = json.dumps(embedding_data)
                        else:
                            embedding_json = embedding_data

                        # –î–æ–¥–∞—î–º–æ –≤ –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
                        conn.execute(
                            text(
                                """
                            INSERT INTO api_embeddings
                            (id, user_id, swagger_spec_id, endpoint_path, method, description, embedding, metadata, created_at)
                            VALUES (:id, :user_id, :swagger_spec_id, :endpoint_path, :method, :description, :embedding, :metadata, :created_at)
                        """
                            ),
                            {
                                "id": str(uuid.uuid4()),
                                "user_id": system_user_id,
                                "swagger_spec_id": system_swagger_id,
                                "endpoint_path": row[1],
                                "method": row[2],
                                "description": row[3],
                                "embedding": embedding_json,
                                "embedding_metadata": json.dumps(row[5]) if row[5] else None,
                                "created_at": (
                                    row[6].isoformat() if row[6] else datetime.now().isoformat()
                                ),
                            },
                        )

                        migrated_count += 1

                    except Exception as e:
                        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó embedding {row[0]}: {e}")
                        continue

                conn.commit()
                print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –º—ñ–≥—Ä–æ–≤–∞–Ω–æ {migrated_count}/{len(old_embeddings)} embeddings")

                # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É —Ç–∞–±–ª–∏—Ü—é
                conn.execute(text("DROP TABLE IF EXISTS api_embeddings_old"))
                conn.commit()
                print("üóëÔ∏è –°—Ç–∞—Ä–∞ —Ç–∞–±–ª–∏—Ü—è –≤–∏–¥–∞–ª–µ–Ω–∞")

            else:
                print("‚ÑπÔ∏è –°—Ç–∞—Ä–∞ —Ç–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
        return False

    return True


def backup_old_table():
    """–°—Ç–≤–æ—Ä—é—î —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —Å—Ç–∞—Ä–æ—ó —Ç–∞–±–ª–∏—Ü—ñ."""
    print("üíæ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó...")

    try:
        with engine.connect() as conn:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è api_embeddings
            result = conn.execute(
                text(
                    """
                SELECT EXISTS (
                    SELECT FROM information_schema.tables
                    WHERE table_name = 'api_embeddings'
                )
            """
                )
            )

            if result.fetchone()[0]:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –Ω–æ–≤—ñ –ø–æ–ª—è
                result = conn.execute(
                    text(
                        """
                    SELECT column_name
                    FROM information_schema.columns
                    WHERE table_name = 'api_embeddings' AND column_name = 'user_id'
                """
                    )
                )

                if not result.fetchone():
                    print("üìã –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—É —Ç–∞–±–ª–∏—Ü—é api_embeddings –±–µ–∑ user_id")

                    # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—É —Ç–∞–±–ª–∏—Ü—é
                    conn.execute(text("ALTER TABLE api_embeddings RENAME TO api_embeddings_old"))
                    conn.commit()
                    print("‚úÖ –°—Ç–∞—Ä–∞ —Ç–∞–±–ª–∏—Ü—è –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ api_embeddings_old")
                else:
                    print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—è –≤–∂–µ –º–∞—î –Ω–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            else:
                print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—è api_embeddings –Ω–µ —ñ—Å–Ω—É—î")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó: {e}")
        return False

    return True


def verify_migration():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –º—ñ–≥—Ä–∞—Ü—ñ—ó."""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó...")

    try:
        with engine.connect() as conn:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
            result = conn.execute(text("SELECT COUNT(*) FROM api_embeddings"))
            embeddings_count = result.fetchone()[0]

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            result = conn.execute(text("SELECT COUNT(*) FROM users"))
            users_count = result.fetchone()[0]

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            result = conn.execute(text("SELECT COUNT(*) FROM swagger_specs"))
            swagger_count = result.fetchone()[0]

            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó:")
            print(f"   ‚Ä¢ Embeddings: {embeddings_count}")
            print(f"   ‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {users_count}")
            print(f"   ‚Ä¢ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {swagger_count}")

            if embeddings_count > 0 and users_count > 0:
                print("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!")
                return True
            else:
                print("‚ö†Ô∏è –ú—ñ–≥—Ä–∞—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–ø–æ–≤–Ω–æ—é")
                return False

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º—ñ–≥—Ä–∞—Ü—ñ—ó."""
    print("üöÄ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–æ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î...")

    try:
        # –ö—Ä–æ–∫ 1: –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
        if not backup_old_table():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó")
            return False

        # –ö—Ä–æ–∫ 2: –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ
        if not create_new_tables():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å")
            return False

        # –ö—Ä–æ–∫ 3: –ú—ñ–≥—Ä—É—î–º–æ –¥–∞–Ω—ñ
        if not migrate_existing_embeddings():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö")
            return False

        # –ö—Ä–æ–∫ 4: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not verify_migration():
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó")
            return False

        print("üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
