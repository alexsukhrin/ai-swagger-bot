#!/usr/bin/env python3
"""
Quick Start —Å–∫—Ä–∏–ø—Ç –¥–ª—è AI Swagger Bot.
–î–µ–º–æ–Ω—Å—Ç—Ä—É—î –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞.
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ src —Ç–∞ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))

def check_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞."""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Python –≤–µ—Ä—Å—ñ—é
    if sys.version_info < (3, 8):
        print("‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω Python 3.8 –∞–±–æ –Ω–æ–≤—ñ—à–µ")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ OpenAI API –∫–ª—é—á
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ OPENAI_API_KEY")
        print("üí° –î–æ–¥–∞–π—Ç–µ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª –∞–±–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        return False
    print("‚úÖ OpenAI API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Swagger —Ñ–∞–π–ª
    swagger_file = "examples/swagger_specs/shop_api.json"
    if not os.path.exists(swagger_file):
        print(f"‚ùå Swagger —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {swagger_file}")
        return False
    print(f"‚úÖ Swagger —Ñ–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ: {swagger_file}")
    
    return True


def demo_simple_agent():
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î –ø—Ä–æ—Å—Ç–∏–π –∞–≥–µ–Ω—Ç."""
    print("\nü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–±–µ–∑ LangChain)")
    print("=" * 60)
    
    try:
        from interactive_api_agent import InteractiveSwaggerAgent as SimpleSwaggerAgent
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–≥–µ–Ω—Ç–∞
        agent = SimpleSwaggerAgent(
            "examples/swagger_specs/shop_api.json",
            enable_api_calls=False
        )
        
        # –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
        test_queries = [
            "–î–æ–¥–∞–π —Ç–æ–≤–∞—Ä: —Å–∏–Ω—è —Å—É–∫–Ω—è, —Ä–æ–∑–º—ñ—Ä 22, –∫—ñ–ª—å–∫—ñ—Å—Ç—å 10",
            "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏",
            "–û—Ç—Ä–∏–º–∞–π —Ç–æ–≤–∞—Ä –∑ ID 123"
        ]
        
        for i, query in enumerate(test_queries, 1):
            print(f"\nüìù –¢–µ—Å—Ç {i}: {query}")
            print("-" * 40)
            
            try:
                response = agent.process_interactive_query(query)
                print(f"ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response['response']}")
                print(f"üìä –°—Ç–∞—Ç—É—Å: {response['status']}")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≥–µ–Ω—Ç–∞
        if hasattr(agent, 'get_agent_info'):
            info = agent.get_agent_info()
            print(f"\nüìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≥–µ–Ω—Ç–∞:")
            print(f"   –ë–∞–∑–æ–≤–∏–π URL: {info.get('base_url')}")
            print(f"   Endpoints: {info.get('endpoints_count')}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")


def demo_api_agent():
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î API –∞–≥–µ–Ω—Ç."""
    print("\nü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è API –∞–≥–µ–Ω—Ç–∞ (–∑ LangChain)")
    print("=" * 60)
    
    try:
        from interactive_api_agent import InteractiveSwaggerAgent as SwaggerAgent
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–≥–µ–Ω—Ç–∞
        agent = SwaggerAgent(
            "examples/swagger_specs/shop_api.json",
            enable_api_calls=False
        )
        
        # –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
        test_queries = [
            "–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä - —á–µ—Ä–≤–æ–Ω–∞ —Å—É–∫–Ω—è, —Ä–æ–∑–º—ñ—Ä 44, 5 —à—Ç—É–∫",
            "–û–Ω–æ–≤–∏ —Ç–æ–≤–∞—Ä 456 - –∑–º—ñ–Ω–∏ —Ü—ñ–Ω—É –Ω–∞ 2000 –≥—Ä–Ω",
            "–í–∏–¥–∞–ª–∏ —Ç–æ–≤–∞—Ä 789"
        ]
        
        for i, query in enumerate(test_queries, 1):
            print(f"\nüìù –¢–µ—Å—Ç {i}: {query}")
            print("-" * 40)
            
            try:
                response = agent.process_interactive_query(query)
                print(f"ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response['response']}")
                print(f"üìä –°—Ç–∞—Ç—É—Å: {response['status']}")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó API –∞–≥–µ–Ω—Ç–∞: {e}")


def demo_endpoints():
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î –ø–µ—Ä–µ–≥–ª—è–¥ endpoints."""
    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É endpoints")
    print("=" * 60)
    
    try:
        from interactive_api_agent import InteractiveSwaggerAgent as SwaggerAgent
        
        agent = SwaggerAgent("examples/swagger_specs/shop_api.json")
        endpoints = agent.get_available_endpoints()
        
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(endpoints)} endpoints:\n")
        
        for i, endpoint in enumerate(endpoints[:5], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
            metadata = endpoint['metadata']
            method = metadata.get('method', 'GET')
            path = metadata.get('path', '')
            summary = metadata.get('summary', '–ë–µ–∑ –æ–ø–∏—Å—É')
            
            # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –º–µ—Ç–æ–¥—ñ–≤
            method_colors = {
                'GET': 'üü¢',
                'POST': 'üîµ',
                'PUT': 'üü°',
                'DELETE': 'üî¥',
                'PATCH': 'üü†'
            }
            
            method_icon = method_colors.get(method, '‚ö™')
            print(f"{i}. {method_icon} {method:6} {path}")
            print(f"   {summary}")
            print()
        
        if len(endpoints) > 5:
            print(f"... —Ç–∞ —â–µ {len(endpoints) - 5} endpoints")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó endpoints: {e}")


def show_usage_examples():
    """–ü–æ–∫–∞–∑—É—î –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è."""
    print("\nüìö –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    print("=" * 60)
    
    examples = {
        "CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å": [
            "python cli.py --swagger examples/swagger_specs/shop_api.json",
            "python cli.py --swagger examples/swagger_specs/shop_api.json --query '–î–æ–¥–∞–π —Ç–æ–≤–∞—Ä: —Ç–µ—Å—Ç'",
            "python cli.py --swagger examples/swagger_specs/shop_api.json --list-endpoints"
        ],
        "Streamlit —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å": [
            "streamlit run enhanced_chat_app.py"
        ],
        "Python –∫–æ–¥": [
            "from src.interactive_api_agent import InteractiveSwaggerAgent",
            "agent = InteractiveSwaggerAgent('examples/swagger_specs/shop_api.json')",
            "response = agent.process_interactive_query('–î–æ–¥–∞–π —Ç–æ–≤–∞—Ä: —Ç–µ—Å—Ç')"
        ],
        "Make –∫–æ–º–∞–Ω–¥–∏": [
            "make install    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è",
            "make test      # –¢–µ—Å—Ç–∏",
            "make run       # –ó–∞–ø—É—Å–∫ Streamlit",
            "make clean     # –û—á–∏—â–µ–Ω–Ω—è"
        ]
    }
    
    for category, commands in examples.items():
        print(f"\n{category}:")
        for command in commands:
            print(f"  {command}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó."""
    print("üöÄ AI Swagger Bot - Quick Start")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    if not check_environment():
        print("\n‚ùå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞")
        print("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
        return
    
    print("\n‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–±–æ—Ç–∏!")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    demo_simple_agent()
    demo_api_agent()
    demo_endpoints()
    show_usage_examples()
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –î–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ:")
    print("1. –î–æ–¥–∞–π—Ç–µ –≤–∞—à—ñ Swagger —Ñ–∞–π–ª–∏ –≤ examples/swagger_specs/")
    print("2. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ API –≤–∏–∫–ª–∏–∫–∏ –≤ .env —Ñ–∞–π–ª—ñ")
    print("3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ CLI –∞–±–æ Streamlit —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("\nüìö –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: README.md")


if __name__ == "__main__":
    main()
