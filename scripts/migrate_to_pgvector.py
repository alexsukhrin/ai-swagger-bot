#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –∑ ChromaDB –Ω–∞ pgvector
"""

import logging
import os
import sys
from typing import Any, Dict, List

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ–µ–∫—Ç—É –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π DATABASE_URL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
os.environ["DATABASE_URL"] = "postgresql://postgres:postgres@127.0.0.1:5432/ai_swagger_bot"

from src.config import Config
from src.postgres_vector_manager import PostgresVectorManager
from src.rag_engine import RAGEngine

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def migrate_chromadb_to_pgvector():
    """–ú—ñ–≥—Ä—É—î –¥–∞–Ω—ñ –∑ ChromaDB –≤ pgvector."""
    print("üîÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑ ChromaDB –Ω–∞ pgvector...")

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ PostgreSQL –º–µ–Ω–µ–¥–∂–µ—Ä
        pg_manager = PostgresVectorManager()

        # –°—Ç–≤–æ—Ä—é—î–º–æ ChromaDB RAG Engine –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        chroma_rag = RAGEngine(
            swagger_spec_path=Config.SWAGGER_SPEC_PATH, persist_directory=Config.CHROMA_DB_PATH
        )

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑ ChromaDB
        print("üìñ –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ ChromaDB...")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π RAG Engine –∑ ChromaDB –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
        from src.rag_engine import RAGEngine as ChromaRAGEngine

        # –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–º–∏–∫–∞—î–º–æ pgvector
        original_use_pgvector = Config.USE_PGVECTOR
        Config.USE_PGVECTOR = False

        chroma_engine = ChromaRAGEngine(
            swagger_spec_path=Config.SWAGGER_SPEC_PATH, persist_directory=Config.CHROMA_DB_PATH
        )

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ endpoints
        all_endpoints = chroma_engine.vectorstore.get()

        if not all_endpoints["ids"]:
            print("‚ö†Ô∏è ChromaDB –ø–æ—Ä–æ–∂–Ω—è, –Ω–µ–º–∞—î —â–æ –º—ñ–≥—Ä—É–≤–∞—Ç–∏")
            return True

        print(f"üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_endpoints['ids'])} –≤–µ–∫—Ç–æ—Ä—ñ–≤ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó")

        # –ú—ñ–≥—Ä—É—î–º–æ –∫–æ–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä
        migrated_count = 0
        for i, doc_id in enumerate(all_endpoints["ids"]):
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
                embedding = all_endpoints["embeddings"][i]
                metadata = all_endpoints["metadatas"][i]
                document = all_endpoints["documents"][i]

                # –ü–∞—Ä—Å–∏–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
                method = metadata.get("method", "GET")
                path = metadata.get("path", "")
                description = metadata.get("description", document)

                # –î–æ–¥–∞—î–º–æ –≤ PostgreSQL
                pg_manager.add_embedding(
                    endpoint_path=path,
                    method=method,
                    description=description,
                    embedding=embedding,
                    metadata=metadata,
                )

                migrated_count += 1
                if migrated_count % 10 == 0:
                    print(f"‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ {migrated_count}/{len(all_endpoints['ids'])} –≤–µ–∫—Ç–æ—Ä—ñ–≤")

            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –≤–µ–∫—Ç–æ—Ä–∞ {i}: {e}")
                continue

        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        Config.USE_PGVECTOR = original_use_pgvector

        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –º—ñ–≥—Ä–æ–≤–∞–Ω–æ {migrated_count} –≤–µ–∫—Ç–æ—Ä—ñ–≤")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        info = pg_manager.get_embeddings_info()
        print(f"üìä PostgreSQL –±–∞–∑–∞: {info.get('total_embeddings', 0)} –≤–µ–∫—Ç–æ—Ä—ñ–≤")

        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
        return False


def cleanup_chromadb():
    """–í–∏–¥–∞–ª—è—î ChromaDB —Ñ–∞–π–ª–∏."""
    print("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è ChromaDB —Ñ–∞–π–ª—ñ–≤...")

    try:
        chroma_path = Config.CHROMA_DB_PATH

        if os.path.exists(chroma_path):
            import shutil

            shutil.rmtree(chroma_path)
            print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {chroma_path}")
        else:
            print(f"‚ÑπÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ —ñ—Å–Ω—É—î: {chroma_path}")

        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ChromaDB: {e}")
        return False


def update_dependencies():
    """–û–Ω–æ–≤–ª—é—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ø—Ä–æ–µ–∫—Ç—É."""
    print("üì¶ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")

    try:
        # –í–∏–¥–∞–ª—è—î–º–æ ChromaDB –∑ requirements.txt
        requirements_file = "requirements.txt"

        if os.path.exists(requirements_file):
            with open(requirements_file, "r") as f:
                lines = f.readlines()

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ ChromaDB –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
            filtered_lines = []
            for line in lines:
                if not any(chroma_dep in line.lower() for chroma_dep in ["chromadb", "chroma"]):
                    filtered_lines.append(line)

            # –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
            with open(requirements_file, "w") as f:
                f.writelines(filtered_lines)

            print("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ requirements.txt")

        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó."""
    print("üöÄ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑ ChromaDB –Ω–∞ pgvector")
    print("=" * 50)

    # –ï—Ç–∞–ø 1: –ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    print("\nüìã –ï—Ç–∞–ø 1: –ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö")
    if not migrate_chromadb_to_pgvector():
        print("‚ùå –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–µ–≤–¥–∞–ª–∞")
        return False

    # –ï—Ç–∞–ø 2: –í–∏–¥–∞–ª–µ–Ω–Ω—è ChromaDB
    print("\nüìã –ï—Ç–∞–ø 2: –í–∏–¥–∞–ª–µ–Ω–Ω—è ChromaDB")
    if not cleanup_chromadb():
        print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ChromaDB")

    # –ï—Ç–∞–ø 3: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    print("\nüìã –ï—Ç–∞–ø 3: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π")
    if not update_dependencies():
        print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π")

    print("\n" + "=" * 50)
    print("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
    print("\nüéØ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å")
    print("3. –í–∏–¥–∞–ª—ñ—Ç—å —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ ChromaDB")

    return True


if __name__ == "__main__":
    main()
