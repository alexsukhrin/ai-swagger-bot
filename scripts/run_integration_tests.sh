#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
print_message() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Docker
if ! command -v docker &> /dev/null; then
    print_error "Docker –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker Compose."
    exit 1
fi

# –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è
cleanup() {
    print_message "–û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    docker-compose -f docker-compose.integration.yml down -v 2>/dev/null || true
    docker-compose -f docker-compose.test.yml down -v 2>/dev/null || true
}

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è trap –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
trap cleanup EXIT

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤
run_tests() {
    local test_type=$1
    local description=$2

    print_message "–ó–∞–ø—É—Å–∫ $description..."

    if docker-compose -f docker-compose.integration.yml up --build $test_type --exit-code-from $test_type; then
        print_success "$description –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
        return 0
    else
        print_error "$description –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
main() {
    print_message "–ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è..."

    # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
    cleanup

    # –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    declare -a test_results

    # 1. –¢–µ—Å—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    print_message "=== –¢–µ—Å—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ==="
    if run_tests "integration-tests" "—Ç–µ—Å—Ç—ñ–≤ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"; then
        test_results+=("integration-tests: PASS")
    else
        test_results+=("integration-tests: FAIL")
    fi

    # 2. –¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    print_message "=== –¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ==="
    if run_tests "performance-tests" "—Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"; then
        test_results+=("performance-tests: PASS")
    else
        test_results+=("performance-tests: FAIL")
    fi

    # 3. –¢–µ—Å—Ç–∏ API —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
    print_message "=== –¢–µ—Å—Ç–∏ API —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó ==="
    if run_tests "api-integration-tests" "—Ç–µ—Å—Ç—ñ–≤ API —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó"; then
        test_results+=("api-integration-tests: PASS")
    else
        test_results+=("api-integration-tests: FAIL")
    fi

    # 4. –ü–æ–≤–Ω—ñ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏
    print_message "=== –ü–æ–≤–Ω—ñ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏ ==="
    if run_tests "full-integration-tests" "–ø–æ–≤–Ω–∏—Ö —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤"; then
        test_results+=("full-integration-tests: PASS")
    else
        test_results+=("full-integration-tests: FAIL")
    fi

    # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print_message "=== –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ==="
    local passed=0
    local failed=0

    for result in "${test_results[@]}"; do
        if [[ $result == *": PASS" ]]; then
            print_success "$result"
            ((passed++))
        else
            print_error "$result"
            ((failed++))
        fi
    done

    print_message "–ü—ñ–¥—Å—É–º–æ–∫: $passed —É—Å–ø—ñ—à–Ω–∏—Ö, $failed –Ω–µ–≤–¥–∞–ª–∏—Ö —Ç–µ—Å—Ç—ñ–≤"

    if [ $failed -eq 0 ]; then
        print_success "–í—Å—ñ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!"
        exit 0
    else
        print_error "–î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—è –∑ –ø–æ–º–∏–ª–∫–∞–º–∏."
        exit 1
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –æ–∫—Ä–µ–º–∏—Ö —Ç–µ—Å—Ç—ñ–≤
run_specific_test() {
    local test_name=$1

    case $test_name in
        "integration")
            run_tests "integration-tests" "—Ç–µ—Å—Ç—ñ–≤ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
            ;;
        "performance")
            run_tests "performance-tests" "—Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
            ;;
        "api")
            run_tests "api-integration-tests" "—Ç–µ—Å—Ç—ñ–≤ API —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó"
            ;;
        "full")
            run_tests "full-integration-tests" "–ø–æ–≤–Ω–∏—Ö —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤"
            ;;
        *)
            print_error "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Ç–µ—Å—Ç—É: $test_name"
            print_message "–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏: integration, performance, api, full"
            exit 1
            ;;
    esac
}

# –û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
case "${1:-}" in
    "integration")
        run_specific_test "integration"
        ;;
    "performance")
        run_specific_test "performance"
        ;;
    "api")
        run_specific_test "api"
        ;;
    "full")
        run_specific_test "full"
        ;;
    "help"|"-h"|"--help")
        echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [—Ç–∏–ø_—Ç–µ—Å—Ç—É]"
        echo ""
        echo "–¢–∏–ø–∏ —Ç–µ—Å—Ç—ñ–≤:"
        echo "  integration  - –¢–µ—Å—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
        echo "  performance  - –¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
        echo "  api          - –¢–µ—Å—Ç–∏ API —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó"
        echo "  full         - –ü–æ–≤–Ω—ñ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏"
        echo "  (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤) - –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"
        echo ""
        echo "–ü—Ä–∏–∫–ª–∞–¥–∏:"
        echo "  $0                    # –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"
        echo "  $0 integration        # –¢—ñ–ª—å–∫–∏ —Ç–µ—Å—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó"
        echo "  $0 performance        # –¢—ñ–ª—å–∫–∏ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
        ;;
    "")
        main
        ;;
    *)
        print_error "–ù–µ–≤—ñ–¥–æ–º–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
        print_message "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ '$0 help' –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏"
        exit 1
        ;;
esac
