#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ embedding –ø–æ–∏—Å–∫–∞
"""
import os
import sys
from typing import Any, Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

import json

from langchain_openai import OpenAIEmbeddings

from postgres_vector_manager import PostgresVectorManager


def test_search_relevance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –ø–æ embedding'–∞–º"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    embeddings = OpenAIEmbeddings()
    vector_manager = PostgresVectorManager()

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    test_queries = [
        {
            "query": "–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã",
            "expected_categories": ["Products"],
            "description": "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å /products endpoints",
        },
        {
            "query": "—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç",
            "expected_categories": ["Products"],
            "description": "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
        },
        {
            "query": "—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
            "expected_categories": ["Categories"],
            "description": "–†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        },
        {
            "query": "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
            "expected_categories": ["Orders"],
            "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
        },
        {
            "query": "–ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã",
            "expected_categories": ["Orders"],
            "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤",
        },
        {
            "query": "–±—Ä–µ–Ω–¥—ã —Ç–æ–≤–∞—Ä–æ–≤",
            "expected_categories": ["Brands"],
            "description": "–†–∞–±–æ—Ç–∞ —Å –±—Ä–µ–Ω–¥–∞–º–∏",
        },
        {
            "query": "–∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
            "expected_categories": ["Collections"],
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏",
        },
        {
            "query": "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
            "expected_categories": ["Settings"],
            "description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
        },
        {
            "query": "–∞—Ç—Ä–∏–±—É—Ç—ã —Ç–æ–≤–∞—Ä–∞",
            "expected_categories": ["Attributes"],
            "description": "–ê—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
        },
        {
            "query": "—Å–µ–º–µ–π—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
            "expected_categories": ["Families"],
            "description": "–°–µ–º–µ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤",
        },
    ]

    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–ò EMBEDDING –ü–û–ò–°–ö–ê\n")
    print("=" * 60)

    total_tests = len(test_queries)
    passed_tests = 0

    for i, test_case in enumerate(test_queries, 1):
        print(f"\nüìã –¢–ï–°–¢ {i}/{total_tests}: {test_case['description']}")
        print(f"üîç –ó–∞–ø—Ä–æ—Å: '{test_case['query']}'")
        print(f"üìç –û–∂–∏–¥–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {test_case['expected_categories']}")

        try:
            # –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = embeddings.embed_query(test_case["query"])

            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ endpoints (–±–µ—Ä–µ–º —Ç–æ–ø-5 –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
            results = vector_manager.search_similar(
                query_embedding=query_embedding,
                user_id="demo_user_20250809_140721",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                limit=5,
            )

            if not results:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                continue

            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")

            found_categories = []
            for j, result in enumerate(results, 1):
                endpoint_path = result["endpoint_path"]
                method = result["method"]

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                if endpoint_path.startswith("/products"):
                    category = "Products"
                elif endpoint_path.startswith("/category"):
                    category = "Categories"
                elif endpoint_path.startswith("/orders"):
                    category = "Orders"
                elif endpoint_path.startswith("/brands"):
                    category = "Brands"
                elif endpoint_path.startswith("/collections"):
                    category = "Collections"
                elif endpoint_path.startswith("/attributes"):
                    category = "Attributes"
                elif endpoint_path.startswith("/settings"):
                    category = "Settings"
                elif endpoint_path.startswith("/families"):
                    category = "Families"
                else:
                    category = "Other"

                found_categories.append(category)

                similarity = result.get("similarity", 0.0)
                print(
                    f"  {j}. {method} {endpoint_path} ‚Üí {category} (similarity: {similarity:.3f})"
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            expected_found = any(
                cat in found_categories for cat in test_case["expected_categories"]
            )
            top_result_relevant = (
                found_categories[0] in test_case["expected_categories"]
                if found_categories
                else False
            )

            if top_result_relevant:
                print("‚úÖ –û–¢–õ–ò–ß–ù–û: –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω!")
                passed_tests += 1
            elif expected_found:
                print("üü° –•–û–†–û–®–û: –û–∂–∏–¥–∞–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ –≤ —Ç–æ–ø–µ")
                passed_tests += 0.5
            else:
                print("‚ùå –ü–õ–û–•–û: –û–∂–∏–¥–∞–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")

    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests)*100:.1f}%")

    if passed_tests >= total_tests * 0.8:
        print("üéâ –û–¢–õ–ò–ß–ù–û: –ö–∞—á–µ—Å—Ç–≤–æ embedding'–æ–≤ –≤—ã—Å–æ–∫–æ–µ!")
    elif passed_tests >= total_tests * 0.6:
        print("üü° –•–û–†–û–®–û: –ö–∞—á–µ—Å—Ç–≤–æ embedding'–æ–≤ —Å—Ä–µ–¥–Ω–µ–µ")
    else:
        print("üî¥ –ü–õ–û–•–û: –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ embedding'–æ–≤")


if __name__ == "__main__":
    test_search_relevance()
