#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó AI Swagger Bot –ª–æ–∫–∞–ª—å–Ω–æ
"""

import json
import os
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É –¥–æ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def create_test_event(path="/health", method="GET", body=None, headers=None):
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤–∏–π event –¥–ª—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó."""
    
    if headers is None:
        headers = {
            "accept": "application/json",
            "content-type": "application/json",
            "host": "localhost:3000",
            "user-agent": "test-lambda/1.0"
        }
    
    event = {
        "version": "2.0",
        "routeKey": f"{method} {path}",
        "rawPath": path,
        "rawQueryString": "",
        "headers": headers,
        "requestContext": {
            "accountId": "123456789012",
            "apiId": "test-api-id",
            "domainName": "localhost:3000",
            "domainPrefix": "localhost",
            "http": {
                "method": method,
                "path": path,
                "protocol": "HTTP/1.1",
                "sourceIp": "127.0.0.1",
                "userAgent": "test-lambda/1.0"
            },
            "requestId": "test-request-id",
            "routeKey": f"{method} {path}",
            "stage": "$default",
            "time": "12/Mar/2024:19:03:58 +0000",
            "timeEpoch": 1710267838000
        },
        "isBase64Encoded": False,
        "body": body or ""
    }
    
    return event

def test_health_endpoint():
    """–¢–µ—Å—Ç—É—î health endpoint."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è health endpoint...")
    
    try:
        from lambda_handler import handler
        
        event = create_test_event("/health", "GET")
        response = handler(event, {})
        
        print(f"‚úÖ Status Code: {response.get('statusCode', 'N/A')}")
        print(f"üìù Response: {response.get('body', 'N/A')}")
        
        return response
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

def test_chat_endpoint():
    """–¢–µ—Å—Ç—É—î chat endpoint."""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è chat endpoint...")
    
    try:
        from lambda_handler import handler
        
        chat_data = {
            "message": "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?",
            "user_id": "test-user-123"
        }
        
        event = create_test_event(
            "/chat", 
            "POST", 
            body=json.dumps(chat_data),
            headers={
                "accept": "application/json",
                "content-type": "application/json",
                "authorization": "Bearer test-token"
            }
        )
        
        response = handler(event, {})
        
        print(f"‚úÖ Status Code: {response.get('statusCode', 'N/A')}")
        print(f"üìù Response: {response.get('body', 'N/A')}")
        
        return response
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

def test_upload_swagger_endpoint():
    """–¢–µ—Å—Ç—É—î upload-swagger endpoint."""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è upload-swagger endpoint...")
    
    try:
        from lambda_handler import handler
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π Swagger —Ñ–∞–π–ª
        test_swagger = {
            "openapi": "3.0.0",
            "info": {
                "title": "Test API",
                "version": "1.0.0"
            },
            "paths": {
                "/test": {
                    "get": {
                        "summary": "Test endpoint",
                        "responses": {
                            "200": {
                                "description": "OK"
                            }
                        }
                    }
                }
            }
        }
        
        # –°–∏–º—É–ª—é—î–º–æ multipart form data
        import base64
        swagger_content = json.dumps(test_swagger)
        encoded_content = base64.b64encode(swagger_content.encode()).decode()
        
        event = create_test_event(
            "/upload-swagger",
            "POST",
            body=encoded_content,
            headers={
                "accept": "application/json",
                "content-type": "multipart/form-data; boundary=test-boundary",
                "authorization": "Bearer test-token"
            }
        )
        
        response = handler(event, {})
        
        print(f"‚úÖ Status Code: {response.get('statusCode', 'N/A')}")
        print(f"üìù Response: {response.get('body', 'N/A')}")
        
        return response
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

def test_custom_event(event_data):
    """–¢–µ—Å—Ç—É—î –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º event."""
    print(f"\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º event: {event_data.get('routeKey', 'N/A')}")
    
    try:
        from lambda_handler import handler
        
        response = handler(event_data, {})
        
        print(f"‚úÖ Status Code: {response.get('statusCode', 'N/A')}")
        print(f"üìù Response: {response.get('body', 'N/A')}")
        
        return response
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ Lambda —Ñ—É–Ω–∫—Ü—ñ—ó...")
    print("=" * 50)
    
    results = []
    
    # –¢–µ—Å—Ç health endpoint
    health_result = test_health_endpoint()
    results.append(("Health Endpoint", health_result))
    
    # –¢–µ—Å—Ç chat endpoint
    chat_result = test_chat_endpoint()
    results.append(("Chat Endpoint", chat_result))
    
    # –¢–µ—Å—Ç upload-swagger endpoint
    upload_result = test_upload_swagger_endpoint()
    results.append(("Upload Swagger Endpoint", upload_result))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    print("üìä –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—ñ–≤:")
    
    success_count = 0
    total_count = len(results)
    
    for test_name, result in results:
        if result and result.get('statusCode') == 200:
            print(f"‚úÖ {test_name}: –£–°–ü–Ü–®–ù–û")
            success_count += 1
        else:
            print(f"‚ùå {test_name}: –ù–ï–£–°–ü–Ü–®–ù–û")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
    
    return results

def test_with_file(event_file):
    """–¢–µ—Å—Ç—É—î –∑ event —Ñ–∞–π–ª—É."""
    print(f"üìÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É: {event_file}")
    
    try:
        with open(event_file, 'r') as f:
            event_data = json.load(f)
        
        return test_custom_event(event_data)
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {event_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –≤ —Ñ–∞–π–ª—ñ {event_file}")
        return None

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Lambda —Ñ—É–Ω–∫—Ü—ñ—ó AI Swagger Bot")
    parser.add_argument("--event-file", help="–§–∞–π–ª –∑ event –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
    parser.add_argument("--all", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ç–µ—Å—Ç–∏")
    parser.add_argument("--health", action="store_true", help="–¢–µ—Å—Ç—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ health endpoint")
    parser.add_argument("--chat", action="store_true", help="–¢–µ—Å—Ç—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ chat endpoint")
    parser.add_argument("--upload", action="store_true", help="–¢–µ—Å—Ç—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ upload endpoint")
    
    args = parser.parse_args()
    
    if args.event_file:
        test_with_file(args.event_file)
    elif args.health:
        test_health_endpoint()
    elif args.chat:
        test_chat_endpoint()
    elif args.upload:
        test_upload_swagger_endpoint()
    elif args.all:
        run_all_tests()
    else:
        print("üîç –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
        print("  --all          - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ç–µ—Å—Ç–∏")
        print("  --health       - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ health endpoint")
        print("  --chat         - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ chat endpoint")
        print("  --upload       - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ upload endpoint")
        print("  --event-file   - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∑ event —Ñ–∞–π–ª—É")
        print("\nüí° –ü—Ä–∏–∫–ª–∞–¥: python test_lambda.py --all") 