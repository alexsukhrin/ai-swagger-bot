#!/usr/bin/env python3
"""
Streamlit –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ Clickone Shop API
"""

import json
import os
from datetime import datetime

import pandas as pd
import requests
import streamlit as st
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
CLICKONE_SHOP_API_URL = "https://api.oneshop.click"
CLICKONE_SHOP_SWAGGER_URL = "https://api.oneshop.click/docs/ai-json"
JWT_TOKEN = os.getenv("JWT_SECRET_KEY")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="Clickone Shop API Demo",
    page_icon="üõçÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded",
)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è Streamlit –¥–æ–¥–∞—Ç–∫—É"""

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üõçÔ∏è Clickone Shop API Demo")
    st.markdown("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞–º–∏ Clickone Shop API")

    # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
        if JWT_TOKEN:
            st.success("‚úÖ JWT —Ç–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ")
            st.info(f"–¢–æ–∫–µ–Ω: {JWT_TOKEN[:20]}...")
        else:
            st.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            st.info("–î–æ–¥–∞–π—Ç–µ JWT_SECRET_KEY –≤ .env —Ñ–∞–π–ª –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É")

        st.divider()

        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
        st.header("üß≠ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
        page = st.radio(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É:",
            ["üè† –ì–æ–ª–æ–≤–Ω–∞", "üìã –ê–Ω–∞–ª—ñ–∑ Swagger", "üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó", "üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API"],
        )

    # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if page == "üè† –ì–æ–ª–æ–≤–Ω–∞":
        show_home_page()
    elif page == "üìã –ê–Ω–∞–ª—ñ–∑ Swagger":
        show_swagger_page()
    elif page == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó":
        show_categories_page()
    elif page == "üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API":
        show_api_testing_page()


def show_home_page():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    st.header("üè† –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API")

        # –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
        endpoints_stats = test_api_endpoints()

        st.metric("–ü—Ä–∞—Ü—é—é—á—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏", len(endpoints_stats["working"]))
        st.metric("–ü–æ—Ç—Ä–µ–±—É—é—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó", len(endpoints_stats["unauthorized"]))
        st.metric("–ù–µ –∑–Ω–∞–π–¥–µ–Ω—ñ", len(endpoints_stats["not_found"]))

        # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ –∑ Swagger
        st.info("üìã –î–æ—Å—Ç—É–ø–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –≤ Swagger –¥–ª—è AI:")
        st.write("‚Ä¢ GET /api/categories - –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
        st.write("‚Ä¢ POST /api/categories - –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
        st.write("‚Ä¢ GET /api/categories/{id} - –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
        st.write("‚Ä¢ PUT /api/categories/{id} - –û–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
        st.write("‚Ä¢ DELETE /api/categories/{id} - –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")

    with col2:
        st.subheader("üìä Swagger —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—ó —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        swagger_spec = download_swagger_spec()
        if swagger_spec:
            st.success("‚úÖ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞")
            st.metric("–ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏", len(swagger_spec.get("paths", {})))
            st.metric("–°—Ö–µ–º–∏", len(swagger_spec.get("components", {}).get("schemas", {})))
        else:
            st.warning("‚ö†Ô∏è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            st.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API")

        st.subheader("üìà –®–≤–∏–¥–∫—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        st.info("üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –±—ñ—á–Ω—É –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–æ–∑–¥—ñ–ª–∞–º–∏ API")


def show_swagger_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–Ω–∞–ª—ñ–∑—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    st.header("üìã –ê–Ω–∞–ª—ñ–∑ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    swagger_spec = download_swagger_spec()

    if swagger_spec:
        st.info("üí° –¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–∫–∞–∑—É—î –∞–Ω–∞–ª—ñ–∑ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó, —è–∫–∞ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üìä –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
            st.write(f"**API:** {swagger_spec.get('info', {}).get('title', 'Unknown')}")
            st.write(f"**–í–µ—Ä—Å—ñ—è:** {swagger_spec.get('info', {}).get('version', 'Unknown')}")
            st.write(f"**–ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏:** {len(swagger_spec.get('paths', {}))}")
            st.write(f"**–°—Ö–µ–º–∏:** {len(swagger_spec.get('components', {}).get('schemas', {}))}")

        with col2:
            st.subheader("üîó –î–æ—Å—Ç—É–ø–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏")
            paths = swagger_spec.get("paths", {})
            for path, methods in paths.items():
                st.write(f"**{path}:**")
                for method, details in methods.items():
                    if isinstance(details, dict):
                        summary = details.get("summary", "No summary")
                        st.write(f"  ‚Ä¢ {method.upper()}: {summary}")

        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ö–µ–º–∏
        st.subheader("üìã –°—Ö–µ–º–∏ –¥–∞–Ω–∏—Ö")
        schemas = swagger_spec.get("components", {}).get("schemas", {})

        # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame –¥–ª—è —Å—Ö–µ–º
        schema_data = []
        for name, schema in schemas.items():
            schema_data.append(
                {
                    "–ù–∞–∑–≤–∞": name,
                    "–¢–∏–ø": schema.get("type", "unknown"),
                    "–í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ": len(schema.get("properties", {})),
                    "–û–±–æ–≤'—è–∑–∫–æ–≤—ñ": len(schema.get("required", [])),
                }
            )

        if schema_data:
            df = pd.DataFrame(schema_data)
            st.dataframe(df, use_container_width=True)

        # –î–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ —Å—Ö–µ–º–∏
        if schemas:
            selected_schema = st.selectbox(
                "–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ö–µ–º—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É:", list(schemas.keys())
            )
            if selected_schema:
                schema = schemas[selected_schema]
                st.subheader(f"üìã –°—Ö–µ–º–∞: {selected_schema}")
                st.json(schema)

    else:
        st.error("‚ùå Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        st.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤ —Å–∏—Å—Ç–µ–º—É")


def show_categories_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    st.header("üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó")

    if not JWT_TOKEN:
        st.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
        if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫"):
            with st.spinner("–û—Ç—Ä–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó..."):
                categories = get_categories()
                if categories:
                    st.session_state.categories = categories
                    st.success(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
                else:
                    st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")

    with col2:
        st.subheader("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")

        with st.form("create_category"):
            name = st.text_input("–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É")
            slug = st.text_input("Slug", placeholder="–í–≤–µ–¥—ñ—Ç—å slug")
            description = st.text_area("–û–ø–∏—Å", placeholder="–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å")
            is_active = st.checkbox("–ê–∫—Ç–∏–≤–Ω–∞", value=True)
            sort_order = st.number_input("–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è", value=0, step=1)

            submitted = st.form_submit_button("–°—Ç–≤–æ—Ä–∏—Ç–∏")
            if submitted and name and slug:
                with st.spinner("–°—Ç–≤–æ—Ä—é—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é..."):
                    result = create_category(
                        {
                            "name": name,
                            "slug": slug,
                            "description": description,
                            "isActive": is_active,
                            "sortOrder": sort_order,
                        }
                    )
                    if result:
                        st.success("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
                        st.json(result)
                    else:
                        st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    if hasattr(st.session_state, "categories") and st.session_state.categories:
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ DataFrame
        categories_df = pd.DataFrame(st.session_state.categories)
        st.dataframe(categories_df, use_container_width=True)

        # –î–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥
        if len(st.session_state.categories) > 0:
            selected_category = st.selectbox(
                "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É:",
                options=range(len(st.session_state.categories)),
                format_func=lambda x: st.session_state.categories[x].get("name", f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è {x}"),
            )

            if selected_category is not None:
                category = st.session_state.categories[selected_category]
                st.subheader(f"üìã –î–µ—Ç–∞–ª—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {category.get('name', 'Unknown')}")
                st.json(category)


def show_products_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤"""
    st.header("üì¶ –ü—Ä–æ–¥—É–∫—Ç–∏")

    if not JWT_TOKEN:
        st.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏")
        if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫"):
            with st.spinner("–û—Ç—Ä–∏–º—É—é –ø—Ä–æ–¥—É–∫—Ç–∏..."):
                products = get_products()
                if products:
                    st.session_state.products = products
                    st.success(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")
                else:
                    st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")

    with col2:
        st.subheader("üîç –§—ñ–ª—å—Ç—Ä–∏")
        if hasattr(st.session_state, "products") and st.session_state.products:
            # –§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
            statuses = list(set([p.get("status", "unknown") for p in st.session_state.products]))
            selected_status = st.selectbox("–°—Ç–∞—Ç—É—Å:", ["–í—Å—ñ"] + statuses)

            # –§—ñ–ª—å—Ç—Ä –∑–∞ –±—Ä–µ–Ω–¥–æ–º
            brands = list(
                set(
                    [
                        p.get("brand", {}).get("name", "Unknown")
                        for p in st.session_state.products
                        if p.get("brand")
                    ]
                )
            )
            selected_brand = st.selectbox("–ë—Ä–µ–Ω–¥:", ["–í—Å—ñ"] + brands)

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    if hasattr(st.session_state, "products") and st.session_state.products:
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
        filtered_products = st.session_state.products

        if "selected_status" in locals() and selected_status != "–í—Å—ñ":
            filtered_products = [p for p in filtered_products if p.get("status") == selected_status]

        if "selected_brand" in locals() and selected_brand != "–í—Å—ñ":
            filtered_products = [
                p for p in filtered_products if p.get("brand", {}).get("name") == selected_brand
            ]

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ DataFrame
        products_data = []
        for product in filtered_products:
            products_data.append(
                {
                    "ID": product.get("id", "Unknown"),
                    "–ù–∞–∑–≤–∞": product.get("name", "Unknown"),
                    "–¶—ñ–Ω–∞": product.get("price", "Unknown"),
                    "–°—Ç–∞—Ç—É—Å": product.get("status", "Unknown"),
                    "SKU": product.get("sku", "Unknown"),
                    "–ë—Ä–µ–Ω–¥": product.get("brand", {}).get("name", "Unknown"),
                    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è": product.get("category", {}).get("name", "Unknown"),
                    "–°—ñ–º–µ–π—Å—Ç–≤–æ": product.get("family", {}).get("name", "Unknown"),
                }
            )

        if products_data:
            df = pd.DataFrame(products_data)
            st.dataframe(df, use_container_width=True)

            # –î–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥
            if len(filtered_products) > 0:
                selected_product = st.selectbox(
                    "–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É:",
                    options=range(len(filtered_products)),
                    format_func=lambda x: filtered_products[x].get("name", f"–ü—Ä–æ–¥—É–∫—Ç {x}"),
                )

                if selected_product is not None:
                    product = filtered_products[selected_product]
                    st.subheader(f"üìã –î–µ—Ç–∞–ª—ñ –ø—Ä–æ–¥—É–∫—Ç—É: {product.get('name', 'Unknown')}")
                    st.json(product)


def show_brands_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –±—Ä–µ–Ω–¥—ñ–≤"""
    st.header("üè∑Ô∏è –ë—Ä–µ–Ω–¥–∏")

    if not JWT_TOKEN:
        st.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –±—Ä–µ–Ω–¥–∏
    if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥—ñ–≤"):
        with st.spinner("–û—Ç—Ä–∏–º—É—é –±—Ä–µ–Ω–¥–∏..."):
            brands = get_brands()
            if brands:
                st.session_state.brands = brands
                st.success(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(brands)} –±—Ä–µ–Ω–¥—ñ–≤")
            else:
                st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤")

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥—ñ–≤
    if hasattr(st.session_state, "brands") and st.session_state.brands:
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥—ñ–≤")

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ DataFrame
        brands_data = []
        for brand in st.session_state.brands:
            brands_data.append(
                {
                    "ID": brand.get("id", "Unknown"),
                    "–ù–∞–∑–≤–∞": brand.get("name", "Unknown"),
                    "Slug": brand.get("slug", "Unknown"),
                    "–ö—Ä–∞—ó–Ω–∞": brand.get("country", "Unknown"),
                    "–°—Ç–∞—Ç—É—Å": brand.get("status", "Unknown"),
                    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤": brand.get("productsCount", 0),
                    "–í–µ–±-—Å–∞–π—Ç": brand.get("website", "Unknown"),
                }
            )

        if brands_data:
            df = pd.DataFrame(brands_data)
            st.dataframe(df, use_container_width=True)

            # –î–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥
            if len(st.session_state.brands) > 0:
                selected_brand = st.selectbox(
                    "–í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É:",
                    options=range(len(st.session_state.brands)),
                    format_func=lambda x: st.session_state.brands[x].get("name", f"–ë—Ä–µ–Ω–¥ {x}"),
                )

                if selected_brand is not None:
                    brand = st.session_state.brands[selected_brand]
                    st.subheader(f"üìã –î–µ—Ç–∞–ª—ñ –±—Ä–µ–Ω–¥—É: {brand.get('name', 'Unknown')}")
                    st.json(brand)


def show_customers_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    st.header("üë• –ö–ª—ñ—î–Ω—Ç–∏")

    if not JWT_TOKEN:
        st.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤
    if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤"):
        with st.spinner("–û—Ç—Ä–∏–º—É—é –∫–ª—ñ—î–Ω—Ç—ñ–≤..."):
            customers = get_customers()
            if customers:
                st.session_state.customers = customers
                st.success(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(customers)} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
            else:
                st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤")

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
    if hasattr(st.session_state, "customers") and st.session_state.customers:
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤")

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ DataFrame
        customers_data = []
        for customer in st.session_state.customers:
            customers_data.append(
                {
                    "ID": customer.get("id", "Unknown"),
                    "Email": customer.get("email", "Unknown"),
                    "–Ü–º'—è": customer.get("firstName", "Unknown"),
                    "–ü—Ä—ñ–∑–≤–∏—â–µ": customer.get("lastName", "Unknown"),
                    "–¢–µ–ª–µ—Ñ–æ–Ω": customer.get("phone", "Unknown"),
                    "–°—Ç–∞—Ç—É—Å": customer.get("status", "Unknown"),
                    "–°–µ–≥–º–µ–Ω—Ç": customer.get("segment", "Unknown"),
                }
            )

        if customers_data:
            df = pd.DataFrame(customers_data)
            st.dataframe(df, use_container_width=True)


def show_collections_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–æ–ª–µ–∫—Ü—ñ–π"""
    st.header("üìö –ö–æ–ª–µ–∫—Ü—ñ—ó")

    if not JWT_TOKEN:
        st.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—ó
    if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–µ–∫—Ü—ñ–π"):
        with st.spinner("–û—Ç—Ä–∏–º—É—é –∫–æ–ª–µ–∫—Ü—ñ—ó..."):
            collections = get_collections()
            if collections:
                st.session_state.collections = collections
                st.success(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(collections)} –∫–æ–ª–µ–∫—Ü—ñ–π")
            else:
                st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ–π")

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–µ–∫—Ü—ñ–π
    if hasattr(st.session_state, "collections") and st.session_state.collections:
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –∫–æ–ª–µ–∫—Ü—ñ–π")

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ DataFrame
        collections_data = []
        for collection in st.session_state.collections:
            collections_data.append(
                {
                    "ID": collection.get("id", "Unknown"),
                    "–ù–∞–∑–≤–∞": collection.get("name", "Unknown"),
                    "Slug": collection.get("slug", "Unknown"),
                    "–¢–∏–ø": collection.get("type", "Unknown"),
                    "–°—Ç–∞—Ç—É—Å": collection.get("status", "Unknown"),
                    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤": collection.get("productsCount", 0),
                }
            )

        if collections_data:
            df = pd.DataFrame(collections_data)
            st.dataframe(df, use_container_width=True)


def show_families_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—ñ–º–µ–π—Å—Ç–≤"""
    st.header("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°—ñ–º–µ–π—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")

    if not JWT_TOKEN:
        st.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—ñ–º–µ–π—Å—Ç–≤–∞
    if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—ñ–º–µ–π—Å—Ç–≤"):
        with st.spinner("–û—Ç—Ä–∏–º—É—é —Å—ñ–º–µ–π—Å—Ç–≤–∞..."):
            families = get_families()
            if families:
                st.session_state.families = families
                st.success(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(families)} —Å—ñ–º–µ–π—Å—Ç–≤")
            else:
                st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—ñ–º–µ–π—Å—Ç–≤")

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å—ñ–º–µ–π—Å—Ç–≤
    if hasattr(st.session_state, "families") and st.session_state.families:
        st.subheader("üìã –°–ø–∏—Å–æ–∫ —Å—ñ–º–µ–π—Å—Ç–≤")

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ DataFrame
        families_data = []
        for family in st.session_state.families:
            families_data.append(
                {
                    "ID": family.get("id", "Unknown"),
                    "–ù–∞–∑–≤–∞": family.get("name", "Unknown"),
                    "–û–ø–∏—Å": family.get("description", "Unknown"),
                }
            )

        if families_data:
            df = pd.DataFrame(families_data)
            st.dataframe(df, use_container_width=True)


def show_settings_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    st.header("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")

    if not JWT_TOKEN:
        st.warning("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"):
        with st.spinner("–û—Ç—Ä–∏–º—É—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è..."):
            settings = get_settings()
            if settings:
                st.session_state.settings = settings
                st.success(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(settings)} –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")
            else:
                st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    if hasattr(st.session_state, "settings") and st.session_state.settings:
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ DataFrame
        settings_data = []
        for setting in st.session_state.settings:
            settings_data.append(
                {
                    "ID": setting.get("id", "Unknown"),
                    "–ö–ª—é—á": setting.get("key", "Unknown"),
                    "–ó–Ω–∞—á–µ–Ω–Ω—è": setting.get("value", "Unknown"),
                    "–ü—Ä–æ–¥—É–∫—Ç ID": setting.get("productId", "Unknown"),
                }
            )

        if settings_data:
            df = pd.DataFrame(settings_data)
            st.dataframe(df, use_container_width=True)


def show_api_testing_page():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API"""
    st.header("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API")

    st.subheader("üìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤")

    if st.button("üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"):
        with st.spinner("–¢–µ—Å—Ç—É—é API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏..."):
            endpoints_stats = test_api_endpoints()

            # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric("‚úÖ –ü—Ä–∞—Ü—é—é—á—ñ", len(endpoints_stats["working"]))
                if endpoints_stats["working"]:
                    st.write("**–ü—Ä–∞—Ü—é—é—á—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏:**")
                    for endpoint in endpoints_stats["working"]:
                        st.write(f"‚Ä¢ {endpoint}")

            with col2:
                st.metric("üîí –ü–æ—Ç—Ä–µ–±—É—é—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó", len(endpoints_stats["unauthorized"]))
                if endpoints_stats["unauthorized"]:
                    st.write("**–ü–æ—Ç—Ä–µ–±—É—é—Ç—å —Ç–æ–∫–µ–Ω:**")
                    for endpoint in endpoints_stats["unauthorized"]:
                        st.write(f"‚Ä¢ {endpoint}")

            with col3:
                st.metric("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω—ñ", len(endpoints_stats["not_found"]))
                if endpoints_stats["not_found"]:
                    st.write("**–ù–µ –∑–Ω–∞–π–¥–µ–Ω—ñ:**")
                    for endpoint in endpoints_stats["not_found"]:
                        st.write(f"‚Ä¢ {endpoint}")

    st.divider()

    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    st.info("üí° –¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–∫–∞–∑—É—î —Ä–µ–∞–ª—å–Ω—É –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ä—ñ–∑–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ API")


# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
def download_swagger_spec():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é"""
    try:
        response = requests.get(
            CLICKONE_SHOP_SWAGGER_URL, timeout=30, headers={"User-Agent": "AI-Swagger-Bot/1.0"}
        )

        if response.status_code == 200:
            return response.json()
        else:
            return None

    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        return None


def test_api_endpoints():
    """–¢–µ—Å—Ç—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤"""
    # –¢—ñ–ª—å–∫–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏, –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ Swagger –¥–ª—è AI
    endpoints_to_test = [
        ("/api/categories", "GET"),
        ("/api/categories", "POST"),
        ("/api/categories/{id}", "GET"),
        ("/api/categories/{id}", "PUT"),
        ("/api/categories/{id}", "DELETE"),
    ]

    working = []
    unauthorized = []
    not_found = []

    for endpoint, method in endpoints_to_test:
        try:
            response = requests.get(
                f"{CLICKONE_SHOP_API_URL}{endpoint}",
                timeout=10,
                headers={"User-Agent": "AI-Swagger-Bot/1.0"},
            )

            if response.status_code == 200:
                working.append(endpoint)
            elif response.status_code == 401:
                unauthorized.append(endpoint)
            elif response.status_code == 404:
                not_found.append(endpoint)

        except Exception:
            not_found.append(endpoint)

    return {"working": working, "unauthorized": unauthorized, "not_found": not_found}


def get_categories():
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    if not JWT_TOKEN:
        return None

    try:
        headers = {
            "Authorization": f"Bearer {JWT_TOKEN}",
            "Content-Type": "application/json",
            "User-Agent": "AI-Swagger-Bot/1.0",
        }

        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/api/categories", headers=headers, timeout=30
        )

        if response.status_code == 200:
            return response.json()
        else:
            return None

    except Exception:
        return None


def create_category(category_data):
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"""
    if not JWT_TOKEN:
        return None

    try:
        headers = {
            "Authorization": f"Bearer {JWT_TOKEN}",
            "Content-Type": "application/json",
            "User-Agent": "AI-Swagger-Bot/1.0",
        }

        response = requests.post(
            f"{CLICKONE_SHOP_API_URL}/api/categories",
            headers=headers,
            json=category_data,
            timeout=30,
        )

        if response.status_code == 201:
            return response.json()
        else:
            return None

    except Exception:
        return None


def get_products():
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤"""
    try:
        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/api/products",
            timeout=30,
            headers={"User-Agent": "AI-Swagger-Bot/1.0"},
        )

        if response.status_code == 200:
            data = response.json()
            return data.get("products", [])
        else:
            return None

    except Exception:
        return None


def get_brands():
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥—ñ–≤"""
    try:
        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/api/brands",
            timeout=30,
            headers={"User-Agent": "AI-Swagger-Bot/1.0"},
        )

        if response.status_code == 200:
            data = response.json()
            return data.get("brands", [])
        else:
            return None

    except Exception:
        return None


def get_customers():
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    try:
        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/api/customers",
            timeout=30,
            headers={"User-Agent": "AI-Swagger-Bot/1.0"},
        )

        if response.status_code == 200:
            data = response.json()
            return data.get("customers", [])
        else:
            return None

    except Exception:
        return None


def get_collections():
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–æ–ª–µ–∫—Ü—ñ–π"""
    try:
        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/api/collections",
            timeout=30,
            headers={"User-Agent": "AI-Swagger-Bot/1.0"},
        )

        if response.status_code == 200:
            data = response.json()
            return data.get("collections", [])
        else:
            return None

    except Exception:
        return None


def get_families():
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —Å—ñ–º–µ–π—Å—Ç–≤"""
    try:
        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/api/families",
            timeout=30,
            headers={"User-Agent": "AI-Swagger-Bot/1.0"},
        )

        if response.status_code == 200:
            data = response.json()
            return data.get("families", [])
        else:
            return None

    except Exception:
        return None


def get_settings():
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    try:
        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/api/settings",
            timeout=30,
            headers={"User-Agent": "AI-Swagger-Bot/1.0"},
        )

        if response.status_code == 200:
            data = response.json()
            return data.get("settings", [])
        else:
            return None

    except Exception:
        return None


if __name__ == "__main__":
    main()
