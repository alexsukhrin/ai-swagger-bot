#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π –¥–µ–º–æ AI –±–æ—Ç–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Clickone Shop API
"""

import os

import requests
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()


def demo_ai_bot():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ AI –±–æ—Ç–∞"""
    print("ü§ñ –î–µ–º–æ AI –±–æ—Ç–∞ –¥–ª—è Clickone Shop API")
    print("=" * 60)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞
    jwt_token = os.getenv("JWT_SECRET_KEY")
    if not jwt_token:
        print("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print("üí° –î–æ–¥–∞–π—Ç–µ JWT_SECRET_KEY –≤ .env —Ñ–∞–π–ª")
        return

    print("‚úÖ JWT —Ç–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ")
    print(f"üîê –¢–æ–∫–µ–Ω: {jwt_token[:20]}...")

    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è API
    API_URL = "https://api.oneshop.click"
    SWAGGER_URL = "https://api.oneshop.click/docs/ai-json"

    print(f"\nüåê API URL: {API_URL}")
    print(f"üìã Swagger URL: {SWAGGER_URL}")

    # –¢–µ—Å—Ç 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
    try:
        response = requests.get(SWAGGER_URL, timeout=30)
        if response.status_code == 200:
            swagger_spec = response.json()
            print("‚úÖ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
            print(f"   üìä –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏: {len(swagger_spec.get('paths', {}))}")
            print(f"   üìã –°—Ö–µ–º–∏: {len(swagger_spec.get('components', {}).get('schemas', {}))}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: HTTP {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return

    # –¢–µ—Å—Ç 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–ø–æ—Ç—Ä–µ–±—É—î JWT)
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —á–µ—Ä–µ–∑ API")
    try:
        headers = {"Authorization": f"Bearer {jwt_token}", "Content-Type": "application/json"}

        response = requests.get(f"{API_URL}/api/categories", headers=headers, timeout=30)
        if response.status_code == 200:
            categories = response.json()
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω–æ")
            print(f"   üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {len(categories) if isinstance(categories, list) else 'N/A'}")
        elif response.status_code == 401:
            print("üîí –ü–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (JWT —Ç–æ–∫–µ–Ω)")
        else:
            print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –¢–µ—Å—Ç 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —á–µ—Ä–µ–∑ API")
    try:
        category_data = {
            "name": "–¢–µ—Å—Ç–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è",
            "slug": "test-category",
            "description": "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è –¥–µ–º–æ",
            "isActive": True,
            "sortOrder": 100,
        }

        response = requests.post(
            f"{API_URL}/api/categories", headers=headers, json=category_data, timeout=30
        )

        if response.status_code == 201:
            created_category = response.json()
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            print(f"   üÜî ID: {created_category.get('id', 'N/A')}")
            print(f"   üìù –ù–∞–∑–≤–∞: {created_category.get('name', 'N/A')}")
        elif response.status_code == 401:
            print("üîí –ü–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
        elif response.status_code == 400:
            print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö")
            print(f"   üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
        else:
            print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # –¢–µ—Å—Ç 4: –ê–Ω–∞–ª—ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç 4: –ê–Ω–∞–ª—ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤")
    endpoints_to_test = [
        ("/api/categories", "GET"),
        ("/api/categories", "POST"),
        ("/api/products", "GET"),
        ("/api/brands", "GET"),
        ("/api/customers", "GET"),
    ]

    working = []
    unauthorized = []
    not_found = []

    for endpoint, method in endpoints_to_test:
        try:
            if method == "GET":
                response = requests.get(f"{API_URL}{endpoint}", timeout=10)
            else:
                response = requests.post(f"{API_URL}{endpoint}", headers=headers, timeout=10)

            if response.status_code == 200:
                working.append(f"{method} {endpoint}")
            elif response.status_code == 401:
                unauthorized.append(f"{method} {endpoint}")
            elif response.status_code == 404:
                not_found.append(f"{method} {endpoint}")

        except Exception:
            not_found.append(f"{method} {endpoint}")

    print(f"   ‚úÖ –ü—Ä–∞—Ü—é—é—á—ñ: {len(working)}")
    print(f"   üîí –ü–æ—Ç—Ä–µ–±—É—é—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {len(unauthorized)}")
    print(f"   ‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω—ñ: {len(not_found)}")

    if working:
        print("   üìã –ü—Ä–∞—Ü—é—é—á—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏:")
        for endpoint in working:
            print(f"      ‚Ä¢ {endpoint}")

    print("\n" + "=" * 60)
    print("üéâ –î–µ–º–æ AI –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üí° –¶–µ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –±–∞–∑–æ–≤—É —Ä–æ–±–æ—Ç—É –∑ API –±–µ–∑ AI –æ–±—Ä–æ–±–∫–∏")


def demo_swagger_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É Swagger"""
    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:")
    print("-" * 40)

    SWAGGER_URL = "https://api.oneshop.click/docs/ai-json"

    try:
        response = requests.get(SWAGGER_URL, timeout=30)
        if response.status_code == 200:
            swagger_spec = response.json()

            # –ê–Ω–∞–ª—ñ–∑ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
            paths = swagger_spec.get("paths", {})
            print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ ({len(paths)}):")
            for path, methods in paths.items():
                for method, details in methods.items():
                    if isinstance(details, dict):
                        summary = details.get("summary", "No summary")
                        print(f"   ‚Ä¢ {method.upper()} {path}: {summary}")

            # –ê–Ω–∞–ª—ñ–∑ —Å—Ö–µ–º
            schemas = swagger_spec.get("components", {}).get("schemas", {})
            print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ö–µ–º–∏ ({len(schemas)}):")
            for name, schema in list(schemas.items())[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
                properties = len(schema.get("properties", {}))
                required = len(schema.get("required", []))
                print(f"   ‚Ä¢ {name}: {properties} –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π, {required} –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö")

            if len(schemas) > 10:
                print(f"   ... —Ç–∞ —â–µ {len(schemas) - 10} —Å—Ö–µ–º")

        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: HTTP {response.status_code}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–µ–º–æ AI –±–æ—Ç–∞...")

    # –û—Å–Ω–æ–≤–Ω–µ –¥–µ–º–æ
    demo_ai_bot()

    # –ê–Ω–∞–ª—ñ–∑ Swagger
    demo_swagger_analysis()

    print("\nüìö –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
    print("   ‚Ä¢ CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python clickone_cli.py")
    print("   ‚Ä¢ Streamlit –¥–µ–º–æ: make streamlit-up")
    print("   ‚Ä¢ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: make test")
    print("   ‚Ä¢ –ü–æ–≤–Ω–µ AI –¥–µ–º–æ: make ai-demo")


if __name__ == "__main__":
    main()
