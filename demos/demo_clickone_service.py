#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ ClickoneSwaggerService –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
"""

import json
import os
from datetime import datetime

from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()


def print_banner():
    """–í–∏–≤–æ–¥–∏—Ç—å –±–∞–Ω–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("üöÄ" * 50)
    print("üîç –î–ï–ú–û CLICKONE SWAGGER SERVICE")
    print("üöÄ" * 50)
    print()


def demo_swagger_download():
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    print("üìã –î–µ–º–æ–Ω—Å—Ç—Ä—É—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

    try:
        from src.clickone_swagger_service import get_clickone_swagger_service

        service = get_clickone_swagger_service()
        swagger_spec = service.download_swagger_spec()

        if swagger_spec:
            print(f"‚úÖ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            print(f"   üìä API: {swagger_spec.get('info', {}).get('title', 'Unknown')}")
            print(f"   üìä –í–µ—Ä—Å—ñ—è: {swagger_spec.get('info', {}).get('version', 'Unknown')}")
            print(f"   üìä –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏: {len(swagger_spec.get('paths', {}))}")
            return swagger_spec
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é")
            return None

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None


def demo_swagger_parsing(swagger_spec):
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î –ø–∞—Ä—Å–∏–Ω–≥ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä—É—é –ø–∞—Ä—Å–∏–Ω–≥ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

    try:
        from src.clickone_swagger_service import get_clickone_swagger_service

        service = get_clickone_swagger_service()
        parsed_info = service.parse_swagger_spec(swagger_spec)

        if parsed_info:
            print(f"‚úÖ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø–∞—Ä—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            print(f"   üìä API Name: {parsed_info.get('api_name', 'Unknown')}")
            print(f"   üìä API Version: {parsed_info.get('api_version', 'Unknown')}")
            print(f"   üìä Parsed At: {parsed_info.get('parsed_at', 'Unknown')}")
            return parsed_info
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é")
            return None

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None


def demo_endpoints_summary(swagger_spec):
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Å—É –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤"""
    print("\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä—É—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Å—É –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤...")

    try:
        from src.clickone_swagger_service import get_clickone_swagger_service

        service = get_clickone_swagger_service()
        summary = service.get_api_endpoints_summary(swagger_spec)

        if summary:
            print(f"‚úÖ –û–ø–∏—Å –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            print(f"   üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤: {len(summary)}")

            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–µ—Ä—à–∏—Ö –∫—ñ–ª—å–∫–æ—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
            for i, (path, methods) in enumerate(summary.items()):
                if i >= 3:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 3
                    break
                print(f"\n   üîó {path}:")
                for method, details in methods.items():
                    print(f"      {method.upper()}: {details.get('summary', 'No summary')}")
                    print(f"         –¢–µ–≥–∏: {', '.join(details.get('tags', []))}")
                    print(f"         –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {details.get('parameters_count', 0)}")
                    print(f"         –í—ñ–¥–ø–æ–≤—ñ–¥—ñ: {details.get('responses_count', 0)}")

            return summary
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–ø–∏—Å –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤")
            return None

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None


def demo_spec_to_text(swagger_spec):
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ —Ç–µ–∫—Å—Ç"""
    print("\nüìù –î–µ–º–æ–Ω—Å—Ç—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ —Ç–µ–∫—Å—Ç...")

    try:
        from src.clickone_swagger_service import get_clickone_swagger_service

        service = get_clickone_swagger_service()
        text = service._convert_spec_to_text(swagger_spec)

        if text:
            print(f"‚úÖ –°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —Ç–µ–∫—Å—Ç —É—Å–ø—ñ—à–Ω–æ!")
            print(f"   üìä –†–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É: {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤")

            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—á–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç—É
            lines = text.split("\n")[:20]  # –ü–µ—Ä—à—ñ 20 —Ä—è–¥–∫—ñ–≤
            print("\n   üìÑ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç—É:")
            for line in lines:
                if line.strip():
                    print(f"      {line}")

            if len(text.split("\n")) > 20:
                remaining_lines = len(text.split("\n")) - 20
                print(f"      ... —Ç–∞ —â–µ {remaining_lines} —Ä—è–¥–∫—ñ–≤")

            return text
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –≤ —Ç–µ–∫—Å—Ç")
            return None

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None


def demo_api_connection():
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API"""
    print("\nüîå –î–µ–º–æ–Ω—Å—Ç—Ä—É—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API...")

    try:
        from src.clickone_swagger_service import get_clickone_swagger_service

        service = get_clickone_swagger_service()
        connection_works = service.validate_api_connection()

        if connection_works:
            print("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Clickone Shop API –ø—Ä–∞—Ü—é—î")
        else:
            print("‚ö†Ô∏è –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Clickone Shop API –Ω–µ –ø—Ä–∞—Ü—é—î")

        return connection_works

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False


def demo_full_processing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î –ø–æ–≤–Ω—É –æ–±—Ä–æ–±–∫—É Clickone Shop API Swagger"""
    print("\nüîÑ –î–µ–º–æ–Ω—Å—Ç—Ä—É—é –ø–æ–≤–Ω—É –æ–±—Ä–æ–±–∫—É Clickone Shop API Swagger...")

    try:
        from src.clickone_swagger_service import get_clickone_swagger_service

        service = get_clickone_swagger_service()

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ ID
        user_id = "demo_user_123"
        spec_id = f"clickone_shop_api_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

        print(f"   üìä User ID: {user_id}")
        print(f"   üìä Spec ID: {spec_id}")

        result = service.process_clickone_swagger(user_id, spec_id)

        if result and result.get("success"):
            print("‚úÖ –û–±—Ä–æ–±–∫—É Clickone Shop API Swagger –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            spec_info = result.get("spec_info", {})
            print(f"   üìä API Name: {spec_info.get('api_name', 'Unknown')}")
            print(f"   üìä API Version: {spec_info.get('api_version', 'Unknown')}")
            print(f"   üìä Endpoints Count: {spec_info.get('endpoints_count', 0)}")
            print(f"   üìä Parsed At: {spec_info.get('parsed_at', 'Unknown')}")

            return result
        else:
            error = result.get("error", "Unknown error") if result else "No result"
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {error}")
            return None

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print_banner()

    print("üîç –ü–æ—á–∏–Ω–∞—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é —Ä–æ–±–æ—Ç–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ Clickone Shop API...")

    # 1. –î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger
    swagger_spec = demo_swagger_download()

    if not swagger_spec:
        print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞.")
        return

    # 2. –î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥
    parsed_info = demo_swagger_parsing(swagger_spec)

    # 3. –î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Å—É –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
    endpoints_summary = demo_endpoints_summary(swagger_spec)

    # 4. –î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –≤ —Ç–µ–∫—Å—Ç
    spec_text = demo_spec_to_text(swagger_spec)

    # 5. –î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API
    api_connection = demo_api_connection()

    # 6. –î–µ–º–æ–Ω—Å—Ç—Ä—É—î–º–æ –ø–æ–≤–Ω—É –æ–±—Ä–æ–±–∫—É (–±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings)
    print("\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings (–ø–æ—Ç—Ä–µ–±—É—î PostgreSQL –∑ pgvector)")
    print("   –î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å –≤ Docker –∑ PostgreSQL")

    print("\n" + "üöÄ" * 50)
    print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("üöÄ" * 50)
    print("\nüìã –ü—ñ–¥—Å—É–º–æ–∫:")
    print(f"   ‚úÖ Swagger –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {'–¢–∞–∫' if swagger_spec else '–ù—ñ'}")
    print(f"   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥: {'–¢–∞–∫' if parsed_info else '–ù—ñ'}")
    print(f"   ‚úÖ –û–ø–∏—Å –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤: {'–¢–∞–∫' if endpoints_summary else '–ù—ñ'}")
    print(f"   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ —Ç–µ–∫—Å—Ç: {'–¢–∞–∫' if spec_text else '–ù—ñ'}")
    print(f"   ‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ API: {'–¢–∞–∫' if api_connection else '–ù—ñ'}")


if __name__ == "__main__":
    main()
