stages:
  - test
  - build
  - deploy
  - security

variables:
  AWS_REGION: us-east-1
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Cache dependencies between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .python_packages/
    - .cache/pip/

# Test stage
test:
  stage: test
  image: python:3.11-slim
  services:
    - postgres:15
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test
    POSTGRES_PASSWORD: test
    DATABASE_URL: postgresql://test:test@postgres:5432/test_db
  before_script:
    - apt-get update && apt-get install -y nodejs npm
    - npm install -g serverless
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - npm install
  script:
    - python -m pytest tests/ -v
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
    expire_in: 1 week

# Build stage
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -f Dockerfile.lambda -t $CI_REGISTRY_IMAGE:latest .
    - docker build -f Dockerfile.lambda -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  only:
    - main
    - develop
  tags:
    - docker

# Deploy to staging
deploy:staging:
  stage: deploy
  image: node:18-alpine
  before_script:
    - npm install -g serverless
    - npm install
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - serverless deploy --stage staging --verbose
    - serverless info --stage staging
  environment:
    name: staging
    url: https://staging-api.your-domain.com
  only:
    - develop
  when: manual
  tags:
    - aws

# Deploy to production
deploy:production:
  stage: deploy
  image: node:18-alpine
  before_script:
    - npm install -g serverless
    - npm install
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - serverless deploy --stage prod --verbose
    - serverless info --stage prod
  environment:
    name: production
    url: https://api.your-domain.com
  only:
    - main
  when: manual
  tags:
    - aws

# Security scan
security:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy fs --format gitlab --output trivy-report.json .
  artifacts:
    reports:
      security: trivy-report.json
    paths:
      - trivy-report.json
    expire_in: 1 week
  allow_failure: true

# Deploy to ECR (only on main branch)
deploy:ecr:
  stage: deploy
  image: 
    name: amazon/aws-cli:latest
    entrypoint: [""]
  services:
    - docker:24.0.5-dind
  before_script:
    - aws --version
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
  script:
    - docker build -f Dockerfile.lambda -t ai-swagger-bot-lambda:$CI_COMMIT_SHA .
    - docker tag ai-swagger-bot-lambda:$CI_COMMIT_SHA $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ai-swagger-bot-lambda:$CI_COMMIT_SHA
    - docker tag ai-swagger-bot-lambda:$CI_COMMIT_SHA $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ai-swagger-bot-lambda:latest
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ai-swagger-bot-lambda:$CI_COMMIT_SHA
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ai-swagger-bot-lambda:latest
  only:
    - main
  when: manual
  tags:
    - aws
  variables:
    AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID

# Notifications
notify:success:
  stage: .post
  image: curlimages/curl:latest
  script:
    - |
      if [ "$CI_JOB_STATUS" = "success" ]; then
        echo "✅ Deployment successful to $CI_ENVIRONMENT_NAME"
        # Add your notification logic here (Slack, Teams, etc.)
      fi
  when: on_success
  allow_failure: true

notify:failure:
  stage: .post
  image: curlimages/curl:latest
  script:
    - |
      if [ "$CI_JOB_STATUS" = "failed" ]; then
        echo "❌ Deployment failed to $CI_ENVIRONMENT_NAME"
        # Add your notification logic here (Slack, Teams, etc.)
      fi
  when: on_failure
  allow_failure: true 