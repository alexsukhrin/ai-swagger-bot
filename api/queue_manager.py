"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —á–µ—Ä–≥–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings
"""

import asyncio
import json
import logging
import os
import tempfile
import threading
import time
from datetime import datetime
from typing import Dict, List, Optional
from uuid import uuid4

from sqlalchemy.orm import Session

from src.rag_engine import PostgresRAGEngine

logger = logging.getLogger(__name__)


class EmbeddingTask:
    """–ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings"""

    def __init__(
        self,
        task_id: str,
        user_id: str,
        swagger_spec_id: str,
        swagger_data: dict,
        enable_gpt_enhancement: bool = True,
    ):
        self.task_id = task_id
        self.user_id = user_id
        self.swagger_spec_id = swagger_spec_id
        self.swagger_data = swagger_data
        self.enable_gpt_enhancement = enable_gpt_enhancement  # –ù–æ–≤–µ –ø–æ–ª–µ –¥–ª—è GPT
        self.status = "pending"  # pending, processing, completed, failed
        self.created_at = datetime.now()
        self.started_at: Optional[datetime] = None
        self.completed_at: Optional[datetime] = None
        self.error_message: Optional[str] = None
        self.progress = 0  # 0-100


class QueueManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —á–µ—Ä–≥–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings"""

    def __init__(self):
        self.tasks: Dict[str, EmbeddingTask] = {}
        self.processing = False
        self.worker_thread: Optional[threading.Thread] = None
        self._lock = threading.Lock()

    def add_task(
        self,
        user_id: str,
        swagger_spec_id: str,
        swagger_data: dict,
        enable_gpt_enhancement: bool = True,
    ) -> str:
        """–î–æ–¥–∞—î –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É"""
        task_id = str(uuid4())

        with self._lock:
            task = EmbeddingTask(
                task_id, user_id, swagger_spec_id, swagger_data, enable_gpt_enhancement
            )
            self.tasks[task_id] = task
            logger.info(f"üìã –î–æ–¥–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è {task_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑ GPT –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º")

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ worker —è–∫—â–æ –≤—ñ–Ω –Ω–µ –ø—Ä–∞—Ü—é—î
            if not self.processing:
                self._start_worker()

        return task_id

    def get_task_status(self, task_id: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è"""
        with self._lock:
            task = self.tasks.get(task_id)
            if not task:
                return None

            return {
                "task_id": task.task_id,
                "status": task.status,
                "progress": task.progress,
                "created_at": task.created_at.isoformat(),
                "started_at": task.started_at.isoformat() if task.started_at else None,
                "completed_at": task.completed_at.isoformat() if task.completed_at else None,
                "error_message": task.error_message,
            }

    def get_user_tasks(self, user_id: str) -> List[Dict]:
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        with self._lock:
            user_tasks = [task for task in self.tasks.values() if task.user_id == user_id]

            return [
                {
                    "task_id": task.task_id,
                    "swagger_spec_id": task.swagger_spec_id,
                    "status": task.status,
                    "progress": task.progress,
                    "created_at": task.created_at.isoformat(),
                    "started_at": task.started_at.isoformat() if task.started_at else None,
                    "completed_at": task.completed_at.isoformat() if task.completed_at else None,
                    "error_message": task.error_message,
                }
                for task in user_tasks
            ]

    def _start_worker(self):
        """–ó–∞–ø—É—Å–∫–∞—î worker thread –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω—å"""
        if self.worker_thread and self.worker_thread.is_alive():
            return

        self.processing = True
        self.worker_thread = threading.Thread(target=self._worker_loop, daemon=True)
        self.worker_thread.start()
        logger.info("üöÄ Worker thread –∑–∞–ø—É—â–µ–Ω–æ")

    def _worker_loop(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª worker'–∞"""
        while self.processing:
            try:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
                next_task = None
                with self._lock:
                    for task in self.tasks.values():
                        if task.status == "pending":
                            next_task = task
                            break

                if next_task:
                    self._process_task(next_task)
                else:
                    # –ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å, —á–µ–∫–∞—î–º–æ
                    time.sleep(1)

            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ worker loop: {e}")
                time.sleep(5)

    def _process_task(self, task: EmbeddingTask):
        """–û–±—Ä–æ–±–ª—è—î –æ–¥–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        try:
            logger.info(f"üîÑ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è {task.task_id}")

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
            task.status = "processing"
            task.started_at = datetime.now()

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode="w", suffix=".json", delete=False) as temp_file:
                temp_file.write(json.dumps(task.swagger_data))
                temp_file_path = temp_file.name

            try:
                # –°—Ç–≤–æ—Ä—é—î–º–æ RAG engine
                rag_engine = PostgresRAGEngine(
                    user_id=task.user_id, swagger_spec_id=task.swagger_spec_id
                )

                # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
                task.progress = 25

                # –°—Ç–≤–æ—Ä—é—î–º–æ embeddings –∑ GPT enhancement
                success = rag_engine.create_vectorstore_from_swagger(
                    temp_file_path, enable_gpt_enhancement=task.enable_gpt_enhancement
                )

                task.progress = 100

                if success:
                    task.status = "completed"
                    logger.info(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è {task.task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                else:
                    task.status = "failed"
                    task.error_message = "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ embeddings"
                    logger.warning(f"‚ö†Ô∏è –ó–∞–≤–¥–∞–Ω–Ω—è {task.task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–æ—é")

            finally:
                # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
                try:
                    os.unlink(temp_file_path)
                except:
                    pass

            task.completed_at = datetime.now()

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è {task.task_id}: {e}")
            task.status = "failed"
            task.error_message = str(e)
            task.completed_at = datetime.now()

    def cleanup_old_tasks(self, max_age_hours: int = 24):
        """–í–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä—ñ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        cutoff_time = datetime.now().timestamp() - (max_age_hours * 3600)

        with self._lock:
            tasks_to_remove = []
            for task_id, task in self.tasks.items():
                if (
                    task.status in ["completed", "failed"]
                    and task.completed_at
                    and task.completed_at.timestamp() < cutoff_time
                ):
                    tasks_to_remove.append(task_id)

            for task_id in tasks_to_remove:
                del self.tasks[task_id]

            if tasks_to_remove:
                logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {len(tasks_to_remove)} —Å—Ç–∞—Ä–∏—Ö –∑–∞–≤–¥–∞–Ω—å")


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ—Ä–≥–∏
queue_manager = QueueManager()
