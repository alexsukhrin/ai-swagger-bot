"""
FastAPI —Å–µ—Ä–≤—ñ—Å –¥–ª—è AI Swagger Bot
"""

import json
import logging
import os
import uuid
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional

import yaml
from fastapi import Depends, FastAPI, File, Form, HTTPException, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer
from jose import JWTError, jwt
from pydantic import BaseModel
from sqlalchemy.orm import Session

from src.config import Config
from src.enhanced_swagger_parser import EnhancedSwaggerParser
from src.interactive_api_agent import InteractiveSwaggerAgent
from src.rag_engine import PostgresRAGEngine

from .admin import setup_admin
from .auth import create_demo_user, get_current_user, verify_token
from .database import get_db
from .models import (
    ApiEmbedding,
    ApiToken,
    ChatMessage,
    ChatSession,
)
from .models import PromptTemplate as DBPromptTemplate
from .models import (
    SwaggerSpec,
    User,
)
from .prompts import router as prompts_router
from .queue_manager import queue_manager
from .tokens import router as tokens_router
from .users import router as users_router

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="AI Swagger Bot API",
    description="API –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è–º–∏ —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API –∑–∞–ø–∏—Ç—ñ–≤",
    version="1.0.0",
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –≤–∫–∞–∂—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥–æ–º–µ–Ω–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
admin = setup_admin(app)

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏
app.include_router(prompts_router)
app.include_router(users_router)
app.include_router(tokens_router)

# Security
security = HTTPBearer()


# –ú–æ–¥–µ–ª—ñ Pydantic
class UserRequest(BaseModel):
    message: str
    user_id: Optional[str] = None


class ChatResponse(BaseModel):
    response: str
    user_id: str
    timestamp: datetime
    swagger_id: Optional[str] = None


class SwaggerTokenData(BaseModel):
    token_name: str
    token_value: str
    token_type: str = "api_key"


class SwaggerAuthData(BaseModel):
    jwt_token: Optional[str] = None  # JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ
    api_tokens: Optional[List[SwaggerTokenData]] = []  # –î–æ–¥–∞—Ç–∫–æ–≤—ñ API —Ç–æ–∫–µ–Ω–∏


class SwaggerUploadResponse(BaseModel):
    swagger_id: str
    message: str
    endpoints_count: int
    requires_tokens: bool = False
    token_requirements: List[str] = []
    created_tokens: List[str] = []
    task_id: Optional[str] = None


class EmbeddingsResponse(BaseModel):
    embeddings_count: int
    user_id: str
    swagger_spec_id: str
    message: str


class TaskStatusResponse(BaseModel):
    task_id: str
    status: str
    progress: int
    created_at: str
    started_at: Optional[str] = None
    completed_at: Optional[str] = None
    error_message: Optional[str] = None


class UserTasksResponse(BaseModel):
    tasks: List[TaskStatusResponse]


def get_user_session(db: Session, user_id: str) -> ChatSession:
    """–û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î —Å–µ—Å—ñ—é —á–∞—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    logger.info(f"üîç –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    # –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ —Å–µ—Å—ñ—ó
    cleanup_old_sessions(db, user_id)

    session = (
        db.query(ChatSession)
        .filter(ChatSession.user_id == user_id, ChatSession.is_active == True)
        .first()
    )

    if session:
        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é: {session.id} (—Å—Ç–≤–æ—Ä–µ–Ω–∞: {session.created_at})")
        return session

    # –Ø–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —à—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—É
    last_session = (
        db.query(ChatSession)
        .filter(ChatSession.user_id == user_id)
        .order_by(ChatSession.created_at.desc())
        .first()
    )

    if last_session:
        logger.warning(f"‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –∞–ª–µ —î –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞: {last_session.id}")
        logger.warning(f"   –û—Å—Ç–∞–Ω–Ω—è —Å–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {last_session.created_at}")
        logger.warning(f"   –°—Ç–∞—Ç—É—Å: is_active={last_session.is_active}")

        # –ê–∫—Ç–∏–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Å–µ—Å—ñ—é –∑–∞–º—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó
        last_session.is_active = True
        last_session.updated_at = datetime.now()
        db.commit()
        db.refresh(last_session)

        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é: {last_session.id}")
        return last_session

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó
    logger.info(f"üÜï –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    session = ChatSession(
        id=str(uuid.uuid4()),
        user_id=user_id,
        session_name="Default Session",
        is_active=True,
        created_at=datetime.now(),
        updated_at=datetime.now(),
    )
    db.add(session)
    db.commit()
    db.refresh(session)

    logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é: {session.id}")
    return session


def check_swagger_token_requirements(swagger_data: dict) -> tuple[bool, List[str]]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä–µ–±—É—î Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è API —Ç–æ–∫–µ–Ω—ñ–≤.

    Args:
        swagger_data: –î–∞–Ω—ñ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

    Returns:
        Tuple (–ø–æ—Ç—Ä–µ–±—É—î —Ç–æ–∫–µ–Ω—ñ–≤, —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ —Ç–æ–∫–µ–Ω—ñ–≤)
    """
    requires_tokens = False
    token_requirements = []

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ security schemes
        security_schemes = swagger_data.get("components", {}).get("securitySchemes", {})

        for scheme_name, scheme_data in security_schemes.items():
            scheme_type = scheme_data.get("type", "")

            if scheme_type in ["apiKey", "http", "oauth2"]:
                requires_tokens = True
                token_requirements.append(scheme_name)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ security –≤–∏–º–æ–≥–∏
        global_security = swagger_data.get("security", [])
        if global_security:
            requires_tokens = True
            for security_req in global_security:
                for req_name in security_req.keys():
                    if req_name not in token_requirements:
                        token_requirements.append(req_name)

        return requires_tokens, token_requirements

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–º–æ–≥ —Ç–æ–∫–µ–Ω—ñ–≤: {e}")
        return False, []


def create_auth_tokens_for_swagger(
    db: Session, user_id: str, swagger_spec_id: str, auth_data: SwaggerAuthData
) -> List[str]:
    """
    –°—Ç–≤–æ—Ä—é—î —Ç–æ–∫–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.

    Args:
        db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        swagger_spec_id: ID Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        auth_data: –î–∞–Ω—ñ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
    """
    created_tokens = []

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ JWT —Ç–æ–∫–µ–Ω, —è–∫—â–æ –Ω–∞–¥–∞–Ω–æ
        if auth_data.jwt_token:
            jwt_token = ApiToken(
                id=str(uuid.uuid4()),
                user_id=user_id,
                swagger_spec_id=swagger_spec_id,
                token_name="jwt_auth",
                token_value=auth_data.jwt_token,
                token_type="jwt",
                is_active=True,
                created_at=datetime.now(),
                updated_at=datetime.now(),
            )

            db.add(jwt_token)
            created_tokens.append("jwt_auth")
            logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ API —Ç–æ–∫–µ–Ω–∏
        for token_data in auth_data.api_tokens or []:
            token = ApiToken(
                id=str(uuid.uuid4()),
                user_id=user_id,
                swagger_spec_id=swagger_spec_id,
                token_name=token_data.token_name,
                token_value=token_data.token_value,
                token_type=token_data.token_type,
                is_active=True,
                created_at=datetime.now(),
                updated_at=datetime.now(),
            )

            db.add(token)
            created_tokens.append(token_data.token_name)
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ API —Ç–æ–∫–µ–Ω: {token_data.token_name}")

        if created_tokens:
            db.commit()
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(created_tokens)} —Ç–æ–∫–µ–Ω—ñ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")

        return created_tokens

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
        db.rollback()
        return []


def cleanup_old_sessions(db: Session, user_id: str, keep_last: int = 5):
    """–û—á–∏—â–∞—î —Å—Ç–∞—Ä—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–∞–ª–∏—à–∞—é—á–∏ –æ—Å—Ç–∞–Ω–Ω—ñ N."""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        inactive_sessions = (
            db.query(ChatSession)
            .filter(ChatSession.user_id == user_id, ChatSession.is_active == False)
            .order_by(ChatSession.created_at.desc())
            .all()
        )

        # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ N —Å–µ—Å—ñ–π
        sessions_to_delete = (
            inactive_sessions[keep_last:] if len(inactive_sessions) > keep_last else []
        )

        if sessions_to_delete:
            logger.info(
                f"üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ {len(sessions_to_delete)} —Å—Ç–∞—Ä–∏—Ö —Å–µ—Å—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}"
            )

            for session in sessions_to_delete:
                # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                db.query(ChatMessage).filter(ChatMessage.chat_session_id == session.id).delete()

                # –ü–æ—Ç—ñ–º –≤–∏–¥–∞–ª—è—î–º–æ —Å–µ—Å—ñ—é
                db.delete(session)

            db.commit()
            logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {len(sessions_to_delete)} —Å—Ç–∞—Ä–∏—Ö —Å–µ—Å—ñ–π")

        return len(sessions_to_delete)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π: {e}")
        db.rollback()
        return 0


def load_base_prompts_from_yaml() -> List[Dict[str, Any]]:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑ YAML —Ñ–∞–π–ª—É.

    Returns:
        –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    """
    prompts = []

    try:
        # –®–ª—è—Ö –¥–æ YAML —Ñ–∞–π–ª—É –∑ –ø—Ä–æ–º–ø—Ç–∞–º–∏
        yaml_path = Path("prompts/base_prompts.yaml")

        if not yaml_path.exists():
            logger.warning("‚ö†Ô∏è –§–∞–π–ª prompts/base_prompts.yaml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return prompts

        with open(yaml_path, "r", encoding="utf-8") as file:
            yaml_data = yaml.safe_load(file)

        # –û–±—Ä–æ–±–ª—è—î–º–æ –ø—Ä–æ–º–ø—Ç–∏ –∑ —Å–µ–∫—Ü—ñ—ó prompts
        prompts_data = yaml_data.get("prompts", {})

        for prompt_id, prompt_data in prompts_data.items():
            prompt = {
                "id": str(uuid.uuid4()),
                "name": prompt_data.get("name", ""),
                "description": prompt_data.get("description", ""),
                "template": prompt_data.get("template", ""),
                "category": prompt_data.get("category", "general"),
                "tags": prompt_data.get("tags", []),
                "is_public": True,
                "is_active": True,
                "usage_count": 0,
                "success_rate": 0,
                "created_at": datetime.now(),
                "updated_at": datetime.now(),
                "source": "yaml_base",
            }
            prompts.append(prompt)

        logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(prompts)} –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤ –∑ YAML")
        return prompts

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤: {e}")
        return prompts


def create_user_with_base_prompts(user_data: Dict[str, Any], db: Session) -> User:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–ª—è –Ω—å–æ–≥–æ –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏.

    Args:
        user_data: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

    Returns:
        –°—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    """
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = User(**user_data)
        db.add(user)
        db.flush()  # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏
        base_prompts = load_base_prompts_from_yaml()

        for prompt_data in base_prompts:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_prompt = DBPromptTemplate(
                id=str(uuid.uuid4()),
                user_id=user.id,  # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                name=prompt_data["name"],
                description=prompt_data["description"],
                template=prompt_data["template"],
                category=prompt_data["category"],
                tags=prompt_data["tags"],
                is_public=False,  # –ü—Ä–æ–º–ø—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –ø—É–±–ª—ñ—á–Ω—ñ
                is_active=True,
                usage_count=0,
                success_rate=0,
                created_at=datetime.now(),
                updated_at=datetime.now(),
            )
            db.add(user_prompt)

        db.commit()
        logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id} –∑ {len(base_prompts)} –±–∞–∑–æ–≤–∏–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏")

        return user

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø—Ä–æ–º–ø—Ç–∞–º–∏: {e}")
        db.rollback()
        raise


@app.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—É."""
    try:
        from api.database import get_db

        db = next(get_db())

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users_count = db.query(User).filter(User.is_active == True).count()
        swagger_specs_count = db.query(SwaggerSpec).filter(SwaggerSpec.is_active == True).count()

        return {
            "status": "healthy",
            "timestamp": datetime.now(),
            "active_users": users_count,
            "swagger_specs_count": swagger_specs_count,
        }
    except Exception as e:
        logger.error(f"Health check error: {e}")
        return {"status": "error", "timestamp": datetime.now(), "error": str(e)}


@app.post("/upload-swagger", response_model=SwaggerUploadResponse)
async def upload_swagger(
    file: UploadFile = File(...),
    jwt_token: Optional[str] = Form(None),  # JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    api_tokens: Optional[str] = Form(None),  # JSON string –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ API —Ç–æ–∫–µ–Ω–∞–º–∏
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db),
):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó."""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
        if not file.filename.endswith(".json"):
            raise HTTPException(status_code=400, detail="–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ JSON —Ñ–∞–π–ª–∏")

        # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª
        content = await file.read()
        swagger_data = json.loads(content.decode("utf-8"))

        # –ü–∞—Ä—Å–∏–º–æ Swagger
        parser = EnhancedSwaggerParser()
        parsed_data = parser.parse_swagger_spec(swagger_data)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–º–æ–≥–∏ —Ç–æ–∫–µ–Ω—ñ–≤
        requires_tokens, token_requirements = check_swagger_token_requirements(swagger_data)

        # –ì–µ–Ω–µ—Ä—É—î–º–æ ID
        swagger_id = str(uuid.uuid4())

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        swagger_spec = SwaggerSpec(
            id=swagger_id,
            user_id=current_user.id,  # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            filename=file.filename,
            original_data=swagger_data,
            parsed_data=parsed_data,
            endpoints_count=len(parsed_data.get("endpoints", [])),
            is_active=True,
            created_at=datetime.now(),
            updated_at=datetime.now(),
        )
        db.add(swagger_spec)

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        session = get_user_session(db, current_user.id)
        session.swagger_spec_id = swagger_id
        db.commit()

        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        created_tokens = []
        if jwt_token or api_tokens:
            try:
                # –ü–∞—Ä—Å–∏–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ API —Ç–æ–∫–µ–Ω–∏
                api_tokens_list = []
                if api_tokens:
                    api_tokens_data = json.loads(api_tokens)
                    api_tokens_list = [SwaggerTokenData(**token) for token in api_tokens_data]

                # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                auth_data = SwaggerAuthData(jwt_token=jwt_token, api_tokens=api_tokens_list)

                created_tokens = create_auth_tokens_for_swagger(
                    db, current_user.id, swagger_id, auth_data
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ —Ç–æ–∫–µ–Ω—ñ–≤

        # –î–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings –≤ —á–µ—Ä–≥—É
        task_id = queue_manager.add_task(current_user.id, swagger_id, swagger_data)
        logger.info(f"üìã –î–æ–¥–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings: {task_id}")

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message = "Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. Embeddings —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –≤ —Ñ–æ–Ω—ñ."
        if created_tokens:
            message += f" –°—Ç–≤–æ—Ä–µ–Ω–æ {len(created_tokens)} —Ç–æ–∫–µ–Ω—ñ–≤."

        return SwaggerUploadResponse(
            swagger_id=swagger_id,
            message=message,
            endpoints_count=len(parsed_data.get("endpoints", [])),
            requires_tokens=requires_tokens,
            token_requirements=token_requirements,
            created_tokens=created_tokens,
            task_id=task_id,
        )

    except Exception as e:
        logger.error(f"Error uploading swagger: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@app.post("/chat", response_model=ChatResponse)
async def chat(
    request: UserRequest,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db),
):
    """–ß–∞—Ç –∑ AI –∞–≥–µ–Ω—Ç–æ–º."""
    try:
        session = get_user_session(db, current_user.id)

        if not session.swagger_spec_id:
            raise HTTPException(status_code=400, detail="–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é")

        # –û—Ç—Ä–∏–º—É—î–º–æ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
        swagger_spec = (
            db.query(SwaggerSpec)
            .filter(
                SwaggerSpec.id == session.swagger_spec_id, SwaggerSpec.user_id == current_user.id
            )
            .first()
        )
        if not swagger_spec:
            raise HTTPException(status_code=404, detail="Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∞–∫—Ç–∏–≤–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –¥–ª—è —Ü—ñ—î—ó —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        active_tokens = (
            db.query(ApiToken)
            .filter(
                ApiToken.user_id == current_user.id,
                ApiToken.swagger_spec_id == session.swagger_spec_id,
                ApiToken.is_active == True,
            )
            .all()
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω—ñ–≤
        from src.token_manager import get_token_manager

        token_manager = get_token_manager()

        expired_tokens = []
        for token in active_tokens:
            if token_manager.is_token_expired(token.expires_at):
                token.is_active = False
                expired_tokens.append(token.token_name)

        if expired_tokens:
            db.commit()
            raise HTTPException(
                status_code=400,
                detail=f"–ù–∞—Å—Ç—É–ø–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è: {', '.join(expired_tokens)}. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–Ω–æ–≤—ñ—Ç—å —ó—Ö.",
            )

        # –°—Ç–≤–æ—Ä—é—î–º–æ RAG engine –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        rag_engine = PostgresRAGEngine(
            user_id=current_user.id, swagger_spec_id=session.swagger_spec_id
        )

        # –°—Ç–≤–æ—Ä—é—î–º–æ API –∞–≥–µ–Ω—Ç–∞ –∑ —Ç–∏–º—á–∞—Å–æ–≤–∏–º —Ñ–∞–π–ª–æ–º
        import os
        import tempfile

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ Swagger
        with tempfile.NamedTemporaryFile(mode="w", suffix=".json", delete=False) as temp_file:
            temp_file.write(json.dumps(swagger_spec.original_data))
            temp_file_path = temp_file.name

        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ API –∞–≥–µ–Ω—Ç–∞ –∑ —Ç–∏–º—á–∞—Å–æ–≤–∏–º —Ñ–∞–π–ª–æ–º
            agent = InteractiveSwaggerAgent(
                temp_file_path,
                enable_api_calls=True,  # –£–≤—ñ–º–∫–Ω—É—Ç–∏ API –≤–∏–∫–ª–∏–∫–∏
                user_id=current_user.id,
                swagger_spec_id=session.swagger_spec_id,
            )

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ RAG –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            similar_endpoints = rag_engine.search_similar_endpoints(request.message, limit=3)

            # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ –∑–∞–ø–∏—Ç—É
            context = ""
            if similar_endpoints:
                context = "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ endpoints:\n"
                for endpoint in similar_endpoints:
                    context += f"- {endpoint['method']} {endpoint['endpoint_path']}: {endpoint['description']}\n"

            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            if context:
                enhanced_message = f"{request.message}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"
            else:
                enhanced_message = request.message

            response = agent.process_query(enhanced_message)

        finally:
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç
        chat_message = ChatMessage(
            id=str(uuid.uuid4()),
            chat_session_id=session.id,
            role="user",
            content=request.message,
            created_at=datetime.now(),
        )
        db.add(chat_message)

        assistant_message = ChatMessage(
            id=str(uuid.uuid4()),
            chat_session_id=session.id,
            role="assistant",
            content=response,
            created_at=datetime.now(),
        )
        db.add(assistant_message)
        db.commit()

        return ChatResponse(
            response=response,
            user_id=current_user.id,
            timestamp=datetime.now(),
            swagger_id=session.swagger_spec_id,
        )

    except Exception as e:
        logger.error(f"Error in chat: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@app.get("/chat-history")
async def get_chat_history(
    current_user: User = Depends(get_current_user), db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    try:
        session = get_user_session(db, current_user.id)

        messages = (
            db.query(ChatMessage)
            .filter(ChatMessage.chat_session_id == session.id)
            .order_by(ChatMessage.created_at.asc())
            .all()
        )

        return [
            {"id": msg.id, "role": msg.role, "content": msg.content, "created_at": msg.created_at}
            for msg in messages
        ]
    except Exception as e:
        logger.error(f"Error getting chat history: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@app.get("/swagger-specs")
async def get_swagger_specs(
    current_user: User = Depends(get_current_user), db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    specs = (
        db.query(SwaggerSpec)
        .filter(SwaggerSpec.user_id == current_user.id, SwaggerSpec.is_active == True)
        .all()
    )
    return [
        {"id": spec.id, "filename": spec.filename, "created_at": spec.created_at} for spec in specs
    ]


@app.get("/embeddings/{swagger_spec_id}")
async def get_embeddings(
    swagger_spec_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db),
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è embeddings –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–ª–µ–∂–∏—Ç—å Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        swagger_spec = (
            db.query(SwaggerSpec)
            .filter(SwaggerSpec.id == swagger_spec_id, SwaggerSpec.user_id == current_user.id)
            .first()
        )

        if not swagger_spec:
            raise HTTPException(status_code=404, detail="Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

        # –û—Ç—Ä–∏–º—É—î–º–æ embeddings –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        embeddings = (
            db.query(ApiEmbedding)
            .filter(
                ApiEmbedding.user_id == current_user.id,
                ApiEmbedding.swagger_spec_id == swagger_spec_id,
            )
            .all()
        )

        return {
            "embeddings_count": len(embeddings),
            "user_id": current_user.id,
            "swagger_spec_id": swagger_spec_id,
            "message": f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(embeddings)} embeddings",
        }

    except Exception as e:
        logger.error(f"Error getting embeddings: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@app.delete("/embeddings/{swagger_spec_id}")
async def delete_embeddings(
    swagger_spec_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db),
):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è embeddings –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–ª–µ–∂–∏—Ç—å Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        swagger_spec = (
            db.query(SwaggerSpec)
            .filter(SwaggerSpec.id == swagger_spec_id, SwaggerSpec.user_id == current_user.id)
            .first()
        )

        if not swagger_spec:
            raise HTTPException(status_code=404, detail="Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

        # –í–∏–¥–∞–ª—è—î–º–æ embeddings —á–µ—Ä–µ–∑ RAG engine
        rag_engine = PostgresRAGEngine(user_id=current_user.id, swagger_spec_id=swagger_spec_id)

        success = rag_engine.delete_user_embeddings()

        if success:
            return {"message": "Embeddings —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ"}
        else:
            raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è embeddings")

    except Exception as e:
        logger.error(f"Error deleting embeddings: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@app.get("/statistics")
async def get_statistics(
    current_user: User = Depends(get_current_user), db: Session = Depends(get_db)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ–π
        swagger_specs_count = (
            db.query(SwaggerSpec)
            .filter(SwaggerSpec.user_id == current_user.id, SwaggerSpec.is_active == True)
            .count()
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ embeddings
        embeddings_count = (
            db.query(ApiEmbedding).filter(ApiEmbedding.user_id == current_user.id).count()
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        messages_count = (
            db.query(ChatMessage)
            .join(ChatSession)
            .filter(ChatSession.user_id == current_user.id)
            .count()
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤
        tokens_count = db.query(ApiToken).filter(ApiToken.user_id == current_user.id).count()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–∫—ñ–Ω—á–µ–Ω—ñ —Ç–æ–∫–µ–Ω–∏
        from src.token_manager import get_token_manager

        token_manager = get_token_manager()
        expired_tokens = (
            db.query(ApiToken)
            .filter(ApiToken.user_id == current_user.id, ApiToken.is_active == True)
            .all()
        )

        expired_count = 0
        for token in expired_tokens:
            if token_manager.is_token_expired(token.expires_at):
                token.is_active = False
                expired_count += 1

        if expired_count > 0:
            db.commit()

        return {
            "user_id": current_user.id,
            "swagger_specs_count": swagger_specs_count,
            "embeddings_count": embeddings_count,
            "messages_count": messages_count,
            "tokens_count": tokens_count,
            "expired_tokens_count": expired_count,
        }

    except Exception as e:
        logger.error(f"Error getting statistics: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@app.get("/debug/sessions")
async def debug_user_sessions(
    current_user: User = Depends(get_current_user), db: Session = Depends(get_db)
):
    """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        sessions = (
            db.query(ChatSession)
            .filter(ChatSession.user_id == current_user.id)
            .order_by(ChatSession.created_at.desc())
            .all()
        )

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å–µ—Å—ñ—ó
        sessions_info = []
        for session in sessions:
            messages_count = (
                db.query(ChatMessage).filter(ChatMessage.chat_session_id == session.id).count()
            )

            sessions_info.append(
                {
                    "session_id": session.id,
                    "session_name": session.session_name,
                    "is_active": session.is_active,
                    "created_at": session.created_at,
                    "updated_at": session.updated_at,
                    "swagger_spec_id": session.swagger_spec_id,
                    "messages_count": messages_count,
                }
            )

        return {
            "user_id": current_user.id,
            "total_sessions": len(sessions),
            "active_sessions": len([s for s in sessions if s.is_active]),
            "sessions": sessions_info,
        }

    except Exception as e:
        logger.error(f"Error in debug_sessions: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@app.get("/tasks/{task_id}", response_model=TaskStatusResponse)
async def get_task_status(
    task_id: str,
    current_user: User = Depends(get_current_user),
):
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings"""
    try:
        task_status = queue_manager.get_task_status(task_id)

        if not task_status:
            raise HTTPException(status_code=404, detail="–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        return TaskStatusResponse(**task_status)

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting task status: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@app.get("/tasks", response_model=UserTasksResponse)
async def get_user_tasks(
    current_user: User = Depends(get_current_user),
):
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user_tasks = queue_manager.get_user_tasks(current_user.id)

        return UserTasksResponse(tasks=[TaskStatusResponse(**task) for task in user_tasks])

    except Exception as e:
        logger.error(f"Error getting user tasks: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@app.post("/tasks/cleanup")
async def cleanup_old_tasks(
    current_user: User = Depends(get_current_user),
):
    """–û—á–∏—â–∞—î —Å—Ç–∞—Ä—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"""
    try:
        queue_manager.cleanup_old_tasks()
        return {"message": "–°—Ç–∞—Ä—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–æ"}

    except Exception as e:
        logger.error(f"Error cleaning up tasks: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
