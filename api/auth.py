"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
"""

import uuid
from datetime import datetime, timedelta
from typing import Optional

from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer
from jose import JWTError, jwt
from passlib.context import CryptContext
from sqlalchemy.orm import Session

from src.config import Config

from .database import get_db
from .models import PromptTemplate, User, UserCreate


def load_base_prompts_for_user(db: Session, user_id: str) -> bool:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ YAML —Ñ–∞–π–ª–∞"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
        import os
        from pathlib import Path

        import yaml

        # –®–ª—è—Ö –¥–æ YAML —Ñ–∞–π–ª—É –∑ –ø—Ä–æ–º–ø—Ç–∞–º–∏
        yaml_path = Path("prompts/base_prompts.yaml")

        if not yaml_path.exists():
            print("‚ö†Ô∏è –§–∞–π–ª prompts/base_prompts.yaml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False

        with open(yaml_path, "r", encoding="utf-8") as file:
            yaml_data = yaml.safe_load(file)

        # –û–±—Ä–æ–±–ª—è—î–º–æ –ø—Ä–æ–º–ø—Ç–∏ –∑ —Å–µ–∫—Ü—ñ—ó prompts
        prompts_data = yaml_data.get("prompts", {})
        base_prompts = []

        for prompt_id, prompt_data in prompts_data.items():
            prompt = {
                "name": prompt_data.get("name", ""),
                "description": prompt_data.get("description", ""),
                "template": prompt_data.get("template", ""),
                "category": prompt_data.get("category", "general"),
            }
            base_prompts.append(prompt)

        print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(base_prompts)} –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤")

        for i, prompt_data in enumerate(base_prompts):
            print(f"üìù –°—Ç–≤–æ—Ä—é—é –ø—Ä–æ–º–ø—Ç {i+1}/{len(base_prompts)}: {prompt_data['name']}")
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_prompt = PromptTemplate(
                id=str(uuid.uuid4()),
                user_id=user_id,  # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                name=prompt_data["name"],
                description=prompt_data["description"],
                template=prompt_data["template"],
                category=prompt_data["category"],
                is_public=False,  # –ü—Ä–æ–º–ø—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –ø—É–±–ª—ñ—á–Ω—ñ
                is_active=True,
                usage_count=0,
                success_rate=0,
                created_at=datetime.now(),
                updated_at=datetime.now(),
            )
            db.add(user_prompt)

        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(base_prompts)} –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        return True

    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤: {e}")
        import traceback

        traceback.print_exc()
        return False


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
config = Config()
security = HTTPBearer()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–∞—Ä–æ–ª—å"""
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password: str) -> str:
    """–•–µ—à—É—î –ø–∞—Ä–æ–ª—å"""
    return pwd_context.hash(password)


def create_user_token(user_id: str, user_name: str = None, user_email: str = None) -> str:
    """–°—Ç–≤–æ—Ä—é—î JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    payload = {
        "sub": user_id,
        "name": user_name or f"User {user_id}",
        "email": user_email or f"{user_id}@demo.com",
        "iat": datetime.utcnow(),
        "exp": datetime.utcnow() + timedelta(hours=24),
    }
    return jwt.encode(payload, config.JWT_SECRET_KEY, algorithm="HS256")


def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)) -> str:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞"""
    try:
        payload = jwt.decode(credentials.credentials, config.JWT_SECRET_KEY, algorithms=["HS256"])
        user_id = payload.get("sub")
        if user_id is None:
            raise HTTPException(status_code=401, detail="Invalid token")
        return user_id
    except JWTError:
        raise HTTPException(status_code=401, detail="Invalid token")


def get_current_user(user_id: str = Depends(verify_token), db: Session = Depends(get_db)) -> User:
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    if not user.is_active:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π")
    return user


def create_user(db: Session, user_create: UserCreate) -> User:
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–æ–≤–∏–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email
    existing_user = db.query(User).filter(User.email == user_create.email).first()
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î"
        )

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º username
    existing_user = db.query(User).filter(User.username == user_create.username).first()
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º username –≤–∂–µ —ñ—Å–Ω—É—î"
        )

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = User(
        id=str(uuid.uuid4()),
        email=user_create.email,
        username=user_create.username,
        hashed_password=get_password_hash(user_create.password),
        is_active=True,
    )

    db.add(user)
    db.flush()  # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–µ–∑ –∫–æ–º—ñ—Ç—É
    db.refresh(user)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    print(f"üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}")
    load_base_prompts_for_user(db, user.id)

    # –ö–æ–º—ñ—Ç—É—î–º–æ –≤—Å—ñ –∑–º—ñ–Ω–∏
    db.commit()
    db.refresh(user)

    return user


def authenticate_user(db: Session, email: str, password: str) -> Optional[User]:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = db.query(User).filter(User.email == email).first()
    if not user:
        return None
    if not verify_password(password, user.hashed_password):
        return None
    return user


def create_demo_user(db: Session) -> dict:
    """–°—Ç–≤–æ—Ä—é—î –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–æ–≤–∏–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
    user_id = f"demo_user_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    user = User(
        id=user_id,
        email=f"{user_id}@demo.com",
        username=user_id,
        hashed_password=get_password_hash("demo_password"),
        is_active=True,
    )

    db.add(user)
    db.flush()  # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–µ–∑ –∫–æ–º—ñ—Ç—É
    db.refresh(user)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    print(f"üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}")
    load_base_prompts_for_user(db, user.id)

    # –ö–æ–º—ñ—Ç—É—î–º–æ –≤—Å—ñ –∑–º—ñ–Ω–∏
    db.commit()

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–∫–µ–Ω
    token = create_user_token(user_id=user_id, user_name="Demo User", user_email=user.email)

    return {
        "user_id": user_id,
        "token": token,
        "message": "–î–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –∑ –±–∞–∑–æ–≤–∏–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏",
        "expires_in": "24 hours",
    }
