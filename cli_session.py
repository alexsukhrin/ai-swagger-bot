#!/usr/bin/env python3
"""
CLI —Ç–µ—Å—Ç–µ—Ä –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
–î–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Ç–æ–∫–µ–Ω–∞ –º—ñ–∂ –≤–∏–∫–ª–∏–∫–∞–º–∏
"""

import json
import os
import sys

import requests
from cli_tester import APITester


class SessionCLI:
    """CLI —Ç–µ—Å—Ç–µ—Ä –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Å—Ç–∞–Ω—É"""

    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session_file = ".cli_session.json"
        self.tester = APITester(base_url)
        self.load_session()

    def load_session(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–µ—Å—ñ—é –∑ —Ñ–∞–π–ª—É"""
        if os.path.exists(self.session_file):
            try:
                with open(self.session_file, "r") as f:
                    session_data = json.load(f)
                    self.tester.current_user = session_data.get("user")
                    self.tester.current_token = session_data.get("token")
                    print(
                        f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å–µ—Å—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {self.tester.current_user.get('email') if self.tester.current_user else '–ù–µ–≤—ñ–¥–æ–º–∏–π'}"
                    )
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {e}")

    def save_session(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Å–µ—Å—ñ—é –≤ —Ñ–∞–π–ª"""
        session_data = {"user": self.tester.current_user, "token": self.tester.current_token}
        try:
            with open(self.session_file, "w") as f:
                json.dump(session_data, f)
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {e}")

    def create_demo_user(self):
        """–°—Ç–≤–æ—Ä—é—î –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —Å–µ—Å—ñ—é"""
        self.tester.create_demo_user()
        if self.tester.current_token:
            self.save_session()

    def run_command(self, command, *args, **kwargs):
        """–í–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω"""
        if hasattr(self.tester, command):
            method = getattr(self.tester, command)
            if callable(method):
                result = method(*args, **kwargs)
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Å—ñ—é –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥, —è–∫—ñ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–Ω
                if command in ["create_demo_user", "upload_swagger", "create_custom_prompt"]:
                    self.save_session()
                return result
            else:
                print(f"‚ùå {command} –Ω–µ —î –º–µ—Ç–æ–¥–æ–º")
        else:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")

    def show_status(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å–µ—Å—ñ—é"""
        print("üìä –°—Ç–∞—Ç—É—Å CLI —Ç–µ—Å—Ç–µ—Ä–∞:")
        print(f"   Base URL: {self.base_url}")
        if self.tester.current_user:
            print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {self.tester.current_user.get('email', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}")
        else:
            print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: –ù–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")
        print(f"   Token: {'–¢–∞–∫' if self.tester.current_token else '–ù—ñ'}")
        print(f"   –°–µ—Å—ñ—è: {'–ó–±–µ—Ä–µ–∂–µ–Ω–∞' if os.path.exists(self.session_file) else '–ù–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞'}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª —Å–µ—Å—ñ—ó —ñ—Å–Ω—É—î
        if os.path.exists(self.session_file):
            try:
                with open(self.session_file, "r") as f:
                    session_data = json.load(f)
                    print(f"   –§–∞–π–ª —Å–µ—Å—ñ—ó: {self.session_file}")
                    print(f"   –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {os.path.getsize(self.session_file)} –±–∞–π—Ç")
            except Exception as e:
                print(f"   –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Å–µ—Å—ñ—ó: {e}")

    def clear_session(self):
        """–û—á–∏—â–∞—î —Å–µ—Å—ñ—é"""
        if os.path.exists(self.session_file):
            os.remove(self.session_file)
            print("üóëÔ∏è –°–µ—Å—ñ—è –æ—á–∏—â–µ–Ω–∞")
        self.tester.current_user = None
        self.tester.current_token = None

    def health_check(self):
        """Health check"""
        return self.run_command("health_check")

    def upload_swagger(self, file_path):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger"""
        return self.run_command("upload_swagger", file_path)

    def chat(self, message):
        """–ß–∞—Ç –∑ AI"""
        return self.run_command("chat", message)

    def get_chat_history(self):
        """–Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É"""
        return self.run_command("get_chat_history")

    def get_prompts(self, category=None, search=None):
        """–ü—Ä–æ–º–ø—Ç–∏"""
        return self.run_command("get_prompts", category, search)

    def get_prompt_categories(self):
        """–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        return self.run_command("get_prompt_categories")

    def get_prompt_statistics(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        return self.run_command("get_prompt_statistics")

    def get_swagger_specs(self):
        """Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
        return self.run_command("get_swagger_specs")

    def get_user_info(self):
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        return self.run_command("get_user_info")

    def create_custom_prompt(self, name, description, template, category):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É"""
        return self.run_command("create_custom_prompt", name, description, template, category)

    def search_prompts(self, query, category=None):
        """–ü–æ—à—É–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        return self.run_command("search_prompts", query, category)

    def get_prompt_suggestions(self, query, context=""):
        """–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        return self.run_command("get_prompt_suggestions", query, context)

    def format_prompt(self, prompt_id, **parameters):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É"""
        return self.run_command("format_prompt", prompt_id, **parameters)

    def export_prompts(self, include_custom=True):
        """–ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        return self.run_command("export_prompts", include_custom)

    def reload_prompts(self):
        """–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        return self.run_command("reload_prompts")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse

    parser = argparse.ArgumentParser(
        description="CLI —Ç–µ—Å—Ç–µ—Ä –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Å—Ç–∞–Ω—É –¥–ª—è AI Swagger Bot API"
    )
    parser.add_argument("command", help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
    parser.add_argument("--url", default="http://localhost:8000", help="Base URL API")
    parser.add_argument("--file", help="–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É (–¥–ª—è upload-swagger)")
    parser.add_argument("--message", help="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç—É")
    parser.add_argument("--category", help="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø—Ä–æ–º–ø—Ç—ñ–≤")
    parser.add_argument("--search", help="–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç")
    parser.add_argument("--query", help="–ó–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É")
    parser.add_argument("--context", help="–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π")
    parser.add_argument("--name", help="–ù–∞–∑–≤–∞ –ø—Ä–æ–º–ø—Ç—É")
    parser.add_argument("--description", help="–û–ø–∏—Å –ø—Ä–æ–º–ø—Ç—É")
    parser.add_argument("--template", help="–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç—É")
    parser.add_argument("--prompt-id", help="ID –ø—Ä–æ–º–ø—Ç—É")
    parser.add_argument("--parameters", help="–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (JSON)")
    parser.add_argument("--include-custom", action="store_true", help="–í–∫–ª—é—á–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏")
    parser.add_argument("--clear-session", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç–∏ —Å–µ—Å—ñ—é")

    args = parser.parse_args()

    cli = SessionCLI(args.url)

    try:
        if args.clear_session:
            cli.clear_session()
            return

        if args.command == "status":
            cli.show_status()

        elif args.command == "health":
            cli.health_check()

        elif args.command == "demo-user":
            cli.create_demo_user()

        elif args.command == "upload-swagger":
            if not args.file:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É: --file path/to/file.json")
                sys.exit(1)
            cli.upload_swagger(args.file)

        elif args.command == "chat":
            if not args.message:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: --message '–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'")
                sys.exit(1)
            cli.chat(args.message)

        elif args.command == "chat-history":
            cli.get_chat_history()

        elif args.command == "prompts":
            cli.get_prompts(category=args.category, search=args.search)

        elif args.command == "prompt-categories":
            cli.get_prompt_categories()

        elif args.command == "prompt-statistics":
            cli.get_prompt_statistics()

        elif args.command == "swagger-specs":
            cli.get_swagger_specs()

        elif args.command == "user-info":
            cli.get_user_info()

        elif args.command == "create-prompt":
            if not all([args.name, args.description, args.template]):
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É, –æ–ø–∏—Å —Ç–∞ —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç—É")
                sys.exit(1)
            cli.create_custom_prompt(
                args.name, args.description, args.template, args.category or "user_defined"
            )

        elif args.command == "search-prompts":
            if not args.query:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É: --query '–ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç'")
                sys.exit(1)
            cli.search_prompts(args.query, args.category)

        elif args.command == "prompt-suggestions":
            if not args.query:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π: --query '–∑–∞–ø–∏—Ç'")
                sys.exit(1)
            cli.get_prompt_suggestions(args.query, args.context or "")

        elif args.command == "format-prompt":
            if not args.prompt_id:
                print("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –ø—Ä–æ–º–ø—Ç—É: --prompt-id 'prompt_id'")
                sys.exit(1)
            parameters = {}
            if args.parameters:
                try:
                    parameters = json.loads(args.parameters)
                except json.JSONDecodeError:
                    print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤")
                    sys.exit(1)
            cli.format_prompt(args.prompt_id, **parameters)

        elif args.command == "export-prompts":
            cli.export_prompts(args.include_custom)

        elif args.command == "reload-prompts":
            cli.reload_prompts()

        else:
            print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {args.command}")
            print("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
            print("  health, demo-user, upload-swagger, chat, chat-history")
            print("  prompts, prompt-categories, prompt-statistics, swagger-specs")
            print("  user-info, create-prompt, search-prompts, prompt-suggestions")
            print("  format-prompt, export-prompts, reload-prompts, status")
            print("  --clear-session - –æ—á–∏—Å—Ç–∏—Ç–∏ —Å–µ—Å—ñ—é")
            sys.exit(1)

    except requests.exceptions.ConnectionError:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ {args.url}")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π API —Å–µ—Ä–≤–µ—Ä")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
