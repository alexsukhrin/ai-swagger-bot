#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è CLI —Ç–µ—Å—Ç–µ—Ä–∞ AI Swagger Bot API
–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
"""

import sys
import time

from cli_tester import APITester


def print_demo_header():
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("\n" + "=" * 70)
    print("ü§ñ AI SWAGGER BOT - –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø CLI –¢–ï–°–¢–ï–†–ê")
    print("=" * 70)
    print("üìã –¶–µ–π —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ CLI —Ç–µ—Å—Ç–µ—Ä–∞")
    print("üéØ –ú–µ—Ç–∞: –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ API endpoints –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞")
    print("‚ö° –ü–µ—Ä–µ–≤–∞–≥–∏: —à–≤–∏–¥–∫—ñ—Å—Ç—å, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è, –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è")
    print("=" * 70)


def demo_health_check(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è health check"""
    print("\nüè• –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: Health Check")
    print("-" * 50)
    tester.health_check()
    time.sleep(2)


def demo_demo_user(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    print("\nüë§ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    print("-" * 50)
    tester.create_demo_user()
    time.sleep(2)


def demo_prompts(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
    print("\nüìù –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –†–æ–±–æ—Ç–∞ –∑ –ø—Ä–æ–º–ø—Ç–∞–º–∏")
    print("-" * 50)

    print("1Ô∏è‚É£ –ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤:")
    tester.get_prompts()
    time.sleep(1)

    print("\n2Ô∏è‚É£ –ü—Ä–æ–º–ø—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é 'system':")
    tester.get_prompts(category="system")
    time.sleep(1)

    print("\n3Ô∏è‚É£ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤:")
    tester.get_prompt_categories()
    time.sleep(1)

    print("\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–ø—Ç—ñ–≤:")
    tester.get_prompt_statistics()
    time.sleep(1)


def demo_custom_prompt(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É"""
    print("\n‚ú® –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É")
    print("-" * 50)

    tester.create_custom_prompt(
        "–î–µ–º–æ –ø—Ä–æ–º–ø—Ç",
        "–ü—Ä–æ–º–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó CLI —Ç–µ—Å—Ç–µ—Ä–∞",
        "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ API. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç—É—î: {user_query}. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
        "user_defined",
    )
    time.sleep(2)


def demo_search_prompts(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ—à—É–∫—É –ø—Ä–æ–º–ø—Ç—ñ–≤"""
    print("\nüîç –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ü–æ—à—É–∫ –ø—Ä–æ–º–ø—Ç—ñ–≤")
    print("-" * 50)

    print("1Ô∏è‚É£ –ü–æ—à—É–∫ –∑–∞ —Å–ª–æ–≤–æ–º '—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è':")
    tester.search_prompts("—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    time.sleep(1)

    print("\n2Ô∏è‚É£ –ü–æ—à—É–∫ –∑–∞ —Å–ª–æ–≤–æ–º '—Å–∏—Å—Ç–µ–º–∞':")
    tester.search_prompts("—Å–∏—Å—Ç–µ–º–∞")
    time.sleep(1)

    print("\n3Ô∏è‚É£ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –∑–∞–ø–∏—Ç—É '–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é':")
    tester.get_prompt_suggestions("–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
    time.sleep(1)


def demo_format_prompt(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É"""
    print("\nüîß –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É")
    print("-" * 50)

    parameters = {
        "user_query": "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ endpoints",
        "context": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö API endpoints",
    }

    tester.format_prompt("system_base", **parameters)
    time.sleep(2)


def demo_export_prompts(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É –ø—Ä–æ–º–ø—Ç—ñ–≤"""
    print("\nüì§ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç—ñ–≤")
    print("-" * 50)

    tester.export_prompts(include_custom=True)
    time.sleep(2)


def demo_user_info(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    print("\nüë§ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    print("-" * 50)

    tester.get_user_info()
    time.sleep(2)


def demo_swagger_upload(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger"""
    print("\nüìÅ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Ñ–∞–π–ª—É")
    print("-" * 50)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª
    import os

    swagger_file = "examples/swagger_specs/shop_api.json"

    if os.path.exists(swagger_file):
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª: {swagger_file}")
        tester.upload_swagger(swagger_file)
    else:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {swagger_file}")
        print("üí° –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à–∏–π —à–ª—è—Ö")

    time.sleep(2)


def demo_chat(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —á–∞—Ç—É –∑ AI"""
    print("\nüí¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ß–∞—Ç –∑ AI")
    print("-" * 50)

    messages = [
        "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ endpoints",
        "–°—Ç–≤–æ—Ä–∏ —Ç–æ–≤–∞—Ä –∑ –Ω–∞–∑–≤–æ—é –¢–µ–ª–µ—Ñ–æ–Ω",
        "–ü–æ–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤",
        "–Ø–∫ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é?",
    ]

    for i, message in enumerate(messages, 1):
        print(f"\n{i}Ô∏è‚É£ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
        tester.chat(message)
        time.sleep(2)


def demo_chat_history(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É"""
    print("\nüìú –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É")
    print("-" * 50)

    tester.get_chat_history()
    time.sleep(2)


def demo_status(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ç—É—Å—É"""
    print("\nüìä –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –°—Ç–∞—Ç—É—Å")
    print("-" * 50)

    tester.show_status()
    time.sleep(2)


def demo_reload_prompts(tester):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤"""
    print("\nüîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø: –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤")
    print("-" * 50)

    tester.reload_prompts()
    time.sleep(2)


def run_full_demo():
    """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ—ó –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print_demo_header()

    tester = APITester()

    try:
        # –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        demo_health_check(tester)
        demo_demo_user(tester)

        # –†–æ–±–æ—Ç–∞ –∑ –ø—Ä–æ–º–ø—Ç–∞–º–∏
        demo_prompts(tester)
        demo_custom_prompt(tester)
        demo_search_prompts(tester)
        demo_format_prompt(tester)
        demo_export_prompts(tester)

        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        demo_user_info(tester)

        # Swagger —Ç–∞ —á–∞—Ç
        demo_swagger_upload(tester)
        demo_chat(tester)
        demo_chat_history(tester)

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        demo_status(tester)
        demo_reload_prompts(tester)

        print("\n" + "=" * 70)
        print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!")
        print("=" * 70)
        print("üéØ –©–æ –±—É–ª–æ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ:")
        print("   ‚úÖ Health Check")
        print("   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        print("   ‚úÖ –†–æ–±–æ—Ç–∞ –∑ –ø—Ä–æ–º–ø—Ç–∞–º–∏")
        print("   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤")
        print("   ‚úÖ –ü–æ—à—É–∫ —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤")
        print("   ‚úÖ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤")
        print("   ‚úÖ –ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç—ñ–≤")
        print("   ‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        print("   ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger")
        print("   ‚úÖ –ß–∞—Ç –∑ AI")
        print("   ‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É")
        print("   ‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏")
        print("   ‚úÖ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤")
        print("=" * 70)
        print("üí° –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ CLI —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è!")
        print("üîß –ö–æ–º–∞–Ω–¥–∏: python cli_tester.py --help")
        print("üéÆ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º: python interactive_cli.py")
        print("=" * 70)

    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        print("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π API —Å–µ—Ä–≤–µ—Ä")
        print("üöÄ –ó–∞–ø—É—Å—Ç—ñ—Ç—å: cd api && uvicorn main:app --reload --host 0.0.0.0 --port 8000")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è CLI —Ç–µ—Å—Ç–µ—Ä–∞ –¥–ª—è AI Swagger Bot API")
    parser.add_argument("--url", default="http://localhost:8000", help="Base URL API")
    parser.add_argument(
        "--section", help="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å–µ–∫—Ü—ñ—é (health, prompts, chat, etc.)"
    )

    args = parser.parse_args()

    try:
        if args.section:
            # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ–∫—Ü—ñ—ó
            tester = APITester(args.url)

            if args.section == "health":
                demo_health_check(tester)
            elif args.section == "prompts":
                demo_prompts(tester)
            elif args.section == "chat":
                demo_chat(tester)
            elif args.section == "user":
                demo_demo_user(tester)
                demo_user_info(tester)
            elif args.section == "swagger":
                demo_swagger_upload(tester)
            else:
                print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ —Å–µ–∫—Ü—ñ—è: {args.section}")
                print("–î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ–∫—Ü—ñ—ó: health, prompts, chat, user, swagger")
        else:
            # –ü–æ–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è
            run_full_demo()

    except KeyboardInterrupt:
        print("\n\nüëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º!")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    main()
