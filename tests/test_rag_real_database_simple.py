"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç RAG —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑ —Ä–µ–∞–ª—å–Ω–æ—é PostgreSQL –±–∞–∑–æ—é —Ç–∞ pgvector
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ psycopg2 –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
"""

import os
import time
from typing import Any, Dict, List

import psycopg2
import pytest
from psycopg2.extras import RealDictCursor

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
REAL_DB_CONFIG = {
    "host": os.getenv("POSTGRES_HOST", "localhost"),
    "port": os.getenv("POSTGRES_PORT", "5432"),
    "database": os.getenv("POSTGRES_DB", "ai_swagger_bot_test"),
    "user": os.getenv("POSTGRES_USER", "postgres"),
    "password": os.getenv("POSTGRES_PASSWORD", "password"),
}


@pytest.fixture(scope="session")
def real_database():
    """–°—Ç–≤–æ—Ä—é—î —Ä–µ–∞–ª—å–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
    print("üóÑÔ∏è –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ä–µ–∞–ª—å–Ω–æ—ó PostgreSQL –±–∞–∑–∏...")

    try:
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        conn = psycopg2.connect(**REAL_DB_CONFIG)
        cursor = conn.cursor()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ—Ä—Å—ñ—é PostgreSQL
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ PostgreSQL: {version}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ pgvector —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        cursor.execute("SELECT * FROM pg_extension WHERE extname = 'vector';")
        vector_ext = cursor.fetchone()

        if vector_ext:
            print("‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è pgvector –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è pgvector –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        cursor.close()
        conn.close()

        return REAL_DB_CONFIG

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏: {e}")
        pytest.skip(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏: {e}")


@pytest.fixture
def clean_database(real_database):
    """–û—á–∏—â–∞—î –±–∞–∑—É –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º"""
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")

    conn = psycopg2.connect(**real_database)
    cursor = conn.cursor()

    try:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        cursor.execute(
            """
            DROP TABLE IF EXISTS test_embeddings CASCADE;
            DROP TABLE IF EXISTS test_documents CASCADE;
            DROP TABLE IF EXISTS test_swagger_specs CASCADE;
        """
        )

        conn.commit()
        print("‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞")

    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")
        conn.rollback()

    finally:
        cursor.close()
        conn.close()


@pytest.fixture
def test_embeddings_data():
    """–¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è embeddings"""
    return [
        {
            "text": "API –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤",
            "metadata": {"type": "endpoint", "method": "POST", "path": "/api/categories"},
            "embedding": [0.1, 0.2, 0.3, 0.4, 0.5] * 20,  # 100-–≤–∏–º—ñ—Ä–Ω–∏–π –≤–µ–∫—Ç–æ—Ä
        },
        {
            "text": "–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
            "metadata": {"type": "endpoint", "method": "GET", "path": "/api/categories"},
            "embedding": [0.2, 0.3, 0.4, 0.5, 0.6] * 20,
        },
        {
            "text": "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
            "metadata": {"type": "endpoint", "method": "PATCH", "path": "/api/categories/{id}"},
            "embedding": [0.3, 0.4, 0.5, 0.6, 0.7] * 20,
        },
    ]


class TestRAGRealDatabaseSimple:
    """–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç RAG —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑ —Ä–µ–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""

    def test_database_connection(self, real_database):
        """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        print("üîå –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏...")

        conn = psycopg2.connect(**real_database)
        cursor = conn.cursor()

        try:
            # –¢–µ—Å—Ç –±–∞–∑–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
            cursor.execute("SELECT 1;")
            result = cursor.fetchone()
            assert result[0] == 1

            # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS test_connection (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """
            )

            # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö
            cursor.execute(
                """
                INSERT INTO test_connection (name) VALUES (%s) RETURNING id;
            """,
                ("Test Connection",),
            )

            inserted_id = cursor.fetchone()[0]
            assert inserted_id > 0

            # –¢–µ—Å—Ç —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
            cursor.execute("SELECT name FROM test_connection WHERE id = %s;", (inserted_id,))
            name = cursor.fetchone()[0]
            assert name == "Test Connection"

            # –¢–µ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
            cursor.execute("DROP TABLE test_connection;")

            conn.commit()
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏: {e}")
            conn.rollback()
            raise
        finally:
            cursor.close()
            conn.close()

    def test_pgvector_extension(self, real_database):
        """–¢–µ—Å—Ç —Ä–æ–±–æ—Ç–∏ pgvector —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è"""
        print("üî¢ –¢–µ—Å—Ç—É—î–º–æ pgvector —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è...")

        conn = psycopg2.connect(**real_database)
        cursor = conn.cursor()

        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
            cursor.execute("SELECT * FROM pg_extension WHERE extname = 'vector';")
            vector_ext = cursor.fetchone()

            if not vector_ext:
                print("‚ö†Ô∏è pgvector –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç")
                pytest.skip("pgvector —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –∑ –≤–µ–∫—Ç–æ—Ä–Ω–∏–º –ø–æ–ª–µ–º
            cursor.execute(
                """
                CREATE TABLE test_vectors (
                    id SERIAL PRIMARY KEY,
                    text_content TEXT,
                    embedding vector(100)
                );
            """
            )

            # –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –≤–µ–∫—Ç–æ—Ä–∏
            test_vectors = [
                ("API –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", [0.1, 0.2, 0.3, 0.4, 0.5] * 20),
                ("–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", [0.2, 0.3, 0.4, 0.5, 0.6] * 20),
                ("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", [0.3, 0.4, 0.5, 0.6, 0.7] * 20),
            ]

            for text, vector in test_vectors:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤ vector —Ç–∏–ø PostgreSQL
                vector_str = f"[{','.join(map(str, vector))}]"
                cursor.execute(
                    """
                    INSERT INTO test_vectors (text_content, embedding)
                    VALUES (%s, %s::vector);
                """,
                    (text, vector_str),
                )

            # –¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ—à—É–∫—É (cosine similarity)
            query_vector = test_vectors[0][1]
            query_vector_str = f"[{','.join(map(str, query_vector))}]"
            cursor.execute(
                """
                SELECT text_content, embedding <=> %s::vector as distance
                FROM test_vectors
                ORDER BY embedding <=> %s::vector
                LIMIT 2;
            """,
                (query_vector_str, query_vector_str),
            )

            results = cursor.fetchall()
            assert len(results) == 2

            # –ü–µ—Ä—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –Ω–∞–π–º–µ–Ω—à—É –≤—ñ–¥—Å—Ç–∞–Ω—å (0.0)
            assert results[0][1] == 0.0

            # –¢–µ—Å—Ç L2 –≤—ñ–¥—Å—Ç–∞–Ω—ñ
            cursor.execute(
                """
                SELECT text_content, embedding <-> %s::vector as distance
                FROM test_vectors
                ORDER BY embedding <-> %s::vector
                LIMIT 2;
            """,
                (query_vector_str, query_vector_str),
            )

            l2_results = cursor.fetchall()
            assert len(l2_results) == 2

            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
            cursor.execute("DROP TABLE test_vectors;")

            conn.commit()
            print("‚úÖ pgvector –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è pgvector: {e}")
            conn.rollback()
            raise
        finally:
            cursor.close()
            conn.close()

    def test_simple_rag_operations(self, real_database, clean_database, test_embeddings_data):
        """–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç RAG –æ–ø–µ—Ä–∞—Ü—ñ–π"""
        print("üîç –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ—Å—Ç—ñ RAG –æ–ø–µ—Ä–∞—Ü—ñ—ó...")

        conn = psycopg2.connect(**real_database)
        cursor = conn.cursor()

        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è embeddings
            cursor.execute(
                """
                CREATE TABLE test_embeddings (
                    id SERIAL PRIMARY KEY,
                    text_content TEXT NOT NULL,
                    metadata JSONB,
                    embedding vector(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """
            )

            # –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
            for doc in test_embeddings_data:
                vector_str = f"[{','.join(map(str, doc['embedding']))}]"
                cursor.execute(
                    """
                    INSERT INTO test_embeddings (text_content, metadata, embedding)
                    VALUES (%s, %s, %s::vector);
                """,
                    (doc["text"], psycopg2.extras.Json(doc["metadata"]), vector_str),
                )

            print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(test_embeddings_data)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")

            # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –ø–æ–¥—ñ–±–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
            query_embedding = test_embeddings_data[0]["embedding"]
            query_vector_str = f"[{','.join(map(str, query_embedding))}]"

            cursor.execute(
                """
                SELECT text_content, metadata, embedding <=> %s as similarity
                FROM test_embeddings
                ORDER BY embedding <=> %s
                LIMIT 3;
            """,
                (query_vector_str, query_vector_str),
            )

            results = cursor.fetchall()
            print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ–¥—ñ–±–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")

            assert len(results) > 0
            assert len(results) <= 3

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            for doc in results:
                assert len(doc) == 3  # text_content, metadata, similarity
                assert doc[2] >= 0.0  # similarity >= 0
                assert doc[2] <= 1.0  # similarity <= 1

            print("‚úÖ –ü–æ—à—É–∫ –ø–æ–¥—ñ–±–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î")

            # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –∑–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
            cursor.execute(
                """
                SELECT text_content, metadata
                FROM test_embeddings
                WHERE metadata->>'method' = 'GET';
            """
            )

            metadata_results = cursor.fetchall()
            print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(metadata_results)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏")

            assert len(metadata_results) > 0

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º–∞—é—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ
            for doc in metadata_results:
                assert doc[1]["method"] == "GET"

            print("‚úÖ –ü–æ—à—É–∫ –∑–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏ –ø—Ä–∞—Ü—é—î")

            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
            cursor.execute("DROP TABLE test_embeddings;")

            conn.commit()
            print("‚úÖ –ü—Ä–æ—Å—Ç—ñ RAG –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è RAG –æ–ø–µ—Ä–∞—Ü—ñ–π: {e}")
            conn.rollback()
            raise
        finally:
            cursor.close()
            conn.close()

    def test_performance_simple(self, real_database, clean_database, test_embeddings_data):
        """–¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø—Ä–æ—Å—Ç–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π"""
        print("‚ö° –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ—Å—Ç–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π...")

        conn = psycopg2.connect(**real_database)
        cursor = conn.cursor()

        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è embeddings
            cursor.execute(
                """
                CREATE TABLE test_embeddings (
                    id SERIAL PRIMARY KEY,
                    text_content TEXT NOT NULL,
                    metadata JSONB,
                    embedding vector(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """
            )

            # –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏
            print("üì• –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏...")

            start_time = time.time()

            for doc in test_embeddings_data:
                vector_str = f"[{','.join(map(str, doc['embedding']))}]"
                cursor.execute(
                    """
                    INSERT INTO test_embeddings (text_content, metadata, embedding)
                    VALUES (%s, %s, %s::vector);
                """,
                    (doc["text"], psycopg2.extras.Json(doc["metadata"]), vector_str),
                )

            insert_time = time.time() - start_time
            print(f"‚è±Ô∏è –í—Å—Ç–∞–≤–∫–∞ {len(test_embeddings_data)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–∞–π–Ω—è–ª–∞: {insert_time:.3f}—Å")
            print(f"üìä –®–≤–∏–¥–∫—ñ—Å—Ç—å: {len(test_embeddings_data) / insert_time:.1f} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤/—Å–µ–∫")

            # –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—É
            print("üîç –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—É...")

            start_time = time.time()

            query_embedding = test_embeddings_data[0]["embedding"]
            query_vector_str = f"[{','.join(map(str, query_embedding))}]"

            for i in range(10):
                cursor.execute(
                    """
                    SELECT text_content, embedding <=> %s as similarity
                    FROM test_embeddings
                    ORDER BY embedding <=> %s
                    LIMIT 3;
                """,
                    (query_vector_str, query_vector_str),
                )
                results = cursor.fetchall()
                assert len(results) >= 0

            search_time = time.time() - start_time
            print(f"‚è±Ô∏è 10 –ø–æ—à—É–∫—ñ–≤ –∑–∞–π–Ω—è–ª–∏: {search_time:.3f}—Å")
            print(f"üìä –®–≤–∏–¥–∫—ñ—Å—Ç—å: {10 / search_time:.1f} –ø–æ—à—É–∫—ñ–≤/—Å–µ–∫")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∏–π–Ω—è—Ç–Ω–∞
            assert insert_time < 10.0  # –í—Å—Ç–∞–≤–∫–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –∑–∞–π–º–∞—Ç–∏ –±—ñ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
            assert search_time < 5.0  # –ü–æ—à—É–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–π–º–∞—Ç–∏ –±—ñ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥

            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
            cursor.execute("DROP TABLE test_embeddings;")

            conn.commit()
            print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∏–π–Ω—è—Ç–Ω–∞")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
            conn.rollback()
            raise
        finally:
            cursor.close()
            conn.close()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    pytest.main([__file__, "-v", "-s"])
