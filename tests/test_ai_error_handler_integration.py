"""
–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó AI Error Handler –∑ ClickoneShopAgent
"""

import os
from unittest.mock import Mock, patch

import pytest

from src.ai_error_handler import AIFixSuggestion, APIError
from src.clickone_shop_agent import ClickoneAPIConfig, ClickoneShopAgent


@pytest.fixture
def agent():
    """–°—Ç–≤–æ—Ä—é—î –∞–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π API –∫–ª—é—á
    with patch.dict(os.environ, {"OPENAI_API_KEY": "test_key"}):
        agent = ClickoneShopAgent()
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π JWT —Ç–æ–∫–µ–Ω
        agent.set_jwt_token("test_jwt_token")
        return agent


@pytest.fixture
def mock_ai_response():
    """–ú–æ–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI"""
    return {
        "fixed_data": {"name": "TestCategory", "slug": "test-category"},
        "explanation": "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ –±–µ–∑ —á–∏—Å–µ–ª",
        "confidence": 0.9,
        "suggestions": [
            "–í–∏–¥–∞–ª—ñ—Ç—å —á–∏—Å–ª–∞ –∑ –Ω–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏",
        ],
    }


class TestAIErrorHandlerIntegration:
    """–¢–µ—Å—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó AI Error Handler –∑ ClickoneShopAgent"""

    def test_agent_initialization_with_ai_handler(self, agent):
        """–¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞ –∑ AI Error Handler"""
        assert hasattr(agent, "ai_error_handler")
        assert agent.ai_error_handler is not None
        print("‚úÖ AI Error Handler —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –∞–≥–µ–Ω—Ç—ñ")

    def test_validation_rules_from_ai(self, agent):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤—ñ–¥ AI"""
        # –ú–æ–∫–∞—î–º–æ AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        mock_rules = "–ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n- –ù–∞–∑–≤–∞: —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏\n- Slug: —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π"

        with patch.object(agent.ai_error_handler, "get_validation_rules", return_value=mock_rules):
            rules = agent.get_validation_rules("category")
            assert rules == mock_rules
            print("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ AI")

    def test_ai_error_analysis(self, agent):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–∫–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI"""
        error_message = "Category name must contain only letters"
        input_data = {"name": "Test123", "slug": "test-123"}

        # –ú–æ–∫–∞—î–º–æ AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        mock_ai_fix = AIFixSuggestion(
            fixed_data={"name": "Test", "slug": "test"},
            explanation="–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∏—Ç—å —á–∏—Å–ª–∞, –ø–æ—Ç—Ä—ñ–±–Ω–æ —ó—Ö –≤–∏–¥–∞–ª–∏—Ç–∏",
            confidence=0.8,
            suggestions=["–í–∏–¥–∞–ª—ñ—Ç—å —á–∏—Å–ª–∞ –∑ –Ω–∞–∑–≤–∏"],
        )

        with patch.object(agent.ai_error_handler, "analyze_api_error", return_value=mock_ai_fix):
            analysis = agent.get_ai_error_analysis(error_message, input_data)
            assert "üö® **–ü–æ–º–∏–ª–∫–∞ API**" in analysis
            assert "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∏—Ç—å —á–∏—Å–ª–∞" in analysis
            print("‚úÖ AI –∞–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∞—Ü—é—î")

    def test_retry_with_ai_fix(self, agent):
        """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º –≤—ñ–¥ AI"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–æ–º–∏–ª–∫–æ—é —Ç–∞ AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º
        from src.clickone_shop_agent import ClickoneAPIResponse

        mock_error_response = ClickoneAPIResponse(
            success=False,
            status_code=400,
            error="create category error",  # –î–æ–¥–∞—î–º–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ "create"
            data={
                "ai_fix": {
                    "fixed_data": {"name": "TestCategory"},
                    "input_data": {"name": "Test123", "slug": "test-123"},
                }
            },
        )

        # –ú–æ–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        mock_success_response = ClickoneAPIResponse(
            success=True, status_code=201, data={"id": "test-id", "name": "TestCategory"}
        )

        with patch.object(agent, "create_category", return_value=mock_success_response):
            retry_response = agent.retry_with_ai_fix(mock_error_response)
            assert retry_response.success
            assert retry_response.status_code == 201
            print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –∑ AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º —É—Å–ø—ñ—à–Ω–∞")

    def test_error_handling_in_create_category(self, agent):
        """–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑ –ø–æ–º–∏–ª–∫–æ—é
        invalid_data = {"name": "Test Category 123", "slug": "test-category-123"}  # –ú—ñ—Å—Ç–∏—Ç—å —á–∏—Å–ª–∞

        # –ú–æ–∫–∞—î–º–æ HTTP –∑–∞–ø–∏—Ç, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É
        mock_response = Mock()
        mock_response.status_code = 400
        mock_response.json.return_value = {
            "message": "Category name must contain only letters (no numbers or special characters)"
        }
        mock_response.text = (
            "Category name must contain only letters (no numbers or special characters)"
        )
        mock_response.headers = {}

        with patch.object(agent.session, "post", return_value=mock_response):
            response = agent.create_category(invalid_data)

            assert not response.success
            assert response.status_code == 400
            assert "üö® **–ü–æ–º–∏–ª–∫–∞ API**" in response.error
            assert "ai_fix" in (response.data or {})
            print("‚úÖ –ü–æ–º–∏–ª–∫–∞ API –æ–±—Ä–æ–±–ª–µ–Ω–∞ –∑ AI –∞–Ω–∞–ª—ñ–∑–æ–º")

    def test_cache_functionality(self, agent):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∫–µ—à—É –ø–æ–º–∏–ª–æ–∫"""
        # –û—á–∏—â–∞—î–º–æ –∫–µ—à –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
        agent.ai_error_handler.clear_cache()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –∫–µ—à—É
        initial_stats = agent.ai_error_handler.get_cache_stats()
        assert initial_stats["total_errors"] == 0

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–º–∏–ª–∫—É
        api_error = APIError(
            error_message="Test error",
            status_code=400,
            endpoint="/api/test",
            method="POST",
            input_data={"test": "data"},
        )

        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
        agent.ai_error_handler.analyze_api_error(api_error)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–Ω–∞ –≤ –∫–µ—à
        updated_stats = agent.ai_error_handler.get_cache_stats()
        assert updated_stats["total_errors"] > 0

        # –û—á–∏—â–∞—î–º–æ –∫–µ—à
        agent.ai_error_handler.clear_cache()
        final_stats = agent.ai_error_handler.get_cache_stats()
        assert final_stats["total_errors"] == 0

        print("‚úÖ –ö–µ—à –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")


class TestRealAPIErrorHandling:
    """–¢–µ—Å—Ç–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏–º API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó AI –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫"""

    @pytest.mark.integration
    def test_real_api_error_with_ai_fix(self):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏ API –∑ AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º"""
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞
        if not os.getenv("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY") == "test_key":
            pytest.skip("–ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ–∞–ª—å–Ω–∏–π OpenAI API –∫–ª—é—á")

        agent = ClickoneShopAgent()

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ JWT —Ç–æ–∫–µ–Ω –∑ .env
        jwt_token = os.getenv("CLICKONE_JWT_TOKEN")
        if not jwt_token:
            pytest.skip("–ü–æ—Ç—Ä—ñ–±–µ–Ω JWT —Ç–æ–∫–µ–Ω –¥–ª—è Clickone API")

        agent.set_jwt_token(jwt_token)

        # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑ –ø–æ–º–∏–ª–∫–æ—é
        invalid_data = {
            "name": "Test Category 123",  # –ú—ñ—Å—Ç–∏—Ç—å —á–∏—Å–ª–∞
            "slug": "test-category-123",
            "description": "Test category with numbers",
        }

        print("üîç –¢–µ—Å—Ç—É—î–º–æ —Ä–µ–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É API –∑ AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º...")

        # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        response = agent.create_category(invalid_data)

        if not response.success:
            print(f"‚ùå –û—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {response.error}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            if "ai_fix" in (response.data or {}):
                ai_fix = response.data["ai_fix"]
                print(f"ü§ñ AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {ai_fix}")

                # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–æ–≤—É –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
                retry_response = agent.retry_with_ai_fix(response)
                print(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏: {retry_response.success}")

                if retry_response.success:
                    print("‚úÖ AI —É—Å–ø—ñ—à–Ω–æ –≤–∏–ø—Ä–∞–≤–∏–≤ –ø–æ–º–∏–ª–∫—É!")
                else:
                    print("‚ö†Ô∏è AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ")
            else:
                print("‚ö†Ô∏è AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
        else:
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–æ)")

    @pytest.mark.integration
    def test_validation_rules_from_real_ai(self):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤—ñ–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI"""
        if not os.getenv("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY") == "test_key":
            pytest.skip("–ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ–∞–ª—å–Ω–∏–π OpenAI API –∫–ª—é—á")

        agent = ClickoneShopAgent()

        print("üìã –û—Ç—Ä–∏–º—É—é –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤—ñ–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI...")
        rules = agent.get_validation_rules("category")

        assert rules is not None
        assert len(rules) > 0
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω–æ: {rules[:100]}...")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    pytest.main([__file__, "-v", "-s"])
