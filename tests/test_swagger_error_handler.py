#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
"""

import json
import sys
import os

# –î–æ–¥–∞—î–º–æ src –¥–æ —à–ª—è—Ö—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from swagger_error_handler import SwaggerErrorHandler

def test_swagger_mismatch_detection():
    """–¢–µ—Å—Ç –≤–∏—è–≤–ª–µ–Ω–Ω—è –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó."""
    print("üîç –¢–µ—Å—Ç –≤–∏—è–≤–ª–µ–Ω–Ω—è –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
    print("=" * 60)
    
    user_query = "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
    
    swagger_endpoints = [
        {
            "url": "https://db62d2b2c3a5.ngrok-free.app/api/category/{id}",
            "method": "GET",
            "description": "Get a category by ID (Public)"
        }
    ]
    
    api_error = {
        "message": "invalid input syntax for type uuid: \"{id}\"",
        "error": "Bad Request",
        "statusCode": 400
    }
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ
    detection_prompt = SwaggerErrorHandler.get_swagger_mismatch_detection_prompt(
        user_query, swagger_endpoints, api_error
    )
    
    print("üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ:")
    print(detection_prompt)
    print()

def test_endpoint_correction():
    """–¢–µ—Å—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ endpoint."""
    print("üîß –¢–µ—Å—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ endpoint")
    print("=" * 60)
    
    user_query = "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
    
    incorrect_endpoint = {
        "url": "https://db62d2b2c3a5.ngrok-free.app/api/category/{id}",
        "method": "GET",
        "description": "Get a category by ID (Public)"
    }
    
    api_error = {
        "message": "invalid input syntax for type uuid: \"{id}\"",
        "error": "Bad Request",
        "statusCode": 400
    }
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è endpoint
    correction_prompt = SwaggerErrorHandler.get_endpoint_correction_prompt(
        user_query, incorrect_endpoint, api_error
    )
    
    print("üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è endpoint:")
    print(correction_prompt)
    print()

def test_endpoint_discovery():
    """–¢–µ—Å—Ç –ø–æ—à—É–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ endpoint."""
    print("üîç –¢–µ—Å—Ç –ø–æ—à—É–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ endpoint")
    print("=" * 60)
    
    user_query = "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
    
    available_endpoints = [
        {
            "url": "https://db62d2b2c3a5.ngrok-free.app/api/category/{id}",
            "method": "GET",
            "description": "Get a category by ID (Public)"
        },
        {
            "url": "https://db62d2b2c3a5.ngrok-free.app/api/categories",
            "method": "GET",
            "description": "Get all categories (Public)"
        },
        {
            "url": "https://db62d2b2c3a5.ngrok-free.app/api/category",
            "method": "POST",
            "description": "Create a new category (Public)"
        }
    ]
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ—à—É–∫—É endpoint
    discovery_prompt = SwaggerErrorHandler.get_endpoint_discovery_prompt(
        user_query, available_endpoints
    )
    
    print("üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ—à—É–∫—É endpoint:")
    print(discovery_prompt)
    print()

def test_user_friendly_error_messages():
    """–¢–µ—Å—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏."""
    print("üí¨ –¢–µ—Å—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏")
    print("=" * 60)
    
    user_query = "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫
    error_types = [
        "swagger_mismatch",
        "invalid_parameter", 
        "missing_endpoint",
        "wrong_method"
    ]
    
    for error_type in error_types:
        print(f"üìã –¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {error_type}")
        
        swagger_issue = "Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –º—ñ—Å—Ç–∏—Ç—å endpoint –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º {id} –∑–∞–º—ñ—Å—Ç—å endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"
        suggestion = "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ endpoint –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"
        
        error_message = SwaggerErrorHandler.get_user_friendly_error_message(
            error_type, user_query, swagger_issue, suggestion
        )
        
        print(error_message)
        print("-" * 40)

def test_common_endpoint_patterns():
    """–¢–µ—Å—Ç –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤ endpoints."""
    print("üìã –¢–µ—Å—Ç –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤ endpoints")
    print("=" * 60)
    
    patterns = SwaggerErrorHandler.get_common_endpoint_patterns()
    
    for operation, pattern_info in patterns.items():
        print(f"üîó {operation.upper()}:")
        print(f"   –ü–∞—Ç–µ—Ä–Ω: {pattern_info['pattern']}")
        print(f"   –ü—Ä–∏–∫–ª–∞–¥: {pattern_info['example']}")
        print(f"   –û–ø–∏—Å: {pattern_info['description']}")
        print(f"   –¢–∏–ø–æ–≤–∞ –ø—Ä–æ–±–ª–µ–º–∞: {pattern_info['swagger_issue']}")
        print()

def simulate_swagger_mismatch_scenario():
    """–°–∏–º—É–ª—è—Ü—ñ—è —Å—Ü–µ–Ω–∞—Ä—ñ—é –∑ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—é Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó."""
    print("üé≠ –°–∏–º—É–ª—è—Ü—ñ—è —Å—Ü–µ–Ω–∞—Ä—ñ—é –∑ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—é Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
    print("=" * 60)
    
    # –°—Ü–µ–Ω–∞—Ä—ñ–π: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    user_query = "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
    
    # Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ endpoint –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    swagger_endpoints = [
        {
            "url": "https://api.example.com/api/category/{id}",
            "method": "GET",
            "description": "Get a category by ID"
        }
    ]
    
    # API –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–º–∏–ª–∫—É
    api_error = {
        "message": "invalid input syntax for type uuid: \"{id}\"",
        "error": "Bad Request",
        "statusCode": 400
    }
    
    print("üîç –ê–Ω–∞–ª—ñ–∑ —Å–∏—Ç—É–∞—Ü—ñ—ó:")
    print(f"   –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_query}")
    print(f"   Endpoint –≤ Swagger: {swagger_endpoints[0]['url']}")
    print(f"   –ü–æ–º–∏–ª–∫–∞ API: {api_error['message']}")
    print()
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏
    detection_prompt = SwaggerErrorHandler.get_swagger_mismatch_detection_prompt(
        user_query, swagger_endpoints, api_error
    )
    
    print("üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏:")
    print(detection_prompt)
    print()
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    error_message = SwaggerErrorHandler.get_user_friendly_error_message(
        "swagger_mismatch",
        user_query,
        "Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –º—ñ—Å—Ç–∏—Ç—å endpoint –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º {id} –∑–∞–º—ñ—Å—Ç—å endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ endpoint –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"
    )
    
    print("üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    print(error_message)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")
    print("=" * 80)
    print()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ —Ç–µ—Å—Ç–∏
    test_swagger_mismatch_detection()
    test_endpoint_correction()
    test_endpoint_discovery()
    test_user_friendly_error_messages()
    test_common_endpoint_patterns()
    simulate_swagger_mismatch_scenario()
    
    print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üéØ –ü—Ä–æ–º–ø—Ç–∏ –≥–æ—Ç–æ–≤—ñ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –≤ InteractiveSwaggerAgent")

if __name__ == "__main__":
    main()
