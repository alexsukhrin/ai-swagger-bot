#!/usr/bin/env python3
"""
–¢–µ—Å—Ç JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ ngrok URL.
"""

import os
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ src
current_dir = os.path.dirname(os.path.abspath(__file__))
src_path = os.path.join(current_dir, 'src')
sys.path.insert(0, src_path)

try:
    from interactive_api_agent import InteractiveSwaggerAgent as SwaggerAgent
    print("‚úÖ –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ SwaggerAgent")
except ImportError as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    sys.exit(1)


def test_jwt_with_ngrok_url():
    """–¢–µ—Å—Ç JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ ngrok URL."""
    print("üîê –¢–ï–°–¢ JWT –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á –ó NGROK URL")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    api_key = os.getenv('OPENAI_API_KEY')
    jwt_token = os.getenv('JWT_TOKEN')
    
    if not api_key or not jwt_token:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ OPENAI_API_KEY –∞–±–æ JWT_TOKEN")
        return False
    
    print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–ª—é—á—ñ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≥–µ–Ω—Ç–∞
        agent = SwaggerAgent(
            swagger_spec_path="examples/swagger_specs/shop_api.json",
            enable_api_calls=True,
            openai_api_key=api_key,
            jwt_token=jwt_token
        )
        print("‚úÖ –ê–≥–µ–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑ —Ä—ñ–∑–Ω–∏–º–∏ URL
        test_urls = [
            {
                "name": "–õ–æ–∫–∞–ª—å–Ω–∏–π URL (localhost)",
                "url": "http://localhost:3030/api/products",
                "should_have_jwt": False
            },
            {
                "name": "Ngrok URL",
                "url": "https://your-app.ngrok-free.app/api/products", 
                "should_have_jwt": True
            },
            {
                "name": "–Ü–Ω—à–∏–π ngrok URL",
                "url": "https://test-app.ngrok-free.app/api/products",
                "should_have_jwt": True
            }
        ]
        
        print("\nüìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö URL...")
        
        for i, test_case in enumerate(test_urls, 1):
            print(f"\nüìù –¢–µ—Å—Ç {i}: {test_case['name']}")
            print(f"   URL: {test_case['url']}")
            print(f"   –û—á—ñ–∫—É—î—Ç—å—Å—è JWT: {'–¢–∞–∫' if test_case['should_have_jwt'] else '–ù—ñ'}")
            
            # –°–∏–º—É–ª—é—î–º–æ API –∑–∞–ø–∏—Ç –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º URL
            api_request = {
                "method": "POST",
                "url": test_case['url'],
                "headers": {},
                "data": {"name": "test", "price": 100}
            }
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ–¥–∞—î—Ç—å—Å—è JWT —Ç–æ–∫–µ–Ω
            if agent.jwt_token and api_request['method'] == 'POST' and 'ngrok-free.app' in api_request['url']:
                api_request['headers']['Authorization'] = f'Bearer {agent.jwt_token}'
                print("   ‚úÖ JWT —Ç–æ–∫–µ–Ω –¥–æ–¥–∞–Ω–æ")
                jwt_added = True
            else:
                print("   ‚ÑπÔ∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –¥–æ–¥–∞–Ω–æ")
                jwt_added = False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if jwt_added == test_case['should_have_jwt']:
                print("   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º")
            else:
                print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º")
        
        print("\n‚úÖ –í—Å—ñ URL —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        assert True, "JWT —Ç–µ—Å—Ç–∏ –∑ ngrok URL –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        assert False, f"JWT —Ç–µ—Å—Ç–∏ –∑ ngrok URL –Ω–µ –ø—Ä–æ–π—à–ª–∏: {e}"


def test_jwt_conditions():
    """–¢–µ—Å—Ç —É–º–æ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞."""
    print("\nüîç –¢–ï–°–¢ –£–ú–û–í –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø JWT –¢–û–ö–ï–ù–ê")
    print("=" * 60)
    
    try:
        agent = SwaggerAgent(
            swagger_spec_path="examples/swagger_specs/shop_api.json",
            enable_api_calls=False,  # –¢—ñ–ª—å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            openai_api_key=os.getenv('OPENAI_API_KEY'),
            jwt_token=os.getenv('JWT_TOKEN')
        )
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —É–º–æ–≤–∏
        test_conditions = [
            {
                "method": "GET",
                "url": "https://app.ngrok-free.app/api/products",
                "description": "GET –∑–∞–ø–∏—Ç –∑ ngrok URL",
                "should_have_jwt": False
            },
            {
                "method": "POST", 
                "url": "http://localhost:3030/api/products",
                "description": "POST –∑–∞–ø–∏—Ç –∑ localhost",
                "should_have_jwt": False
            },
            {
                "method": "POST",
                "url": "https://app.ngrok-free.app/api/products", 
                "description": "POST –∑–∞–ø–∏—Ç –∑ ngrok URL",
                "should_have_jwt": True
            },
            {
                "method": "PUT",
                "url": "https://app.ngrok-free.app/api/products/123",
                "description": "PUT –∑–∞–ø–∏—Ç –∑ ngrok URL",
                "should_have_jwt": False
            }
        ]
        
        print("üìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–º–æ–≤ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...")
        
        for i, condition in enumerate(test_conditions, 1):
            print(f"\nüìù –¢–µ—Å—Ç {i}: {condition['description']}")
            print(f"   –ú–µ—Ç–æ–¥: {condition['method']}")
            print(f"   URL: {condition['url']}")
            
            # –°–∏–º—É–ª—é—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —É–º–æ–≤
            should_add_jwt = (
                agent.jwt_token and 
                condition['method'] == 'POST' and 
                'ngrok-free.app' in condition['url']
            )
            
            print(f"   –£–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ: {'–¢–∞–∫' if should_add_jwt else '–ù—ñ'}")
            print(f"   –û—á—ñ–∫—É—î—Ç—å—Å—è JWT: {'–¢–∞–∫' if condition['should_have_jwt'] else '–ù—ñ'}")
            
            if should_add_jwt == condition['should_have_jwt']:
                print("   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π")
            else:
                print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π")
        
        print("\n‚úÖ –í—Å—ñ —É–º–æ–≤–∏ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ!")
        assert True, "JWT —É–º–æ–≤–∏ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–º–æ–≤: {e}")
        assert False, f"JWT —É–º–æ–≤–∏ –Ω–µ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ: {e}"


def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è."""
    print("üîê –¢–ï–°–¢ JWT –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á –ó NGROK URL")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if not os.getenv('OPENAI_API_KEY') or not os.getenv('JWT_TOKEN'):
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å:")
        print("   export OPENAI_API_KEY='your-key'")
        print("   export JWT_TOKEN='your-jwt-token'")
        return False
    
    print("‚úÖ –í—Å—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    test1_success = test_jwt_with_ngrok_url()
    test2_success = test_jwt_conditions()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –ü–Ü–î–°–£–ú–û–ö JWT –¢–ï–°–¢–£")
    print("=" * 60)
    
    if test1_success and test2_success:
        print("üéâ –í—Å—ñ JWT —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("‚úÖ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ")
        return True
    else:
        print("‚ùå –Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
