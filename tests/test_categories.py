#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—à—É–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.
"""

import os
import sys

from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ src
sys.path.append("src")


def test_category_search():
    """–¢–µ—Å—Ç—É—î –ø–æ—à—É–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π."""
    print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
    print("=" * 40)

    try:
        from rag_engine import RAGEngine

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ RAG engine
        rag = RAGEngine("examples/swagger_specs/shop_api.json")

        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        test_queries = [
            "category",
            "categories",
            "GET category",
            "GET /category",
            "–≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
            "–ø–æ–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
            "—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
        ]

        for query in test_queries:
            print(f"\nüîç –ü–æ—à—É–∫: '{query}'")
            results = rag.search_similar_endpoints(query, k=3)

            for i, result in enumerate(results, 1):
                metadata = result.get("metadata", {})
                method = metadata.get("method", "N/A")
                path = metadata.get("path", "N/A")
                summary = metadata.get("summary", "N/A")
                print(f"   {i}. {method} {path} - {summary}")

        print("\n‚úÖ –ü–æ—à—É–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–∞—Ü—é—î!")
        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_agent_categories():
    """–¢–µ—Å—Ç—É—î –∞–≥–µ–Ω—Ç–∞ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏."""
    print("\nü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")
    print("=" * 40)

    try:
        from interactive_api_agent import InteractiveSwaggerAgent

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–≥–µ–Ω—Ç–∞
        agent = InteractiveSwaggerAgent(
            "examples/swagger_specs/shop_api.json", enable_api_calls=False
        )

        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∑–∞–ø–∏—Ç–∏
        test_queries = [
            "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
            "–°—Ç–≤–æ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: –ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞",
            "GET –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
            "–û—Ç—Ä–∏–º–∞–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
        ]

        for query in test_queries:
            print(f"\nüìù –ó–∞–ø–∏—Ç: '{query}'")
            result = agent.process_interactive_query(query)
            response = result.get("response", "")
            print(f"ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response[:200]}...")

        print("\n‚úÖ –ê–≥–µ–Ω—Ç –ø—Ä–∞—Ü—é—î –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏!")
        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
    print("=" * 60)

    success1 = test_category_search()
    success2 = test_agent_categories()

    if success1 and success2:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        print("üí° –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –µ–º–±–µ–¥—ñ–Ω–≥—ñ–≤ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùå –Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø–æ—à—É–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
