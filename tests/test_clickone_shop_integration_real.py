"""
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ Clickone Shop API –∑ JWT —Ç–æ–∫–µ–Ω–æ–º
"""

import time
from typing import Any, Dict

import pytest

from src.clickone_shop_agent import ClickoneAPIConfig, ClickoneShopAgent

# JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π)
JWT_TOKEN = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Im5Wd1A4T04zSDRqd09tUFBvYy16ZiJ9.eyJpc3MiOiJodHRwczovL2Rldi0ycjFoYzJnaHNieXU0YTF4LnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDEwNzQwMTYwODI1MTYxODY2MTk1MyIsImF1ZCI6WyJodHRwczovL29uZWNsaWNrLWZyb250L2FwaS92MiIsImh0dHBzOi8vZGV2LTJyMWhjMmdoc2J5dTRhMXgudXMuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTc1NjA0NzcwNywiZXhwIjoxNzU2MTM0MTA3LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYXpwIjoiT0R0UVVscGRKbXRHb0xRWVk5Nk4za2wyM0lVNEprcWoifQ.kkht-NUCUEuJ_L3F5YWs68yBeuHkuNoQDLCN46gtwj_fVaXvw_j-DKmkspu_7Ce7n5nfy21AiqnC5SHW88cyQC_JDyLxJarxGes8Sn41pBH5Rrcv7AArkbdkXW9FnjyyJpHmaXR_dSguub-i8bQ7Sw_x-mPQsFLwaEMzlcsMVeK30GMRrJ7ey2OJJM6VwTix-07d3KUzNI_v7EEy-kE9d_NrMrwCfC8Mwz750c2OckuRRks4Yoy8gcoOtjvHgsXA71InLehaGo_diALfRBB4demTKKibMQGdOg63Oj8DFJJ2Bqqdo1YHklJ0aqbeXmR5ULAKb_PVP0Pizz6Kl8DI0A"


@pytest.fixture
def real_agent():
    """–°—Ç–≤–æ—Ä—é—î –∞–≥–µ–Ω—Ç–∞ –∑ —Ä–µ–∞–ª—å–Ω–∏–º JWT —Ç–æ–∫–µ–Ω–æ–º"""
    config = ClickoneAPIConfig(
        base_url="https://api.oneshop.click", api_version="1.0", timeout=30, verify_ssl=True
    )

    agent = ClickoneShopAgent(config)
    agent.set_jwt_token(JWT_TOKEN)

    return agent


@pytest.fixture
def test_category_data():
    """–¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    timestamp = int(time.time())
    return {
        "name": f"Test Category {timestamp}",
        "slug": f"test-category-{timestamp}",
        "description": f"–¢–µ—Å—Ç–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ {timestamp}",
        "isActive": True,
        "sortOrder": 1,
    }


class TestClickoneShopRealAPI:
    """–¢–µ—Å—Ç–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ Clickone Shop API"""

    def test_jwt_token_validation(self, real_agent):
        """–¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó JWT —Ç–æ–∫–µ–Ω–∞"""
        assert real_agent.jwt_token is not None
        assert real_agent.jwt_token == JWT_TOKEN
        assert "Authorization" in real_agent.session.headers
        assert real_agent.session.headers["Authorization"] == f"Bearer {JWT_TOKEN}"

    def test_get_categories_public(self, real_agent):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–ø—É–±–ª—ñ—á–Ω–∏–π endpoint)"""
        print("üîç –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")

        response = real_agent.get_categories()

        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –£—Å–ø—ñ—Ö: {response.success}")
        print(f"üìä –î–∞–Ω—ñ: {response.data}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑–∞–ø–∏—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ
        assert response.success is True
        assert response.status_code == 200
        assert response.data is not None

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö
        if isinstance(response.data, list):
            print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(response.data)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
            if len(response.data) > 0:
                category = response.data[0]
                assert "id" in category or "name" in category
        elif isinstance(response.data, dict):
            print(f"üìã –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±'—î–∫—Ç: {list(response.data.keys())}")

    def test_create_category_admin(self, real_agent, test_category_data):
        """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (admin endpoint)"""
        print(f"üî® –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {test_category_data['name']}")

        response = real_agent.create_category(test_category_data)

        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –£—Å–ø—ñ—Ö: {response.success}")
        print(f"üìä –î–∞–Ω—ñ: {response.data}")
        print(f"üìä –ü–æ–º–∏–ª–∫–∞: {response.error}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.success:
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            assert response.status_code in [200, 201]
            assert response.data is not None

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö —Ç–µ—Å—Ç—ñ–≤
            if isinstance(response.data, dict) and "id" in response.data:
                test_category_data["id"] = response.data["id"]
                print(f"üÜî ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {response.data['id']}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {response.error}")
            # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏, —Ü–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            assert response.status_code in [400, 401, 403, 500]

    def test_get_category_by_id(self, real_agent, test_category_data):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ ID"""
        if "id" not in test_category_data:
            pytest.skip("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –±—É–ª–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É —Ç–µ—Å—Ç—ñ")

        print(f"üîç –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ ID: {test_category_data['id']}")

        response = real_agent.get_category_by_id(test_category_data["id"])

        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –£—Å–ø—ñ—Ö: {response.success}")
        print(f"üìä –î–∞–Ω—ñ: {response.data}")

        if response.success:
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            assert response.status_code == 200
            assert response.data is not None
            assert response.data.get("id") == test_category_data["id"]
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: {response.error}")
            # –ú–æ–∂–ª–∏–≤–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É
            assert response.status_code in [400, 401, 403, 404, 500]

    def test_update_category_admin(self, real_agent, test_category_data):
        """–¢–µ—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (admin endpoint)"""
        if "id" not in test_category_data:
            pytest.skip("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –±—É–ª–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É —Ç–µ—Å—Ç—ñ")

        update_data = {"description": f"–û–Ω–æ–≤–ª–µ–Ω–∏–π –æ–ø–∏—Å {int(time.time())}", "isActive": True}

        print(f"‚úèÔ∏è –¢–µ—Å—Ç—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {test_category_data['id']}: {update_data}")

        response = real_agent.update_category(test_category_data["id"], update_data)

        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –£—Å–ø—ñ—Ö: {response.success}")
        print(f"üìä –î–∞–Ω—ñ: {response.data}")
        print(f"üìä –ü–æ–º–∏–ª–∫–∞: {response.error}")

        if response.success:
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            assert response.status_code == 200
            assert response.data is not None
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {response.error}")
            # –ú–æ–∂–ª–∏–≤–æ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ —ñ—Å–Ω—É—î
            assert response.status_code in [400, 401, 403, 404, 500]

    def test_delete_category_admin(self, real_agent, test_category_data):
        """–¢–µ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (admin endpoint)"""
        if "id" not in test_category_data:
            pytest.skip("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –±—É–ª–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É —Ç–µ—Å—Ç—ñ")

        print(f"üóëÔ∏è –¢–µ—Å—Ç—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {test_category_data['id']}")

        response = real_agent.delete_category(test_category_data["id"])

        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –£—Å–ø—ñ—Ö: {response.success}")
        print(f"üìä –î–∞–Ω—ñ: {response.data}")
        print(f"üìä –ü–æ–º–∏–ª–∫–∞: {response.error}")

        if response.success:
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            assert response.status_code in [200, 204]
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {response.error}")
            # –ú–æ–∂–ª–∏–≤–æ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ —ñ—Å–Ω—É—î
            assert response.status_code in [400, 401, 403, 404, 500]

    def test_user_intent_analysis(self, real_agent):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –Ω–∞–º—ñ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        print("üß† –¢–µ—Å—Ç—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ –Ω–∞–º—ñ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")

        test_queries = [
            "–°—Ç–≤–æ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞",
            "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
            "–û–Ω–æ–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é 123",
            "–í–∏–¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é 456",
        ]

        for query in test_queries:
            print(f"üîç –ê–Ω–∞–ª—ñ–∑ –∑–∞–ø–∏—Ç—É: '{query}'")
            intent = real_agent.analyze_user_intent(query)

            print(f"üìä –ù–∞–º—ñ—Ä: {intent}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–º—ñ—Ä—É
            assert "action" in intent
            assert "entity" in intent
            assert "access_level" in intent
            assert "confidence" in intent

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥—ñ–∫—É
            if "—Å—Ç–≤–æ—Ä–∏" in query.lower():
                assert intent["action"] == "create"
                assert intent["access_level"] == "admin"
            elif "–ø–æ–∫–∞–∂–∏" in query.lower():
                assert intent["action"] == "retrieve"
                assert intent["access_level"] == "public"
            elif "–æ–Ω–æ–≤–∏" in query.lower():
                assert intent["action"] == "update"
                assert intent["access_level"] == "admin"
            elif "–≤–∏–¥–∞–ª–∏" in query.lower():
                assert intent["action"] == "delete"
                assert intent["access_level"] == "admin"

    def test_process_user_queries(self, real_agent):
        """–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        print("üîÑ –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")

        # –¢–µ—Å—Ç –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
        print("üîç –¢–µ—Å—Ç –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É: '–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'")
        result = real_agent.process_user_query("–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        assert "success" in result
        assert "intent" in result
        assert result["intent"]["action"] == "retrieve"

        # –¢–µ—Å—Ç admin –∑–∞–ø–∏—Ç—É –±–µ–∑ JWT
        print("üîç –¢–µ—Å—Ç admin –∑–∞–ø–∏—Ç—É –±–µ–∑ JWT: '–°—Ç–≤–æ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–µ—Å—Ç'")
        real_agent.clear_jwt_token()

        result = real_agent.process_user_query("–°—Ç–≤–æ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–µ—Å—Ç")

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        assert result["success"] is False
        assert "action_required" in result
        assert result["action_required"] == "set_jwt_token"

        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ JWT –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö —Ç–µ—Å—Ç—ñ–≤
        real_agent.set_jwt_token(JWT_TOKEN)

    def test_api_info_retrieval(self, real_agent):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ API"""
        print("‚ÑπÔ∏è –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ API...")

        api_info = real_agent.get_api_info()

        print(f"üìä API —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {api_info}")

        assert api_info is not None
        assert "title" in api_info
        assert "version" in api_info
        assert "base_url" in api_info

        print(f"üè∑Ô∏è –ù–∞–∑–≤–∞: {api_info.get('title')}")
        print(f"üìã –í–µ—Ä—Å—ñ—è: {api_info.get('version')}")
        print(f"üåê URL: {api_info.get('base_url')}")

    def test_prompts_info_retrieval(self, real_agent):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–º–ø—Ç–∏"""
        print("üìù –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–º–ø—Ç–∏...")

        prompts_info = real_agent.get_prompts_info()

        print(f"üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–º–ø—Ç–∏: {prompts_info}")

        assert prompts_info is not None
        assert "total_categories" in prompts_info
        assert "total_prompts" in prompts_info

        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {prompts_info.get('total_categories')}")
        print(f"üìÑ –ü—Ä–æ–º–ø—Ç—ñ–≤: {prompts_info.get('total_prompts')}")

    def test_error_handling(self, real_agent):
        """–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫"""
        print("‚ö†Ô∏è –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫...")

        # –¢–µ—Å—Ç –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ endpoint
        print("üîç –¢–µ—Å—Ç –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ endpoint...")
        response = real_agent._make_request("GET", "/api/nonexistent")

        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –£—Å–ø—ñ—Ö: {response.success}")
        print(f"üìä –ü–æ–º–∏–ª–∫–∞: {response.error}")

        # –û—á—ñ–∫—É—î–º–æ –ø–æ–º–∏–ª–∫—É 404 –∞–±–æ –ø–æ–¥—ñ–±–Ω—É
        assert response.success is False
        assert response.status_code >= 400

        # –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É
        print("üîç –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É...")
        response = real_agent._make_request("INVALID", "/api/categories")

        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –£—Å–ø—ñ—Ö: {response.success}")
        print(f"üìä –ü–æ–º–∏–ª–∫–∞: {response.error}")

        assert response.success is False
        assert response.status_code == 0
        assert "–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π HTTP –º–µ—Ç–æ–¥" in response.error

    def test_jwt_token_expiry_handling(self, real_agent):
        """–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞"""
        print("‚è∞ –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞...")

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π —Ç–æ–∫–µ–Ω
        expired_token = (
            "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Im5Wd1A4T04zSDRqd09tUFBvYy16ZiJ9.expired"
        )
        real_agent.set_jwt_token(expired_token)

        print("üîç –¢–µ—Å—Ç—É—î–º–æ admin –æ–ø–µ—Ä–∞—Ü—ñ—é –∑ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º —Ç–æ–∫–µ–Ω–æ–º...")

        # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        test_data = {
            "name": "Test Expired Token",
            "slug": "test-expired-token",
            "description": "–¢–µ—Å—Ç –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ–≥–æ —Ç–æ–∫–µ–Ω–∞",
        }

        response = real_agent.create_category(test_data)

        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –£—Å–ø—ñ—Ö: {response.success}")
        print(f"üìä –ü–æ–º–∏–ª–∫–∞: {response.error}")

        # –û—á—ñ–∫—É—î–º–æ –ø–æ–º–∏–ª–∫—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        if not response.success:
            assert response.status_code in [401, 403]
            print("‚úÖ –ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è –ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π —Ç–æ–∫–µ–Ω –Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î)")

        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω
        real_agent.set_jwt_token(JWT_TOKEN)

    def test_rate_limiting_handling(self, real_agent):
        """–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ"""
        print("üö¶ –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ...")

        # –†–æ–±–∏–º–æ –∫—ñ–ª—å–∫–∞ —à–≤–∏–¥–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        print("üîç –†–æ–±–∏–º–æ –∫—ñ–ª—å–∫–∞ —à–≤–∏–¥–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤...")

        responses = []
        for i in range(5):
            print(f"üìä –ó–∞–ø–∏—Ç {i+1}/5...")
            response = real_agent.get_categories()
            responses.append(response)
            time.sleep(0.1)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        success_count = sum(1 for r in responses if r.success)
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: {success_count}/{len(responses)}")

        # –ë—ñ–ª—å—à—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω—ñ –ø—Ä–æ–π—Ç–∏ —É—Å–ø—ñ—à–Ω–æ
        assert success_count >= len(responses) * 0.8  # 80% —É—Å–ø—ñ—à–Ω–∏—Ö

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ–º–∞—î –ø–æ–º–∏–ª–æ–∫ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        rate_limit_errors = [r for r in responses if r.status_code == 429]
        if rate_limit_errors:
            print(f"‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–æ–∫ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ: {len(rate_limit_errors)}")
        else:
            print("‚úÖ –û–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ")

    def test_concurrent_requests(self, real_agent):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤"""
        print("‚ö° –¢–µ—Å—Ç—É—î–º–æ –æ–¥–Ω–æ—á–∞—Å–Ω—ñ –∑–∞–ø–∏—Ç–∏...")

        import queue
        import threading

        results_queue = queue.Queue()

        def make_request(request_id):
            """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É"""
            try:
                response = real_agent.get_categories()
                results_queue.put((request_id, response))
            except Exception as e:
                results_queue.put((request_id, f"–ü–æ–º–∏–ª–∫–∞: {e}"))

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–ª—å–∫–∞ –ø–æ—Ç–æ–∫—ñ–≤
        threads = []
        for i in range(3):
            thread = threading.Thread(target=make_request, args=(i,))
            threads.append(thread)
            thread.start()

        # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ—Ç–æ–∫—ñ–≤
        for thread in threads:
            thread.join()

        # –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        results = []
        while not results_queue.empty():
            results.append(results_queue.get())

        print(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        for request_id, result in results:
            if isinstance(result, str):
                print(f"‚ùå –ó–∞–ø–∏—Ç {request_id}: {result}")
            else:
                print(f"‚úÖ –ó–∞–ø–∏—Ç {request_id}: —Å—Ç–∞—Ç—É—Å {result.status_code}")
                assert result.success is True
                assert result.status_code == 200


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    pytest.main([__file__, "-v", "-s"])
