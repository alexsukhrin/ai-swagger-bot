#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ RAG engine.
"""

import os
import sys

from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ src
sys.path.append("src")


def test_rag_engine():
    """–¢–µ—Å—Ç—É—î RAG engine."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è RAG Engine")
    print("=" * 40)

    try:
        from rag_engine import RAGEngine

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ RAG engine
        print("1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è RAG Engine...")
        rag = RAGEngine("examples/swagger_specs/shop_api.json")
        print("‚úÖ RAG Engine —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ endpoints
        print("2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è endpoints...")
        endpoints = rag.get_all_endpoints()
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(endpoints)} endpoints")

        # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫
        print("3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É...")
        search_results = rag.search_similar_endpoints("products", k=3)
        print(f"‚úÖ –ü–æ—à—É–∫ –ø—Ä–∞—Ü—é—î: –∑–Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")

        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        for i, result in enumerate(search_results, 1):
            metadata = result.get("metadata", {})
            method = metadata.get("method", "N/A")
            path = metadata.get("path", "N/A")
            print(f"   {i}. {method} {path}")

        print("\nüéâ RAG Engine –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!")
        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    test_rag_engine()
