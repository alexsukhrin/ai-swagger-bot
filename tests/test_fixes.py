#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å –ø—Ä–æ–±–ª–µ–º –∑ Streamlit.
"""

import sys
import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ src –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

def test_swagger_agent():
    """–¢–µ—Å—Ç—É—î SwaggerAgent."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è SwaggerAgent...")
    
    try:
        from interactive_api_agent import InteractiveSwaggerAgent as SwaggerAgent
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–≥–µ–Ω—Ç–∞
        swagger_path = "examples/swagger_specs/shop_api.json"
        agent = SwaggerAgent(swagger_path, enable_api_calls=False)
        
        print("‚úÖ SwaggerAgent —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        print(f"üìä –ë–∞–∑–æ–≤–∏–π URL: {agent.base_url}")
        
        # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è endpoints
        endpoints = agent.get_available_endpoints()
        print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(endpoints)} endpoints")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É endpoints
        if endpoints:
            first_endpoint = endpoints[0]
            print(f"üìù –ü—Ä–∏–∫–ª–∞–¥ endpoint: {type(first_endpoint)}")
            if isinstance(first_endpoint, dict):
                print(f"   - –ú–∞—î –∫–ª—é—á—ñ: {list(first_endpoint.keys())}")
                if 'metadata' in first_endpoint:
                    print(f"   - –ú–µ—Ç–∞–¥–∞–Ω—ñ: {first_endpoint['metadata']}")
        
        # –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ parser
        parser = agent.parser
        print(f"‚úÖ Parser –¥–æ—Å—Ç—É–ø–Ω–∏–π: {type(parser)}")
        
        # –¢–µ—Å—Ç—É—î–º–æ –º–µ—Ç–æ–¥–∏ parser
        parser_endpoints = parser.get_endpoints()
        print(f"üìä Parser endpoints: {len(parser_endpoints)}")
        
        schemas = parser.get_schemas()
        print(f"üìã Parser —Å—Ö–µ–º–∏: {len(schemas)}")
        
        base_url = parser.get_base_url()
        print(f"üîó Parser –±–∞–∑–æ–≤–∏–π URL: {base_url}")
        
        assert True, "SwaggerAgent –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è SwaggerAgent: {e}")
        assert False, f"SwaggerAgent –Ω–µ –ø—Ä–∞—Ü—é—î: {e}"

def test_rag_engine():
    """–¢–µ—Å—Ç—É—î RAGEngine."""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è RAGEngine...")
    
    try:
        from rag_engine import RAGEngine
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ RAG engine
        swagger_path = "examples/swagger_specs/shop_api.json"
        rag_engine = RAGEngine(swagger_path)
        
        print("‚úÖ RAGEngine —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö endpoints
        all_endpoints = rag_engine.get_all_endpoints()
        print(f"üìã –í—Å—ñ endpoints: {len(all_endpoints)}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if all_endpoints:
            first_endpoint = all_endpoints[0]
            print(f"üìù –ü—Ä–∏–∫–ª–∞–¥ endpoint: {type(first_endpoint)}")
            if isinstance(first_endpoint, dict):
                print(f"   - –ú–∞—î –∫–ª—é—á—ñ: {list(first_endpoint.keys())}")
                if 'metadata' in first_endpoint:
                    print(f"   - –ú–µ—Ç–∞–¥–∞–Ω—ñ: {first_endpoint['metadata']}")
        
        assert True, "RAGEngine –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è RAGEngine: {e}")
        assert False, f"RAGEngine –Ω–µ –ø—Ä–∞—Ü—é—î: {e}"

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è."""
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
    swagger_file = "examples/swagger_specs/shop_api.json"
    if not os.path.exists(swagger_file):
        print(f"‚ùå Swagger —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {swagger_file}")
        return
    
    print(f"‚úÖ Swagger —Ñ–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ: {swagger_file}")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    test1_passed = test_swagger_agent()
    test2_passed = test_rag_engine()
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"   SwaggerAgent: {'‚úÖ' if test1_passed else '‚ùå'}")
    print(f"   RAGEngine: {'‚úÖ' if test2_passed else '‚ùå'}")
    
    if test1_passed and test2_passed:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        print("üí° –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ Streamlit –¥–æ–¥–∞—Ç–æ–∫")
    else:
        print("\n‚ö†Ô∏è –Ñ –ø—Ä–æ–±–ª–µ–º–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏")

if __name__ == "__main__":
    main()
