#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç LangChain —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ.
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ src –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

def test_langchain():
    """–¢–µ—Å—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ LangChain."""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è LangChain –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤")
    print("=" * 40)
    
    try:
        # –¢–µ—Å—Ç 1: OpenAI Embeddings
        print("1. –¢–µ—Å—Ç—É—î–º–æ OpenAI Embeddings...")
        from langchain_openai import OpenAIEmbeddings
        embeddings = OpenAIEmbeddings()
        test_text = "Hello, world!"
        vector = embeddings.embed_query(test_text)
        print(f"‚úÖ Embeddings –ø—Ä–∞—Ü—é—î (–≤–µ–∫—Ç–æ—Ä –¥–æ–≤–∂–∏–Ω–æ—é {len(vector)})")
        
        # –¢–µ—Å—Ç 2: ChatOpenAI
        print("2. –¢–µ—Å—Ç—É—î–º–æ ChatOpenAI...")
        from langchain_openai import ChatOpenAI
        from langchain.schema import HumanMessage
        
        llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)
        response = llm.invoke([HumanMessage(content="–ü—Ä–∏–≤—ñ—Ç!")])
        print(f"‚úÖ ChatOpenAI –ø—Ä–∞—Ü—é—î: {response.content[:50]}...")
        
        # –¢–µ—Å—Ç 3: –ù–∞—à SwaggerAgent
        print("3. –¢–µ—Å—Ç—É—î–º–æ SwaggerAgent...")
        from interactive_api_agent import InteractiveSwaggerAgent as SwaggerAgent
        
        agent = SwaggerAgent("examples/swagger_specs/shop_api.json", enable_api_calls=False)
        result = agent.process_interactive_query("–ü–æ–∫–∞–∂–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏")
        print(f"‚úÖ SwaggerAgent –ø—Ä–∞—Ü—é—î: {result.get('response', '')[:100]}...")
        
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        assert True, "LangChain —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        assert False, f"LangChain —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏: {e}"

def test_categories():
    """–¢–µ—Å—Ç—É—î–º–æ —Ä–æ–±–æ—Ç—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏."""
    print("\nüìÇ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")
    print("=" * 40)
    
    try:
        from interactive_api_agent import InteractiveSwaggerAgent as SwaggerAgent
        
        agent = SwaggerAgent("examples/swagger_specs/shop_api.json", enable_api_calls=False)
        
        # –¢–µ—Å—Ç 1: –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        print("1. –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó...")
        create_result = agent.process_interactive_query("–°—Ç–≤–æ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: –ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞")
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {create_result.get('response', '')[:100]}...")
        
        # –¢–µ—Å—Ç 2: –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        print("2. –¢–µ—Å—Ç –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
        list_result = agent.process_interactive_query("–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
        print(f"‚úÖ –ü–µ—Ä–µ–≥–ª—è–¥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {list_result.get('response', '')[:100]}...")
        
        # –¢–µ—Å—Ç 3: –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –¥–µ—Ç–∞–ª—è–º–∏
        print("3. –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –¥–µ—Ç–∞–ª—è–º–∏...")
        detailed_result = agent.process_interactive_query("–°—Ç–≤–æ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: –û–¥—è–≥, –æ–ø–∏—Å: –ú–æ–¥–Ω–∏–π –æ–¥—è–≥ –¥–ª—è –≤—Å—ñ—Ö —Å–µ–∑–æ–Ω—ñ–≤")
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—è–º–∏: {detailed_result.get('response', '')[:100]}...")
        
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        assert True, "–¢–µ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {e}")
        assert False, f"–¢–µ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–µ –ø—Ä–æ–π—à–ª–∏: {e}"

if __name__ == "__main__":
    success1 = test_langchain()
    success2 = test_categories()
    
    if success1 and success2:
        print("\nüöÄ LangChain –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        print("üìÇ –†–æ–±–æ—Ç–∞ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –ø—Ä–∞—Ü—é—î —ñ–¥–µ–∞–ª—å–Ω–æ!")
    else:
        print("\nüí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
