"""
–¢–µ—Å—Ç RAG —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑ —Ä–µ–∞–ª—å–Ω–æ—é PostgreSQL –±–∞–∑–æ—é —Ç–∞ pgvector
"""

import os
import time
from typing import Any, Dict, List
from unittest.mock import Mock, patch

import psycopg2
import pytest
from psycopg2.extras import RealDictCursor

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
REAL_DB_CONFIG = {
    "host": os.getenv("POSTGRES_HOST", "localhost"),
    "port": os.getenv("POSTGRES_PORT", "5432"),
    "database": os.getenv("POSTGRES_DB", "ai_swagger_bot_test"),
    "user": os.getenv("POSTGRES_USER", "postgres"),
    "password": os.getenv("POSTGRES_PASSWORD", "password"),
}


@pytest.fixture(scope="session")
def real_database():
    """–°—Ç–≤–æ—Ä—é—î —Ä–µ–∞–ª—å–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
    print("üóÑÔ∏è –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ä–µ–∞–ª—å–Ω–æ—ó PostgreSQL –±–∞–∑–∏...")

    try:
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        conn = psycopg2.connect(**REAL_DB_CONFIG)
        cursor = conn.cursor()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ—Ä—Å—ñ—é PostgreSQL
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ PostgreSQL: {version}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ pgvector —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        cursor.execute("SELECT * FROM pg_extension WHERE extname = 'vector';")
        vector_ext = cursor.fetchone()

        if vector_ext:
            print("‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è pgvector –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è pgvector –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        cursor.close()
        conn.close()

        return REAL_DB_CONFIG

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏: {e}")
        pytest.skip(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏: {e}")


@pytest.fixture
def clean_database(real_database):
    """–û—á–∏—â–∞—î –±–∞–∑—É –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º"""
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")

    conn = psycopg2.connect(**real_database)
    cursor = conn.cursor()

    try:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        cursor.execute(
            """
            DROP TABLE IF EXISTS test_embeddings CASCADE;
            DROP TABLE IF EXISTS test_documents CASCADE;
            DROP TABLE IF EXISTS test_swagger_specs CASCADE;
        """
        )

        conn.commit()
        print("‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞")

    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")
        conn.rollback()

    finally:
        cursor.close()
        conn.close()


@pytest.fixture
def test_embeddings_data():
    """–¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è embeddings"""
    return [
        {
            "text": "API –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤",
            "metadata": {"type": "endpoint", "method": "POST", "path": "/api/categories"},
            "embedding": [0.1, 0.2, 0.3, 0.4, 0.5] * 20,  # 100-–≤–∏–º—ñ—Ä–Ω–∏–π –≤–µ–∫—Ç–æ—Ä
        },
        {
            "text": "–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
            "metadata": {"type": "endpoint", "method": "GET", "path": "/api/categories"},
            "embedding": [0.2, 0.3, 0.4, 0.5, 0.6] * 20,
        },
        {
            "text": "–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
            "metadata": {"type": "endpoint", "method": "PATCH", "path": "/api/categories/{id}"},
            "embedding": [0.3, 0.4, 0.5, 0.6, 0.7] * 20,
        },
        {
            "text": "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ ID",
            "metadata": {"type": "endpoint", "method": "DELETE", "path": "/api/categories/{id}"},
            "embedding": [0.4, 0.5, 0.6, 0.7, 0.8] * 20,
        },
        {
            "text": "–°—Ö–µ–º–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—É",
            "metadata": {
                "type": "schema",
                "name": "Category",
                "properties": ["id", "name", "slug"],
            },
            "embedding": [0.5, 0.6, 0.7, 0.8, 0.9] * 20,
        },
    ]


class TestRAGRealDatabase:
    """–¢–µ—Å—Ç–∏ RAG —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑ —Ä–µ–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""

    def test_database_connection(self, real_database):
        """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        print("üîå –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏...")

        conn = psycopg2.connect(**real_database)
        cursor = conn.cursor()

        try:
            # –¢–µ—Å—Ç –±–∞–∑–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
            cursor.execute("SELECT 1;")
            result = cursor.fetchone()
            assert result[0] == 1

            # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS test_connection (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """
            )

            # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö
            cursor.execute(
                """
                INSERT INTO test_connection (name) VALUES (%s) RETURNING id;
            """,
                ("Test Connection",),
            )

            inserted_id = cursor.fetchone()[0]
            assert inserted_id > 0

            # –¢–µ—Å—Ç —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
            cursor.execute("SELECT name FROM test_connection WHERE id = %s;", (inserted_id,))
            name = cursor.fetchone()[0]
            assert name == "Test Connection"

            # –¢–µ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
            cursor.execute("DROP TABLE test_connection;")

            conn.commit()
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏: {e}")
            conn.rollback()
            raise
        finally:
            cursor.close()
            conn.close()

    def test_pgvector_extension(self, real_database):
        """–¢–µ—Å—Ç —Ä–æ–±–æ—Ç–∏ pgvector —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è"""
        print("üî¢ –¢–µ—Å—Ç—É—î–º–æ pgvector —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è...")

        conn = psycopg2.connect(**real_database)
        cursor = conn.cursor()

        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
            cursor.execute("SELECT * FROM pg_extension WHERE extname = 'vector';")
            vector_ext = cursor.fetchone()

            if not vector_ext:
                print("‚ö†Ô∏è pgvector –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç")
                pytest.skip("pgvector —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –∑ –≤–µ–∫—Ç–æ—Ä–Ω–∏–º –ø–æ–ª–µ–º
            cursor.execute(
                """
                CREATE TABLE test_vectors (
                    id SERIAL PRIMARY KEY,
                    text_content TEXT,
                    embedding vector(100)
                );
            """
            )

            # –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –≤–µ–∫—Ç–æ—Ä–∏
            test_vectors = [
                ("API –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", [0.1, 0.2, 0.3, 0.4, 0.5] * 20),
                ("–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", [0.2, 0.3, 0.4, 0.5, 0.6] * 20),
                ("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", [0.3, 0.4, 0.5, 0.6, 0.7] * 20),
            ]

            for text, vector in test_vectors:
                cursor.execute(
                    """
                    INSERT INTO test_vectors (text_content, embedding)
                    VALUES (%s, %s);
                """,
                    (text, vector),
                )

            # –¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ—à—É–∫—É (cosine similarity)
            cursor.execute(
                """
                SELECT text_content, embedding <=> %s as distance
                FROM test_vectors
                ORDER BY embedding <=> %s
                LIMIT 2;
            """,
                (test_vectors[0][1], test_vectors[0][1]),
            )

            results = cursor.fetchall()
            assert len(results) == 2

            # –ü–µ—Ä—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –Ω–∞–π–º–µ–Ω—à—É –≤—ñ–¥—Å—Ç–∞–Ω—å (0.0)
            assert results[0][1] == 0.0

            # –¢–µ—Å—Ç L2 –≤—ñ–¥—Å—Ç–∞–Ω—ñ
            cursor.execute(
                """
                SELECT text_content, embedding <-> %s as distance
                FROM test_vectors
                ORDER BY embedding <-> %s
                LIMIT 2;
            """,
                (test_vectors[0][1], test_vectors[0][1]),
            )

            l2_results = cursor.fetchall()
            assert len(l2_results) == 2

            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Ç–∞–±–ª–∏—Ü—é
            cursor.execute("DROP TABLE test_vectors;")

            conn.commit()
            print("‚úÖ pgvector –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è pgvector: {e}")
            conn.rollback()
            raise
        finally:
            cursor.close()
            conn.close()

    def test_rag_engine_integration(self, real_database, clean_database, test_embeddings_data):
        """–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó RAG –¥–≤–∏–≥—É–Ω–∞ –∑ —Ä–µ–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é"""
        print("üîç –¢–µ—Å—Ç—É—î–º–æ RAG –¥–≤–∏–≥—É–Ω –∑ —Ä–µ–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é...")

        try:
            from src.rag_engine import PostgresRAGEngine

            # –°—Ç–≤–æ—Ä—é—î–º–æ RAG –¥–≤–∏–≥—É–Ω
            rag_engine = PostgresRAGEngine(
                host=real_database["host"],
                port=real_database["port"],
                database=real_database["database"],
                user=real_database["user"],
                password=real_database["password"],
            )

            # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
            print("üìä –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–∫—Ç–æ—Ä–Ω–µ —Å—Ö–æ–≤–∏—â–µ...")

            # –ú–æ–∫–∞—î–º–æ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó embeddings
            with patch("openai.Embedding.create") as mock_embedding:
                mock_embedding.return_value = {
                    "data": [{"embedding": test_embeddings_data[0]["embedding"]}]
                }

                # –î–æ–¥–∞—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–æ —Å—Ö–æ–≤–∏—â–∞
                for doc in test_embeddings_data:
                    success = rag_engine.add_document(text=doc["text"], metadata=doc["metadata"])
                    assert success is True

                print(f"‚úÖ –î–æ–¥–∞–Ω–æ {len(test_embeddings_data)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")

            # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –ø–æ–¥—ñ–±–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
            print("üîç –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –ø–æ–¥—ñ–±–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...")

            with patch("openai.Embedding.create") as mock_embedding:
                mock_embedding.return_value = {
                    "data": [{"embedding": test_embeddings_data[0]["embedding"]}]
                }

                # –®—É–∫–∞—î–º–æ –ø–æ–¥—ñ–±–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
                similar_docs = rag_engine.search_similar(
                    query="API –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏", top_k=3
                )

                print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(similar_docs)} –ø–æ–¥—ñ–±–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")

                assert len(similar_docs) > 0
                assert len(similar_docs) <= 3

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                for doc in similar_docs:
                    assert "text" in doc
                    assert "metadata" in doc
                    assert "similarity" in doc
                    assert doc["similarity"] >= 0.0
                    assert doc["similarity"] <= 1.0

                print("‚úÖ –ü–æ—à—É–∫ –ø–æ–¥—ñ–±–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î")

            # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –∑–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
            print("üè∑Ô∏è –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –∑–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏...")

            metadata_results = rag_engine.search_by_metadata({"type": "endpoint", "method": "GET"})

            print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(metadata_results)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏")

            assert len(metadata_results) > 0

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º–∞—é—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ
            for doc in metadata_results:
                assert doc["metadata"]["type"] == "endpoint"
                assert doc["metadata"]["method"] == "GET"

            print("‚úÖ –ü–æ—à—É–∫ –∑–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏ –ø—Ä–∞—Ü—é—î")

            # –¢–µ—Å—Ç—É—î–º–æ –≥—ñ–±—Ä–∏–¥–Ω–∏–π –ø–æ—à—É–∫
            print("üîÄ –¢–µ—Å—Ç—É—î–º–æ –≥—ñ–±—Ä–∏–¥–Ω–∏–π –ø–æ—à—É–∫...")

            with patch("openai.Embedding.create") as mock_embedding:
                mock_embedding.return_value = {
                    "data": [{"embedding": test_embeddings_data[0]["embedding"]}]
                }

                hybrid_results = rag_engine.hybrid_search(
                    query="–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤", metadata_filter={"type": "endpoint"}, top_k=5
                )

                print(f"üìã –ì—ñ–±—Ä–∏–¥–Ω–∏–π –ø–æ—à—É–∫ –∑–Ω–∞–π—à–æ–≤ {len(hybrid_results)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")

                assert len(hybrid_results) > 0

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ñ—ñ–ª—å—Ç—Ä—É
                for doc in hybrid_results:
                    assert doc["metadata"]["type"] == "endpoint"

            print("‚úÖ –ì—ñ–±—Ä–∏–¥–Ω–∏–π –ø–æ—à—É–∫ –ø—Ä–∞—Ü—é—î")

        except ImportError as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ RAG –¥–≤–∏–≥—É–Ω: {e}")
            pytest.skip(f"RAG –¥–≤–∏–≥—É–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è RAG –¥–≤–∏–≥—É–Ω–∞: {e}")
            raise

    def test_swagger_parser_integration(self, real_database, clean_database):
        """–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –ø–∞—Ä—Å–µ—Ä–∞ Swagger –∑ —Ä–µ–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é"""
        print("üìã –¢–µ—Å—Ç—É—î–º–æ –ø–∞—Ä—Å–µ—Ä Swagger –∑ —Ä–µ–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é...")

        try:
            from src.enhanced_swagger_parser import EnhancedSwaggerParser
            from src.rag_engine import PostgresRAGEngine

            # –°—Ç–≤–æ—Ä—é—î–º–æ RAG –¥–≤–∏–≥—É–Ω
            rag_engine = PostgresRAGEngine(
                host=real_database["host"],
                port=real_database["port"],
                database=real_database["database"],
                user=real_database["user"],
                password=real_database["password"],
            )

            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä—Å–µ—Ä Swagger
            swagger_parser = EnhancedSwaggerParser()

            # –¢–µ—Å—Ç—É—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            swagger_spec_path = "examples/swagger_specs/clickone_shop_api.json"

            if not os.path.exists(swagger_spec_path):
                print(f"‚ö†Ô∏è –§–∞–π–ª {swagger_spec_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç")
                pytest.skip(f"Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {swagger_spec_path}")

            print(f"üìÑ –ü–∞—Ä—Å–∏–º–æ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é: {swagger_spec_path}")

            # –ü–∞—Ä—Å–∏–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
            parsed_spec = swagger_parser.parse_swagger_spec(swagger_spec_path)

            assert parsed_spec is not None
            assert "paths" in parsed_spec
            assert "components" in parsed_spec

            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–∏–π: {len(parsed_spec.get('paths', {}))} endpoints")

            # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞ –∑ Swagger
            print("üîó –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–∫—Ç–æ—Ä–Ω–µ —Å—Ö–æ–≤–∏—â–µ –∑ Swagger...")

            # –ú–æ–∫–∞—î–º–æ OpenAI –¥–ª—è embeddings
            with patch("openai.Embedding.create") as mock_embedding:
                mock_embedding.return_value = {"data": [{"embedding": [0.1] * 100}]}

                # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–∫—Ç–æ—Ä–Ω–µ —Å—Ö–æ–≤–∏—â–µ
                success = rag_engine.create_vector_store_from_swagger(
                    swagger_spec_path=swagger_spec_path, swagger_parser=swagger_parser
                )

                assert success is True
                print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–µ —Å—Ö–æ–≤–∏—â–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ Swagger")

            # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –ø–æ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
            print("üîç –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –ø–æ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")

            with patch("openai.Embedding.create") as mock_embedding:
                mock_embedding.return_value = {"data": [{"embedding": [0.1] * 100}]}

                # –®—É–∫–∞—î–º–æ endpoint –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
                search_results = rag_engine.search_similar(
                    query="—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤", top_k=5
                )

                print(f"üìã –ü–æ—à—É–∫ –∑–Ω–∞–π—à–æ–≤ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")

                if len(search_results) > 0:
                    print("üìã –ü–µ—Ä—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
                    for i, doc in enumerate(search_results[:3]):
                        print(f"  {i+1}. {doc.get('text', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ–∫—Å—Ç')[:100]}...")
                        print(f"     –ú–µ—Ç–∞–¥–∞–Ω—ñ: {doc.get('metadata', {})}")
                        print(f"     –°—Ö–æ–∂—ñ—Å—Ç—å: {doc.get('similarity', 0):.3f}")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ—à—É–∫ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                assert len(search_results) >= 0  # –ú–æ–∂–µ –±—É—Ç–∏ 0, —è–∫—â–æ embeddings –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ

            print("‚úÖ –ü–æ—à—É–∫ –ø–æ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—î")

        except ImportError as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–æ–¥—É–ª—ñ: {e}")
            pytest.skip(f"–ú–æ–¥—É–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞ Swagger: {e}")
            raise

    def test_error_handling_real_database(self, real_database):
        """–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∑ —Ä–µ–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
        print("‚ö†Ô∏è –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫ –∑ —Ä–µ–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é...")

        try:
            from src.rag_engine import PostgresRAGEngine

            # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            print("üîå –¢–µ—Å—Ç—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")

            wrong_config = real_database.copy()
            wrong_config["password"] = "wrong_password"

            try:
                rag_engine = PostgresRAGEngine(**wrong_config)
                # –Ø–∫—â–æ –Ω–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Ü–µ –º–æ–∂–µ –æ–∑–Ω–∞—á–∞—Ç–∏, —â–æ –ø–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è
                print("‚ö†Ô∏è –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–∞—Ä–æ–ª–µ–º –Ω–µ –≤–∏–∫–ª–∏–∫–∞–ª–æ –ø–æ–º–∏–ª–∫—É")
            except Exception as e:
                print(f"‚úÖ –û—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
                assert (
                    "password authentication failed" in str(e).lower()
                    or "authentication failed" in str(e).lower()
                )

            # –¢–µ—Å—Ç—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –±–∞–∑—É –¥–∞–Ω–∏—Ö
            print("üóÑÔ∏è –¢–µ—Å—Ç—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –±–∞–∑—É –¥–∞–Ω–∏—Ö...")

            wrong_db_config = real_database.copy()
            wrong_db_config["database"] = "nonexistent_database"

            try:
                rag_engine = PostgresRAGEngine(**wrong_db_config)
                print("‚ö†Ô∏è –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –Ω–µ—ñ—Å–Ω—É—é—á–æ—ó –±–∞–∑–∏ –Ω–µ –≤–∏–∫–ª–∏–∫–∞–ª–æ –ø–æ–º–∏–ª–∫—É")
            except Exception as e:
                print(f"‚úÖ –û—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–∞–∑–∏: {e}")
                assert "database" in str(e).lower() or "does not exist" in str(e).lower()

            # –¢–µ—Å—Ç—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ö–æ—Å—Ç
            print("üåê –¢–µ—Å—Ç—É—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ö–æ—Å—Ç...")

            wrong_host_config = real_database.copy()
            wrong_host_config["host"] = "nonexistent.host.local"

            try:
                rag_engine = PostgresRAGEngine(**wrong_host_config)
                print("‚ö†Ô∏è –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ —Ö–æ—Å—Ç–∞ –Ω–µ –≤–∏–∫–ª–∏–∫–∞–ª–æ –ø–æ–º–∏–ª–∫—É")
            except Exception as e:
                print(f"‚úÖ –û—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ö–æ—Å—Ç–∞: {e}")
                assert "connection" in str(e).lower() or "timeout" in str(e).lower()

            print("‚úÖ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")

        except ImportError as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ RAG –¥–≤–∏–≥—É–Ω: {e}")
            pytest.skip(f"RAG –¥–≤–∏–≥—É–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫: {e}")
            raise

    def test_performance_real_database(self, real_database, clean_database, test_embeddings_data):
        """–¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑ —Ä–µ–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
        print("‚ö° –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑ —Ä–µ–∞–ª—å–Ω–æ—é –±–∞–∑–æ—é...")

        try:
            from src.rag_engine import PostgresRAGEngine

            # –°—Ç–≤–æ—Ä—é—î–º–æ RAG –¥–≤–∏–≥—É–Ω
            rag_engine = PostgresRAGEngine(
                host=real_database["host"],
                port=real_database["port"],
                database=real_database["database"],
                user=real_database["user"],
                password=real_database["password"],
            )

            # –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏
            print("üì• –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏...")

            start_time = time.time()

            with patch("openai.Embedding.create") as mock_embedding:
                mock_embedding.return_value = {
                    "data": [{"embedding": test_embeddings_data[0]["embedding"]}]
                }

                for doc in test_embeddings_data:
                    success = rag_engine.add_document(text=doc["text"], metadata=doc["metadata"])
                    assert success is True

            insert_time = time.time() - start_time
            print(f"‚è±Ô∏è –í—Å—Ç–∞–≤–∫–∞ {len(test_embeddings_data)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–∞–π–Ω—è–ª–∞: {insert_time:.3f}—Å")
            print(f"üìä –®–≤–∏–¥–∫—ñ—Å—Ç—å: {len(test_embeddings_data) / insert_time:.1f} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤/—Å–µ–∫")

            # –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—É
            print("üîç –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—É...")

            start_time = time.time()

            with patch("openai.Embedding.create") as mock_embedding:
                mock_embedding.return_value = {
                    "data": [{"embedding": test_embeddings_data[0]["embedding"]}]
                }

                for i in range(10):
                    results = rag_engine.search_similar(query=f"—Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç {i}", top_k=3)
                    assert len(results) >= 0

            search_time = time.time() - start_time
            print(f"‚è±Ô∏è 10 –ø–æ—à—É–∫—ñ–≤ –∑–∞–π–Ω—è–ª–∏: {search_time:.3f}—Å")
            print(f"üìä –®–≤–∏–¥–∫—ñ—Å—Ç—å: {10 / search_time:.1f} –ø–æ—à—É–∫—ñ–≤/—Å–µ–∫")

            # –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—É –∑–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
            print("üè∑Ô∏è –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—à—É–∫—É –∑–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏...")

            start_time = time.time()

            for i in range(10):
                results = rag_engine.search_by_metadata({"type": "endpoint", "method": "GET"})
                assert len(results) >= 0

            metadata_search_time = time.time() - start_time
            print(f"‚è±Ô∏è 10 –ø–æ—à—É–∫—ñ–≤ –∑–∞ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏ –∑–∞–π–Ω—è–ª–∏: {metadata_search_time:.3f}—Å")
            print(f"üìä –®–≤–∏–¥–∫—ñ—Å—Ç—å: {10 / metadata_search_time:.1f} –ø–æ—à—É–∫—ñ–≤/—Å–µ–∫")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∏–π–Ω—è—Ç–Ω–∞
            assert insert_time < 10.0  # –í—Å—Ç–∞–≤–∫–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –∑–∞–π–º–∞—Ç–∏ –±—ñ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
            assert search_time < 5.0  # –ü–æ—à—É–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–π–º–∞—Ç–∏ –±—ñ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥

            print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∏–π–Ω—è—Ç–Ω–∞")

        except ImportError as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ RAG –¥–≤–∏–≥—É–Ω: {e}")
            pytest.skip(f"RAG –¥–≤–∏–≥—É–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
            raise


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    pytest.main([__file__, "-v", "-s"])
