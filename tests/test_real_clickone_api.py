#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ Clickone Shop API
"""

import json
import os
from datetime import datetime

import requests
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
CLICKONE_SHOP_API_URL = "https://api.oneshop.click"
CLICKONE_SHOP_SWAGGER_URL = "https://api.oneshop.click/docs/ai-json"
JWT_TOKEN = os.getenv("CLICKONE_JWT_TOKEN")


def print_banner():
    """–í–∏–≤–æ–¥–∏—Ç—å –±–∞–Ω–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("üöÄ" * 50)
    print("üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø REAL CLICKONE SHOP API")
    print("üöÄ" * 50)
    print()


def test_swagger_download():
    """–¢–µ—Å—Ç—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    print("üìã –¢–µ—Å—Ç—É—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

    try:
        response = requests.get(
            CLICKONE_SHOP_SWAGGER_URL, timeout=30, headers={"User-Agent": "AI-Swagger-Bot/1.0"}
        )

        if response.status_code == 200:
            swagger_spec = response.json()
            print(f"‚úÖ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            print(f"   üìä API: {swagger_spec.get('info', {}).get('title', 'Unknown')}")
            print(f"   üìä –í–µ—Ä—Å—ñ—è: {swagger_spec.get('info', {}).get('version', 'Unknown')}")
            print(f"   üìä –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏: {len(swagger_spec.get('paths', {}))}")

            # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
            paths = list(swagger_spec.get("paths", {}).keys())[:5]
            print(f"   üìä –ü—Ä–∏–∫–ª–∞–¥–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤: {', '.join(paths)}")

            return swagger_spec
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: HTTP {response.status_code}")
            return None

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        return None


def test_api_connection():
    """–¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API"""
    print("\nüîå –¢–µ—Å—Ç—É—é –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Clickone Shop API...")

    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/health",
            timeout=10,
            headers={"User-Agent": "AI-Swagger-Bot/1.0"},
        )

        if response.status_code == 200:
            print("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ API –ø—Ä–∞—Ü—é—î")
            return True
        else:
            print(f"‚ö†Ô∏è API –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
        return False


def test_categories_endpoint():
    """–¢–µ—Å—Ç—É—î –µ–Ω–¥–ø–æ—ñ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    print("\nüìÇ –¢–µ—Å—Ç—É—é –µ–Ω–¥–ø–æ—ñ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")

    if not JWT_TOKEN:
        print("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        return None

    try:
        headers = {
            "Authorization": f"Bearer {JWT_TOKEN}",
            "Content-Type": "application/json",
            "User-Agent": "AI-Swagger-Bot/1.0",
        }

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/api/categories", headers=headers, timeout=30
        )

        print(f"üìä GET /api/categories: HTTP {response.status_code}")

        if response.status_code == 200:
            categories = response.json()
            print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")

            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
            for i, category in enumerate(categories[:3]):
                print(
                    f"   {i+1}. {category.get('name', 'Unknown')} (ID: {category.get('id', 'Unknown')})"
                )

            return categories
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.text}")
            return None

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
        return None


def test_create_category():
    """–¢–µ—Å—Ç—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    print("\n‚ûï –¢–µ—Å—Ç—É—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó...")

    if not JWT_TOKEN:
        print("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        return None

    try:
        headers = {
            "Authorization": f"Bearer {JWT_TOKEN}",
            "Content-Type": "application/json",
            "User-Agent": "AI-Swagger-Bot/1.0",
        }

        # –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        category_data = {
            "name": f"Test Category {datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "slug": f"test-category-{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "description": "–¢–µ—Å—Ç–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API",
            "isActive": True,
            "sortOrder": 999,
        }

        response = requests.post(
            f"{CLICKONE_SHOP_API_URL}/api/categories",
            headers=headers,
            json=category_data,
            timeout=30,
        )

        print(f"üìä POST /api/categories: HTTP {response.status_code}")
        print(f"üìä –î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É: {json.dumps(category_data, ensure_ascii=False, indent=2)}")

        if response.status_code == 201:
            created_category = response.json()
            print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            print(f"   üìä ID: {created_category.get('id', 'Unknown')}")
            print(f"   üìä –ù–∞–∑–≤–∞: {created_category.get('name', 'Unknown')}")
            print(f"   üìä Slug: {created_category.get('slug', 'Unknown')}")
            return created_category
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {response.text}")
            return None

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
        return None


def test_products_endpoint():
    """–¢–µ—Å—Ç—É—î –µ–Ω–¥–ø–æ—ñ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç—ñ–≤"""
    print("\nüì¶ –¢–µ—Å—Ç—É—é –µ–Ω–¥–ø–æ—ñ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç—ñ–≤...")

    if not JWT_TOKEN:
        print("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        return None

    try:
        headers = {
            "Authorization": f"Bearer {JWT_TOKEN}",
            "Content-Type": "application/json",
            "User-Agent": "AI-Swagger-Bot/1.0",
        }

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
        response = requests.get(
            f"{CLICKONE_SHOP_API_URL}/api/products", headers=headers, timeout=30
        )

        print(f"üìä GET /api/products: HTTP {response.status_code}")

        if response.status_code == 200:
            products = response.json()
            print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")

            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
            for i, product in enumerate(products[:3]):
                print(
                    f"   {i+1}. {product.get('name', 'Unknown')} (ID: {product.get('id', 'Unknown')})"
                )
                print(
                    f"      üí∞ –¶—ñ–Ω–∞: {product.get('price', 'Unknown')} {product.get('currency', '')}"
                )
                print(f"      üìä –°—Ç–∞—Ç—É—Å: {product.get('status', 'Unknown')}")

            return products
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.text}")
            return None

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
        return None


def analyze_swagger_structure(swagger_spec):
    """–ê–Ω–∞–ª—ñ–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    print("\nüîç –ê–Ω–∞–ª—ñ–∑—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")

    if not swagger_spec:
        print("‚ùå –ù–µ–º–∞—î Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        return

    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
    paths = swagger_spec.get("paths", {})
    print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤: {len(paths)}")

    # –ì—Ä—É–ø—É—î–º–æ –∑–∞ —Ç–µ–≥–∞–º–∏
    endpoints_by_tag = {}
    for path, methods in paths.items():
        for method, details in methods.items():
            if isinstance(details, dict):
                tags = details.get("tags", ["–ë–µ–∑ —Ç–µ–≥—É"])
                for tag in tags:
                    if tag not in endpoints_by_tag:
                        endpoints_by_tag[tag] = []
                    endpoints_by_tag[tag].append(f"{method.upper()} {path}")

    print("\nüìä –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –∑–∞ —Ç–µ–≥–∞–º–∏:")
    for tag, endpoints in endpoints_by_tag.items():
        print(f"   üè∑Ô∏è  {tag}: {len(endpoints)} –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤")
        for endpoint in endpoints[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
            print(f"      ‚Ä¢ {endpoint}")
        if len(endpoints) > 3:
            print(f"      ... —Ç–∞ —â–µ {len(endpoints) - 3}")

    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ö–µ–º–∏
    components = swagger_spec.get("components", {})
    schemas = components.get("schemas", {})
    print(f"\nüìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ö–µ–º –¥–∞–Ω–∏—Ö: {len(schemas)}")

    # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Å—Ö–µ–º
    schema_names = list(schemas.keys())[:5]
    print(f"üìä –ü—Ä–∏–∫–ª–∞–¥–∏ —Å—Ö–µ–º: {', '.join(schema_names)}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print_banner()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞
    if not JWT_TOKEN:
        print("‚ö†Ô∏è  –£–í–ê–ì–ê: CLICKONE_JWT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        print("   –î–æ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API")
        print()

    # 1. –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger
    swagger_spec = test_swagger_download()

    # 2. –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API
    api_connection = test_api_connection()

    # 3. –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Swagger
    if swagger_spec:
        analyze_swagger_structure(swagger_spec)

    # 4. –¢–µ—Å—Ç—É—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î JWT —Ç–æ–∫–µ–Ω)
    if JWT_TOKEN:
        test_categories_endpoint()
        test_create_category()
        test_products_endpoint()
    else:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ (–Ω–µ–º–∞—î JWT —Ç–æ–∫–µ–Ω–∞)")

    print("\n" + "üöÄ" * 50)
    print("‚úÖ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
    print("üöÄ" * 50)


if __name__ == "__main__":
    main()
