#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑ JWT —Ç–æ–∫–µ–Ω–æ–º.
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ src
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

try:
    from interactive_api_agent import InteractiveSwaggerAgent as SwaggerAgent
    print("‚úÖ –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ SwaggerAgent")
except ImportError as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    sys.exit(1)


def test_production_with_jwt():
    """–¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑ JWT —Ç–æ–∫–µ–Ω–æ–º."""
    print("üöÄ –¢–ï–°–¢ –ü–†–û–î–ê–ö–®–ù –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–û–°–¢–Ü –ó JWT")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    api_key = os.getenv('OPENAI_API_KEY')
    jwt_token = os.getenv('JWT_TOKEN')
    
    if not api_key or not jwt_token:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ OPENAI_API_KEY –∞–±–æ JWT_TOKEN")
        return False
    
    print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–ª—é—á—ñ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≥–µ–Ω—Ç–∞
        agent = SwaggerAgent(
            swagger_spec_path="examples/swagger_specs/shop_api.json",
            enable_api_calls=True,
            openai_api_key=api_key,
            jwt_token=jwt_token
        )
        print("‚úÖ –ê–≥–µ–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∑–∞–ø–∏—Ç—ñ–≤
        test_cases = [
            {
                "query": "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏",
                "expected_method": "GET"
            },
            {
                "query": "–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä: iPhone 15, —Ü—ñ–Ω–∞: 999.99",
                "expected_method": "POST"
            },
            {
                "query": "–û–Ω–æ–≤–∏ —Ç–æ–≤–∞—Ä –∑ ID 1: –∑–º—ñ–Ω–∏ —Ü—ñ–Ω—É –Ω–∞ 899.99",
                "expected_method": "PATCH"
            }
        ]
        
        print("\nüìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤...")
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüìù –¢–µ—Å—Ç {i}:")
            print(f"   –ó–∞–ø–∏—Ç: {test_case['query']}")
            print(f"   –û—á—ñ–∫—É–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥: {test_case['expected_method']}")
            
            try:
                response = agent.process_interactive_query(test_case['query'])
                print(f"   ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–æ")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ–¥–∞—î—Ç—å—Å—è JWT —Ç–æ–∫–µ–Ω
                if test_case['expected_method'] == 'POST' and 'JWT —Ç–æ–∫–µ–Ω –¥–æ–¥–∞–Ω–æ' in response.get('response', ''):
                    print("   üîê JWT —Ç–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ")
                elif test_case['expected_method'] == 'POST':
                    print("   ‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –¥–æ–¥–∞–Ω–æ (–º–æ–∂–ª–∏–≤–æ –ª–æ–∫–∞–ª—å–Ω–∏–π URL)")
                else:
                    print("   ‚ÑπÔ∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è GET/PATCH –∑–∞–ø–∏—Ç—ñ–≤")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                print(f"   üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.get('response', '')[:200]}...")
                
            except Exception as e:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        print("\n‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        assert True, "–ü—Ä–æ–¥–∞–∫—à–Ω —Ç–µ—Å—Ç–∏ –∑ JWT –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        assert False, f"–ü—Ä–æ–¥–∞–∫—à–Ω —Ç–µ—Å—Ç–∏ –∑ JWT –Ω–µ –ø—Ä–æ–π—à–ª–∏: {e}"


def test_jwt_authorization():
    """–¢–µ—Å—Ç JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó."""
    print("\nüîê –¢–ï–°–¢ JWT –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á")
    print("=" * 60)
    
    try:
        agent = SwaggerAgent(
            swagger_spec_path="examples/swagger_specs/shop_api.json",
            enable_api_calls=True,
            openai_api_key=os.getenv('OPENAI_API_KEY'),
            jwt_token=os.getenv('JWT_TOKEN')
        )
        
        # –¢–µ—Å—Ç POST –∑–∞–ø–∏—Ç—É (–ø–æ–≤–∏–Ω–µ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ JWT)
        print("üìù –¢–µ—Å—Ç POST –∑–∞–ø–∏—Ç—É –∑ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é...")
        response = agent.process_interactive_query("–°—Ç–≤–æ—Ä–∏ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ JWT")
        
        if 'JWT —Ç–æ–∫–µ–Ω –¥–æ–¥–∞–Ω–æ' in response.get('response', ''):
            print("‚úÖ JWT —Ç–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ POST –∑–∞–ø–∏—Ç—É")
        else:
            print("‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ –¥–æ–¥–∞–Ω–æ (–º–æ–∂–ª–∏–≤–æ –ª–æ–∫–∞–ª—å–Ω–∏–π URL –∞–±–æ —ñ–Ω—à–∞ –ø—Ä–∏—á–∏–Ω–∞)")
        
        print(f"üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.get('response', '')[:300]}...")
        
        assert True, "JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ"
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ JWT —Ç–µ—Å—Ç—É: {e}")
        assert False, f"JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î: {e}"


def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è."""
    print("üöÄ –ü–†–û–î–ê–ö–®–ù –¢–ï–°–¢ –ó JWT –¢–û–ö–ï–ù–û–ú")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    required_vars = ['OPENAI_API_KEY', 'JWT_TOKEN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {missing_vars}")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—ñ:")
        for var in missing_vars:
            print(f"   export {var}='your-value'")
        return False
    
    print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    test1_success = test_production_with_jwt()
    test2_success = test_jwt_authorization()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –ü–†–û–î–ê–ö–®–ù –¢–ï–°–¢–£")
    print("=" * 60)
    
    if test1_success and test2_success:
        print("üéâ –í—Å—ñ –ø—Ä–æ–¥–∞–∫—à–Ω —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("‚úÖ AI Swagger Bot –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø—Ä–æ–¥–∞–∫—à–Ω—É –∑ JWT —Ç–æ–∫–µ–Ω–æ–º")
        return True
    else:
        print("‚ùå –Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
