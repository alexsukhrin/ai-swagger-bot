"""
–¢–µ—Å—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI –º–æ–¥–µ–ª—ñ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ API
"""

import os
import time
from typing import Any, Dict
from unittest.mock import Mock, patch

import openai
import pytest

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenAI –∑ .env —Ñ–∞–π–ª—É
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4")


@pytest.fixture
def openai_client():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª—ñ—î–Ω—Ç OpenAI"""
    if not OPENAI_API_KEY or OPENAI_API_KEY == "test_key":
        pytest.skip("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        response = client.chat.completions.create(
            model=OPENAI_MODEL, messages=[{"role": "user", "content": "Hello"}], max_tokens=5
        )
        print(f"‚úÖ OpenAI –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ, –º–æ–¥–µ–ª—å: {OPENAI_MODEL}")
        return client
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ OpenAI: {e}")
        pytest.skip(f"OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")


@pytest.fixture
def api_error_examples():
    """–ü—Ä–∏–∫–ª–∞–¥–∏ –ø–æ–º–∏–ª–æ–∫ API –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    return [
        {
            "error": "Category name must contain only letters (no numbers or special characters)",
            "input_data": {
                "name": "Test Category 123",
                "slug": "test-category-123",
                "description": "Test category with numbers",
            },
            "expected_fix": {
                "name": "TestCategory",
                "slug": "test-category",
                "description": "Test category with numbers",
            },
        },
        {
            "error": "Slug must be unique",
            "input_data": {
                "name": "Test Category",
                "slug": "existing-slug",
                "description": "Test category",
            },
            "expected_fix": {
                "name": "Test Category",
                "slug": "test-category-new",
                "description": "Test category",
            },
        },
        {
            "error": "Description is too long (max 500 characters)",
            "input_data": {
                "name": "Test Category",
                "slug": "test-category",
                "description": "A" * 600,  # –ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π –æ–ø–∏—Å
            },
            "expected_fix": {
                "name": "Test Category",
                "slug": "test-category",
                "description": "A" * 500,  # –û–±—Ä—ñ–∑–∞–Ω–∏–π –æ–ø–∏—Å
            },
        },
    ]


class TestAIErrorFixing:
    """–¢–µ—Å—Ç–∏ –¥–ª—è AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ API"""

    def test_openai_connection(self, openai_client):
        """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ OpenAI"""
        print("üîå –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ OpenAI...")

        try:
            response = openai_client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[{"role": "user", "content": "Test connection"}],
                max_tokens=10,
            )

            assert response is not None
            assert response.choices is not None
            assert len(response.choices) > 0

            print("‚úÖ OpenAI –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è OpenAI: {e}")
            raise

    def test_ai_error_analysis(self, openai_client, api_error_examples):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–æ–∫ API –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI"""
        print("üß† –¢–µ—Å—Ç—É—î–º–æ AI –∞–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–æ–∫ API...")

        for i, error_example in enumerate(api_error_examples):
            print(f"\nüîç –¢–µ—Å—Ç {i+1}: {error_example['error']}")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
            prompt = f"""
            –ê–Ω–∞–ª—ñ–∑—É–π –ø–æ–º–∏–ª–∫—É API —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:

            –ü–æ–º–∏–ª–∫–∞: {error_example['error']}
            –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: {error_example['input_data']}

            –î–∞–π –∑—Ä–æ–∑—É–º—ñ–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:
            - –ü–æ—è—Å–Ω–∏, –≤ —á–æ–º—É –ø—Ä–æ–±–ª–µ–º–∞
            - –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            - –ù–∞–≤–µ–¥–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            """

            try:
                response = openai_client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[
                        {
                            "role": "system",
                            "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ API —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö. –ê–Ω–∞–ª—ñ–∑—É–π –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
                        },
                        {"role": "user", "content": prompt},
                    ],
                    max_tokens=200,
                    temperature=0.1,
                )

                ai_response = response.choices[0].message.content
                print(f"ü§ñ AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {ai_response}")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ AI –¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                assert ai_response is not None
                assert len(ai_response) > 0

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
                assert any(
                    word in ai_response.lower()
                    for word in ["–Ω–∞–∑–≤–∞", "slug", "–æ–ø–∏—Å", "–ø—Ä–æ–±–ª–µ–º–∞", "–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"]
                )

                print(f"‚úÖ AI –∞–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ {i+1} —É—Å–ø—ñ—à–Ω–∏–π")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É {i+1}: {e}")
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Ç–µ—Å—Ç–æ–º
                continue

    def test_ai_data_fixing(self, openai_client, api_error_examples):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI"""
        print("üîß –¢–µ—Å—Ç—É—î–º–æ AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")

        for i, error_example in enumerate(api_error_examples):
            print(f"\nüîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è {i+1}: {error_example['error']}")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            prompt = f"""
            –í–∏–ø—Ä–∞–≤ —Ü—ñ –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ–º–∏–ª–∫–∏ API —Ç–∞ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:

            –ü–æ–º–∏–ª–∫–∞: {error_example['error']}
            –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ: {error_example['input_data']}

            –î–∞–π –∑—Ä–æ–∑—É–º—ñ–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:
            - –ü–æ—è—Å–Ω–∏, —â–æ –±—É–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
            - –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
            - –ù–∞–≤–µ–¥–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
            """

            try:
                response = openai_client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[
                        {
                            "role": "system",
                            "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö. –î–∞–≤–∞–π –∑—Ä–æ–∑—É–º—ñ–ª—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
                        },
                        {"role": "user", "content": prompt},
                    ],
                    max_tokens=150,
                    temperature=0.0,
                )

                ai_response = response.choices[0].message.content
                print(f"ü§ñ AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {ai_response}")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ AI –¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                assert ai_response is not None
                assert len(ai_response) > 0

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º—ñ—Å—Ç–∏—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–ª–æ–≤–∞
                assert any(
                    word in ai_response.lower()
                    for word in ["–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è", "–ø—Ä–∏–∫–ª–∞–¥", "–Ω–∞–∑–≤–∞", "slug"]
                )

                print(f"‚úÖ AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è {i+1} —É—Å–ø—ñ—à–Ω–µ")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è {i+1}: {e}")
                continue

    def test_ai_validation_rules(self, openai_client):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤—ñ–¥ AI"""
        print("üìã –¢–µ—Å—Ç—É—î–º–æ AI –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó...")

        prompt = """
        –û–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –≤ e-commerce API —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:

        1. –ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        2. Slug (URL-–ø—ñ–¥—Ä—É—á–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä)
        3. –û–ø–∏—Å
        4. –Ü–Ω—à—ñ –≤–∞–∂–ª–∏–≤—ñ –ø–æ–ª—è

        –î–∞–π –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏.
        """

        try:
            response = openai_client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ API –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ e-commerce —Å–∏—Å—Ç–µ–º. –ü–æ—è—Å–Ω—é–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
                    },
                    {"role": "user", "content": prompt},
                ],
                max_tokens=300,
                temperature=0.1,
            )

            ai_response = response.choices[0].message.content
            print(f"ü§ñ AI –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {ai_response}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            assert ai_response is not None
            assert len(ai_response) > 0
            assert any(
                word in ai_response.lower()
                for word in ["–Ω–∞–∑–≤–∞", "slug", "–æ–ø–∏—Å", "–ø—Ä–∞–≤–∏–ª–∞", "–≤–∞–ª—ñ–¥–∞—Ü—ñ—è"]
            )

            print("‚úÖ AI –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω–æ")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {e}")

    def test_ai_error_suggestions(self, openai_client):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –ø–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—é –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥ AI"""
        print("üí° –¢–µ—Å—Ç—É—î–º–æ AI –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—é...")

        error_scenarios = [
            "Category name must contain only letters (no numbers or special characters)",
            "Slug must be unique and contain only lowercase letters, numbers, and hyphens",
            "Description is too long (maximum 500 characters allowed)",
            "Sort order must be a positive integer between 1 and 1000",
        ]

        for i, error in enumerate(error_scenarios):
            print(f"\nüí° –°—Ü–µ–Ω–∞—Ä—ñ–π {i+1}: {error}")

            prompt = f"""
            –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ü—ñ—î—ó –ø–æ–º–∏–ª–∫–∏ API —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:

            –ü–æ–º–∏–ª–∫–∞: {error}

            –ù–∞–≤–µ–¥–∏ 3 –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º:
            - –©–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
            - –Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            - –ß–æ–º—É —Ç–∞–∫ –∫—Ä–∞—â–µ
            """

            try:
                response = openai_client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[
                        {
                            "role": "system",
                            "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ API. –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
                        },
                        {"role": "user", "content": prompt},
                    ],
                    max_tokens=250,
                    temperature=0.2,
                )

                ai_response = response.choices[0].message.content
                print(f"ü§ñ AI –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó: {ai_response}")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                assert ai_response is not None
                assert len(ai_response) > 0
                assert any(
                    word in ai_response.lower()
                    for word in ["–ø—Ä–∏–∫–ª–∞–¥", "–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è", "–ø–æ—è—Å–Ω–µ–Ω–Ω—è", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"]
                )

                print(f"‚úÖ AI –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó {i+1} –æ—Ç—Ä–∏–º–∞–Ω–æ")

            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π {i+1}: {e}")
                continue


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    pytest.main([__file__, "-v", "-s"])
