#!/usr/bin/env python3
"""
CLI —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è AI Swagger Bot —Å–∏—Å—Ç–µ–º–æ—é
"""

import os
# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ TOKENIZERS_PARALLELISM=false –¥–ª—è –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
os.environ['TOKENIZERS_PARALLELISM'] = 'false'

import argparse
import asyncio
import json
import sys
from pathlib import Path
from typing import Optional, Dict
from datetime import datetime

import requests
from dotenv import load_dotenv

from src.config import Config
from src.enhanced_swagger_parser import EnhancedSwaggerParser
from src.rag_engine import RAGEngine
from src.token_manager import TokenManager
from src.sqlite_rag_engine import SQLiteRAGEngine
from src.enhanced_rag_engine import EnhancedRAGEngine

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –í–µ—Ä—Å—ñ—è CLI
VERSION = "1.0.0"


class SwaggerBotCLI:
    def __init__(self):
        self.config = Config()
        self.parser = EnhancedSwaggerParser()
        self.rag_engine = EnhancedRAGEngine()
        self.token_manager = TokenManager()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        self._check_environment()
    
    def _check_environment(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
        required_vars = ['OPENAI_API_KEY', 'JWT_SECRET_KEY']
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {', '.join(missing_vars)}")
            print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª .env –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ")
            sys.exit(1)
    
    def add_swagger(self, url: str, name: Optional[str] = None):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π Swagger —Ñ–∞–π–ª –¥–æ —Å–∏—Å—Ç–µ–º–∏"""
        try:
            print(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Ñ–∞–π–ª—É –∑ {url}...")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Swagger –∑ URL
            response = requests.get(url)
            response.raise_for_status()
            
            swagger_data = response.json()
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–∞–∑–≤—É, —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞
            if not name:
                name = swagger_data.get('info', {}).get('title', 'unknown_api')
                name = name.lower().replace(' ', '_').replace('-', '_')
            
            print(f"‚úÖ Swagger —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {name}")
            
            # –ü–∞—Ä—Å–∏–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ RAG —Å–∏—Å—Ç–µ–º—ñ
            self._process_swagger(swagger_data, name, url)
            
            print(f"üéØ Swagger API '{name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏!")
            
        except requests.RequestException as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Ñ–∞–π–ª—É: {e}")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Swagger —Ñ–∞–π–ª—É: {e}")
            sys.exit(1)
    
    def _process_swagger(self, swagger_data: dict, name: str, url: str = ""):
        """–û–±—Ä–æ–±–ª—è—î Swagger –¥–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –≤ RAG —Å–∏—Å—Ç–µ–º—ñ"""
        try:
            # –ü–∞—Ä—Å–∏–º–æ Swagger
            parsed_data = self.parser.parse_swagger(swagger_data)
            
            # –í–∏—Ç—è–≥—É—î–º–æ base_url –∑ URL
            base_url = ""
            if url:
                from urllib.parse import urlparse
                parsed_url = urlparse(url)
                base_url = f"{parsed_url.scheme}://{parsed_url.netloc}"
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ RAG —Å–∏—Å—Ç–µ–º—ñ
            self.rag_engine.add_swagger_spec(name, parsed_data, base_url)
            
            print(f"üìä –û–±—Ä–æ–±–ª–µ–Ω–æ {len(parsed_data)} –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Swagger: {e}")
            raise
    
    def chat(self, message: str):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É —Ç–∞ –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å"""
        try:
            print(f"ü§ñ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ RAG —Å–∏—Å—Ç–µ–º–∏
            response = self.rag_engine.query(message)
            
            print(f"\nüí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞:\n{response}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
            sys.exit(1)
    
    def list_apis(self):
        """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö API"""
        try:
            apis = self.rag_engine.list_swagger_specs()
            
            if not apis:
                print("üì≠ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö API")
                return
            
            print("üìö –î–æ—Å—Ç—É–ø–Ω—ñ API:")
            for api in apis:
                print(f"  ‚Ä¢ {api}")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É API: {e}")
    
    def remove_api(self, name: str):
        """–í–∏–¥–∞–ª—è—î API –∑ —Å–∏—Å—Ç–µ–º–∏"""
        try:
            print(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è API: {name}")
            
            success = self.rag_engine.remove_swagger_spec(name)
            
            if success:
                print(f"‚úÖ API '{name}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")
            else:
                print(f"‚ùå API '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è API: {e}")
    
    def info(self, name: Optional[str] = None):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API –∞–±–æ —Å–∏—Å—Ç–µ–º—É"""
        try:
            if name:
                # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ API
                print(f"üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API: {name}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ API —ñ—Å–Ω—É—î
                apis = self.rag_engine.list_swagger_specs()
                if name not in apis:
                    print(f"‚ùå API '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    return
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API
                try:
                    # –¢–µ—Å—Ç—É—î–º–æ API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
                    test_query = f"–ü–æ–∫–∞–∂–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API {name}, –≤–∫–ª—é—á–∞—é—á–∏ –≤—Å—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏, —Å—Ö–µ–º–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"
                    response = self.rag_engine.query(test_query)
                    
                    print(f"üîç –ê–Ω–∞–ª—ñ–∑ API '{name}':")
                    print(f"üìù –û–ø–∏—Å: {response[:300]}...")
                    
                    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API
                    print(f"\nüìä –¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
                    print(f"  ‚Ä¢ –ù–∞–∑–≤–∞: {name}")
                    print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–Ω–µ")
                    print(f"  ‚Ä¢ –¢–∏–ø: Swagger/OpenAPI")
                    print(f"  ‚Ä¢ –§–æ—Ä–º–∞—Ç: JSON")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä ChromaDB –¥–ª—è —Ü—å–æ–≥–æ API
                    chroma_path = self.config.CHROMA_DB_PATH
                    if os.path.exists(chroma_path):
                        # –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ —Ü–∏–º API
                        api_files = list(Path(chroma_path).rglob(f"*{name}*"))
                        if api_files:
                            total_size = sum(f.stat().st_size for f in api_files if f.is_file())
                            print(f"  ‚Ä¢ –†–æ–∑–º—ñ—Ä –≤ ChromaDB: {total_size / 1024:.2f} KB")
                        else:
                            print(f"  ‚Ä¢ –†–æ–∑–º—ñ—Ä –≤ ChromaDB: –ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: {e}")
                    print("‚ÑπÔ∏è  API –¥–æ—Å—Ç—É–ø–Ω–µ, –∞–ª–µ –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ–±–º–µ–∂–µ–Ω–∞")
                
            else:
                # –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
                print("üîç –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É:")
                print(f"  ‚Ä¢ OpenAI –º–æ–¥–µ–ª—å: {self.config.OPENAI_MODEL}")
                print(f"  ‚Ä¢ ChromaDB —à–ª—è—Ö: {self.config.CHROMA_DB_PATH}")
                print(f"  ‚Ä¢ Chunk —Ä–æ–∑–º—ñ—Ä: {self.config.CHUNK_SIZE}")
                print(f"  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É: {self.config.SEARCH_K_RESULTS}")
                
                # –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω—ñ–≤
                token_info = self.token_manager.get_token_info()
                print(f"  ‚Ä¢ OpenAI API –∫–ª—é—á: {token_info['openai_api_key']}")
                print(f"  ‚Ä¢ JWT —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á: {token_info['jwt_secret_key']}")
                
                # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ ChromaDB
                chroma_path = self.config.CHROMA_DB_PATH
                if os.path.exists(chroma_path):
                    print(f"\nüóÑÔ∏è  ChromaDB —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
                    print(f"  ‚Ä¢ –®–ª—è—Ö: {os.path.abspath(chroma_path)}")
                    
                    # –†–æ–∑–º—ñ—Ä –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                    total_size = sum(f.stat().st_size for f in Path(chroma_path).rglob('*') if f.is_file())
                    print(f"  ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {total_size / 1024 / 1024:.2f} MB")
                    
                    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
                    file_count = len(list(Path(chroma_path).rglob('*')))
                    print(f"  ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤: {file_count}")
                    
                    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫
                    folders = [d for d in Path(chroma_path).iterdir() if d.is_dir()]
                    if folders:
                        print(f"  ‚Ä¢ –ü–∞–ø–∫–∏: {', '.join([d.name for d in folders])}")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª–µ–∫—Ü—ñ–π
                    try:
                        client = self.rag_engine.client
                        collections = client.list_collections()
                        if collections:
                            print(f"  ‚Ä¢ –ö–æ–ª–µ–∫—Ü—ñ—ó: {', '.join([c.name for c in collections])}")
                        else:
                            print(f"  ‚Ä¢ –ö–æ–ª–µ–∫—Ü—ñ—ó: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    except Exception as e:
                        print(f"  ‚Ä¢ –ö–æ–ª–µ–∫—Ü—ñ—ó: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ({e})")
                
                # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API
                apis = self.rag_engine.list_swagger_specs()
                if apis:
                    print(f"\nüìö API —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
                    print(f"  ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å API: {len(apis)}")
                    print(f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ñ API: {', '.join(apis)}")
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–∂–Ω–µ API
                    for api in apis:
                        print(f"\n  üîç API: {api}")
                        try:
                            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å chunks –¥–ª—è —Ü—å–æ–≥–æ API
                            collection = self.rag_engine.collection
                            if collection:
                                # –®—É–∫–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ API
                                results = collection.query(
                                    query_texts=["API information"],
                                    n_results=100,
                                    where={"api_name": api}
                                )
                                if results and 'metadatas' in results:
                                    chunk_count = len(results['metadatas'][0]) if results['metadatas'][0] else 0
                                    print(f"    ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å chunks: {chunk_count}")
                                else:
                                    print(f"    ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å chunks: –ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ")
                            else:
                                print(f"    ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å chunks: –ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ")
                        except Exception as e:
                            print(f"    ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å chunks: –ü–æ–º–∏–ª–∫–∞ ({e})")
                        
                        # –†–æ–∑–º—ñ—Ä API –≤ ChromaDB
                        try:
                            api_files = list(Path(chroma_path).rglob(f"*{api}*"))
                            if api_files:
                                api_size = sum(f.stat().st_size for f in api_files if f.is_file())
                                print(f"    ‚Ä¢ –†–æ–∑–º—ñ—Ä –≤ ChromaDB: {api_size / 1024:.2f} KB")
                            else:
                                print(f"    ‚Ä¢ –†–æ–∑–º—ñ—Ä –≤ ChromaDB: –ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ")
                        except Exception as e:
                            print(f"    ‚Ä¢ –†–æ–∑–º—ñ—Ä –≤ ChromaDB: –ü–æ–º–∏–ª–∫–∞ ({e})")
                
                # –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                print(f"\nüíª –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
                print(f"  ‚Ä¢ Python –≤–µ—Ä—Å—ñ—è: {sys.version.split()[0]}")
                print(f"  ‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}")
                print(f"  ‚Ä¢ –†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {os.getcwd()}")
                print(f"  ‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {os.getenv('USER', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {e}")
    
    def search(self, query: str, api_name: Optional[str] = None):
        """–®—É–∫–∞—î –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º"""
        try:
            print(f"üîç –ü–æ—à—É–∫: {query}")
            if api_name:
                print(f"üì° –û–±–º–µ–∂–µ–Ω–æ –¥–æ API: {api_name}")
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ RAG
            response = self.rag_engine.query(query)
            
            print(f"\nüîé –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n{response}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")
    
    def export_api(self, name: str, output_file: Optional[str] = None):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î API —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é"""
        try:
            print(f"üì§ –ï–∫—Å–ø–æ—Ä—Ç API: {name}")
            
            if not output_file:
                output_file = f"{name}_swagger.json"
            
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –µ–∫—Å–ø–æ—Ä—Ç—É
            print(f"‚úÖ API '{name}' –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ {output_file}")
            print("‚ÑπÔ∏è  –§—É–Ω–∫—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
    
    def import_api(self, file_path: str, name: Optional[str] = None):
        """–Ü–º–ø–æ—Ä—Ç—É—î API —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑ —Ñ–∞–π–ª—É"""
        try:
            print(f"üì• –Ü–º–ø–æ—Ä—Ç API –∑ —Ñ–∞–π–ª—É: {file_path}")
            
            if not os.path.exists(file_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
                return
            
            # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                swagger_data = json.load(f)
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–∞–∑–≤—É, —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞
            if not name:
                name = swagger_data.get('info', {}).get('title', 'imported_api')
                name = name.lower().replace(' ', '_').replace('-', '_')
            
            print(f"‚úÖ Swagger —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {name}")
            
            # –ü–∞—Ä—Å–∏–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
            self._process_swagger(swagger_data, name)
            
            print(f"üéØ API '{name}' —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    
    def clear_all(self):
        """–û—á–∏—â–∞—î –≤—Å—ñ API –∑ —Å–∏—Å—Ç–µ–º–∏"""
        try:
            print("üßπ –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö API...")
            
            apis = self.rag_engine.list_swagger_specs()
            if not apis:
                print("üì≠ –ù–µ–º–∞—î API –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è")
                return
            
            for api in apis:
                self.rag_engine.remove_swagger_spec(api)
                print(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ API: {api}")
            
            print("‚úÖ –í—Å—ñ API –æ—á–∏—â–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")
    
    def stats(self):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏"""
        try:
            print("üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏:")
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å API
            apis = self.rag_engine.list_swagger_specs()
            print(f"  ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å API: {len(apis)}")
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ ChromaDB
            chroma_path = self.config.CHROMA_DB_PATH
            if os.path.exists(chroma_path):
                print(f"\nüóÑÔ∏è  ChromaDB —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                
                # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
                total_size = sum(f.stat().st_size for f in Path(chroma_path).rglob('*') if f.is_file())
                print(f"  ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {total_size / 1024 / 1024:.2f} MB")
                
                # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –ø–∞–ø–æ–∫
                files = list(Path(chroma_path).rglob('*'))
                file_count = len([f for f in files if f.is_file()])
                folder_count = len([f for f in files if f.is_dir()])
                print(f"  ‚Ä¢ –§–∞–π–ª—ñ–≤: {file_count}")
                print(f"  ‚Ä¢ –ü–∞–ø–æ–∫: {folder_count}")
                
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫
                top_level = [d for d in Path(chroma_path).iterdir() if d.is_dir()]
                if top_level:
                    print(f"  ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ñ –ø–∞–ø–∫–∏: {', '.join([d.name for d in top_level])}")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–∂–Ω—É –ø–∞–ø–∫—É
                for folder in top_level:
                    if folder.is_dir():
                        folder_size = sum(f.stat().st_size for f in folder.rglob('*') if f.is_file())
                        folder_files = len(list(folder.rglob('*')))
                        print(f"    ‚Ä¢ {folder.name}: {folder_size / 1024:.2f} KB, {folder_files} —Ñ–∞–π–ª—ñ–≤")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª–µ–∫—Ü—ñ–π
                try:
                    client = self.rag_engine.client
                    collections = client.list_collections()
                    if collections:
                        print(f"\nüìö –ö–æ–ª–µ–∫—Ü—ñ—ó ChromaDB:")
                        for collection in collections:
                            try:
                                count = collection.count()
                                print(f"  ‚Ä¢ {collection.name}: {count} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
                            except Exception as e:
                                print(f"  ‚Ä¢ {collection.name}: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ ({e})")
                    else:
                        print(f"\nüìö –ö–æ–ª–µ–∫—Ü—ñ—ó ChromaDB: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                except Exception as e:
                    print(f"\nüìö –ö–æ–ª–µ–∫—Ü—ñ—ó ChromaDB: –ü–æ–º–∏–ª–∫–∞ ({e})")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ API
            if apis:
                print(f"\nüìö API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                total_chunks = 0
                
                for api in apis:
                    print(f"  üîç API: {api}")
                    
                    # –†–æ–∑–º—ñ—Ä API
                    try:
                        api_files = list(Path(chroma_path).rglob(f"*{api}*"))
                        if api_files:
                            api_size = sum(f.stat().st_size for f in api_files if f.is_file())
                            print(f"    ‚Ä¢ –†–æ–∑–º—ñ—Ä: {api_size / 1024:.2f} KB")
                        else:
                            print(f"    ‚Ä¢ –†–æ–∑–º—ñ—Ä: –ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ")
                    except Exception as e:
                        print(f"    ‚Ä¢ –†–æ–∑–º—ñ—Ä: –ü–æ–º–∏–ª–∫–∞ ({e})")
                    
                    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å chunks
                    try:
                        collection = self.rag_engine.collection
                        if collection:
                            # –®—É–∫–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ API
                            results = collection.query(
                                query_texts=["API information"],
                                n_results=100,
                                where={"api_name": api}
                            )
                            if results and 'metadatas' in results:
                                chunk_count = len(results['metadatas'][0]) if results['metadatas'][0] else 0
                                total_chunks += chunk_count
                                print(f"    ‚Ä¢ Chunks: {chunk_count}")
                            else:
                                print(f"    ‚Ä¢ Chunks: –ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ")
                        else:
                            print(f"    ‚Ä¢ Chunks: –ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ")
                    except Exception as e:
                        print(f"    ‚Ä¢ Chunks: –ü–æ–º–∏–ª–∫–∞ ({e})")
                
                print(f"\nüìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:")
                print(f"  ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å chunks: {total_chunks}")
                print(f"  ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä –Ω–∞ API: {total_size / len(apis) / 1024 / 1024:.2f} MB")
            
            # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
            print(f"\n‚öôÔ∏è  –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:")
            print(f"  ‚Ä¢ OpenAI –º–æ–¥–µ–ª—å: {self.config.OPENAI_MODEL}")
            print(f"  ‚Ä¢ Chunk —Ä–æ–∑–º—ñ—Ä: {self.config.CHUNK_SIZE}")
            print(f"  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É: {self.config.SEARCH_K_RESULTS}")
            
            # –°–∏—Å—Ç–µ–º–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print(f"\nüíª –°–∏—Å—Ç–µ–º–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            import psutil
            try:
                memory = psutil.virtual_memory()
                print(f"  ‚Ä¢ RAM –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {memory.percent}% ({memory.used / 1024 / 1024 / 1024:.1f} GB / {memory.total / 1024 / 1024 / 1024:.1f} GB)")
                
                disk = psutil.disk_usage('.')
                print(f"  ‚Ä¢ –î–∏—Å–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {disk.percent}% ({disk.used / 1024 / 1024 / 1024:.1f} GB / {disk.total / 1024 / 1024 / 1024:.1f} GB)")
                
                cpu_percent = psutil.cpu_percent(interval=1)
                print(f"  ‚Ä¢ CPU –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {cpu_percent}%")
            except ImportError:
                print(f"  ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: psutil –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                print(f"  ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ü–æ–º–∏–ª–∫–∞ ({e})")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def test_api(self, name: str):
        """–¢–µ—Å—Ç—É—î API –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å"""
        try:
            print(f"üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API: {name}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ API —ñ—Å–Ω—É—î
            apis = self.rag_engine.list_swagger_specs()
            if name not in apis:
                print(f"‚ùå API '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –¢–µ—Å—Ç—É—î–º–æ –∑–∞–ø–∏—Ç
            test_query = "–ü–æ–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API"
            print(f"üîç –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç: {test_query}")
            
            response = self.rag_engine.query(test_query)
            print(f"‚úÖ API '{name}' –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")
            print(f"üìù –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response[:200]}...")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API: {e}")
    
    def version(self):
        """–ü–æ–∫–∞–∑—É—î –≤–µ—Ä—Å—ñ—é CLI"""
        print(f"üöÄ AI Swagger Bot CLI v{VERSION}")
        print(f"üìÖ Python {sys.version.split()[0]}")
        print(f"üîß ChromaDB + OpenAI GPT-4")
    
    def status(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
        try:
            print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:")
            print(f"  ‚Ä¢ Python: {sys.version.split()[0]}")
            print(f"  ‚Ä¢ ChromaDB: ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print(f"  ‚Ä¢ OpenAI: ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print(f"  ‚Ä¢ ChromaDB –ø–∞–ø–∫–∞: ‚úÖ –Ü—Å–Ω—É—î")
            print(f"  ‚Ä¢ .env —Ñ–∞–π–ª: ‚úÖ –Ü—Å–Ω—É—î")
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å API
            apis = self.rag_engine.list_swagger_specs()
            print(f"  ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å API: {len(apis)}")
            print(f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ñ API: {', '.join(apis) if apis else '–ù–µ–º–∞—î'}")
            
            # JWT —Ç–æ–∫–µ–Ω–∏
            token_info = self.token_manager.get_all_tokens_info()
            print(f"\nüîë JWT —Ç–æ–∫–µ–Ω–∏:")
            print(f"  ‚Ä¢ JWT —Ç–æ–∫–µ–Ω: {'‚úÖ –ù–∞—è–≤–Ω–∏–π' if token_info['jwt_token'] else '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
            print(f"  ‚Ä¢ JWT —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á: {'‚úÖ –ù–∞—è–≤–Ω–∏–π' if token_info['jwt_secret_key'] else '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
            print(f"  ‚Ä¢ OpenAI API –∫–ª—é—á: {'‚úÖ –ù–∞—è–≤–Ω–∏–π' if token_info['openai_api_key'] else '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
            print(f"  ‚Ä¢ API –±–∞–∑–æ–≤–∏–π URL: {'‚úÖ –ù–∞—è–≤–Ω–∏–π' if token_info['api_base_url'] else '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π'}")
            print(f"  ‚Ä¢ –ß–∞—Å –∂–∏—Ç—Ç—è JWT: {token_info['jwt_expires_in']} —Å–µ–∫—É–Ω–¥")
            
            if token_info['api_specific_tokens']:
                print(f"  ‚Ä¢ –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ç–æ–∫–µ–Ω–∏ API: {', '.join(token_info['api_specific_tokens'].keys())}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
    
    def interactive_mode(self):
        """–ó–∞–ø—É—Å–∫–∞—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º"""
        print("üéÆ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º")
        print("üîë JWT —Ç–∞ API –∫–æ–º–∞–Ω–¥–∏:")
        print("  ‚Ä¢ set-jwt <api_name> <token> - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ JWT —Ç–æ–∫–µ–Ω")
        print("  ‚Ä¢ execute <api_name> <method> <path> [data] - –≤–∏–∫–æ–Ω–∞—Ç–∏ API –∑–∞–ø–∏—Ç")
        print("  ‚Ä¢ test-endpoint <api_name> <method> <path> [data] - —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç")
        print("  ‚Ä¢ request-history [api_name] - –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–ø–∏—Ç—ñ–≤")
        print("  ‚Ä¢ api-testing - —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API")
        print()
        print("üîß –°–∏—Å—Ç–µ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
        print("  ‚Ä¢ clear-database - –æ—á–∏—Å—Ç–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
        print("  ‚Ä¢ reload-swagger <url> [name] - –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Swagger")
        print("  ‚Ä¢ reset-system - –ø–æ–≤–Ω–∏–π —Å–∫–∏–¥ —Å–∏—Å—Ç–µ–º–∏")
        print("  ‚Ä¢ quick-reload <url> [name] - —à–≤–∏–¥–∫–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
        print("  ‚Ä¢ show-prompts <name> - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏ API")
        print("  ‚Ä¢ export-prompts <name> [file] - –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏")
        print("  ‚Ä¢ db-info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
        print("  ‚Ä¢ stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏")
        print("  ‚Ä¢ version - –≤–µ—Ä—Å—ñ—è CLI")
        print("  ‚Ä¢ quit - –≤–∏–π—Ç–∏")
        
        while True:
            try:
                command = input("\nü§ñ > ").strip()
                
                if command.lower() == 'quit':
                    print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                    break
                elif command.lower() == 'help':
                    print("üìö –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
                    print("  add <url> [name] - –î–æ–¥–∞—Ç–∏ API")
                    print("  chat <message> - –ß–∞—Ç –∑ –±–æ—Ç–æ–º")
                    print("  list/ls/show - –°–ø–∏—Å–æ–∫ API")
                    print("  remove <name> - –í–∏–¥–∞–ª–∏—Ç–∏ API")
                    print("  info [name] - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API –∞–±–æ —Å–∏—Å—Ç–µ–º—É")
                    print("  search <query> [api] - –ü–æ—à—É–∫ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤")
                    print("  export <name> [file] - –ï–∫—Å–ø–æ—Ä—Ç API")
                    print("  import <file> [name] - –Ü–º–ø–æ—Ä—Ç API")
                    print("  clear - –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ API")
                    print("  stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏")
                    print("  test <name> - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API")
                    print("  status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏")
                    print("  version - –í–µ—Ä—Å—ñ—è CLI")
                    print("  analyze <name> - –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ API")
                    print("  db-info - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
                    print("  clear-db - –û—á–∏—Å—Ç–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
                    print("  reload <url> [name] - –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ API")
                    print("  reset - –°–∫–∏–Ω—É—Ç–∏ —Å–∏—Å—Ç–µ–º—É")
                    print("  quick-reload <url> [name] - –®–≤–∏–¥–∫–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
                    print("  show-prompts <name> - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏")
                    print("  export-prompts <name> [file] - –ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç—ñ–≤")
                    print("  exit - –í–∏—Ö—ñ–¥")
                elif command.startswith('add '):
                    parts = command.split(' ', 2)
                    if len(parts) >= 2:
                        url = parts[1]
                        name = parts[2] if len(parts) > 2 else None
                        self.add_swagger(url, name)
                    else:
                        print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: add <url> [name]")
                elif command.startswith('chat '):
                    message = command[5:]
                    self.chat(message)
                elif command in ['list', 'ls', 'show', 'apis', 'api']:
                    self.list_apis()
                elif command.startswith('remove '):
                    name = command[7:]
                    self.remove_api(name)
                elif command.startswith('info '):
                    name = command[5:]
                    self.info(name)
                elif command == 'info':
                    self.info()
                elif command.startswith('search '):
                    query = command[7:]
                    self.search(query)
                elif command.startswith('export '):
                    parts = command.split(' ', 2)
                    if len(parts) >= 2:
                        name = parts[1]
                        file = parts[2] if len(parts) > 2 else None
                        self.export_api(name, file)
                    else:
                        print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: export <name> [file]")
                elif command.startswith('import '):
                    parts = command.split(' ', 2)
                    if len(parts) >= 2:
                        file = parts[1]
                        name = parts[2] if len(parts) > 2 else None
                        self.import_api(file, name)
                    else:
                        print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: import <file> [name]")
                elif command == 'clear':
                    self.clear_all()
                elif command == 'stats':
                    self.stats()
                elif command.startswith('test '):
                    name = command[5:]
                    self.test_api(name)
                elif command == 'status':
                    self.status()
                elif command == 'version':
                    self.version()
                elif command.startswith('analyze '):
                    name = command[8:]
                    if name:
                        self.analyze_swagger(name)
                    else:
                        print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: analyze <name>")
                elif command == 'db-info':
                    self.db_info()
                elif command == 'clear-db':
                    self.clear_database()
                elif command.startswith('reload '):
                    parts = command.split(' ', 2)
                    if len(parts) >= 2:
                        url = parts[1]
                        name = parts[2] if len(parts) > 2 else None
                        self.reload_swagger(url, name)
                    else:
                        print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: reload <url> [name]")
                elif command == 'reset':
                    self.reset_system()
                elif command.startswith('quick-reload '):
                    parts = command.split(' ', 2)
                    if len(parts) >= 2:
                        url = parts[1]
                        name = parts[2] if len(parts) > 2 else None
                        self.quick_reload(url, name)
                    else:
                        print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: quick-reload <url> [name]")
                elif command.startswith('show-prompts '):
                    name = command[13:]
                    if name:
                        self.show_prompts(name)
                    else:
                        print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: show-prompts <name>")
                elif command.startswith('export-prompts '):
                    parts = command.split(' ', 2)
                    if len(parts) >= 2:
                        name = parts[1]
                        file = parts[2] if len(parts) > 2 else None
                        self.export_prompts(name, file)
                    else:
                        print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: export-prompts <name> [file]")
                elif command.lower() in ['api-testing', 'api-test', 'testing']:
                    self.interactive_api_testing()
                elif command.lower() in ['set-jwt', 'set-token', 'jwt']:
                    print("üîë –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞:")
                    api_name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É API: ").strip()
                    token = input("–í–≤–µ–¥—ñ—Ç—å JWT —Ç–æ–∫–µ–Ω: ").strip()
                    if api_name and token:
                        self.set_jwt_token(api_name, token)
                    else:
                        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
                elif command.lower() in ['execute', 'request', 'api-request']:
                    print("üöÄ –í–∏–∫–æ–Ω–∞–Ω–Ω—è API –∑–∞–ø–∏—Ç—É:")
                    api_name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É API: ").strip()
                    method = input("–í–≤–µ–¥—ñ—Ç—å HTTP –º–µ—Ç–æ–¥ (GET/POST/PUT/PATCH/DELETE): ").strip().upper()
                    path = input("–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É: ").strip()
                    data_input = input("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É (JSON –∞–±–æ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É): ").strip()
                    
                    data = None
                    if data_input:
                        try:
                            data = json.loads(data_input)
                        except:
                            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON")
                            continue
                    
                    if api_name and method and path:
                        self.execute_api_request(api_name, method, path, data)
                    else:
                        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
                elif command.lower() in ['test-endpoint', 'test-api']:
                    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É:")
                    api_name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É API: ").strip()
                    method = input("–í–≤–µ–¥—ñ—Ç—å HTTP –º–µ—Ç–æ–¥: ").strip().upper()
                    path = input("–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É: ").strip()
                    data_input = input("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É (JSON –∞–±–æ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É): ").strip()
                    
                    data = None
                    if data_input:
                        try:
                            data = json.loads(data_input)
                        except:
                            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON")
                            continue
                    
                    if api_name and method and path:
                        self.test_api_endpoint(api_name, method, path, data)
                    else:
                        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ")
                elif command.lower() in ['history', 'request-history']:
                    api_name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É API (Enter –¥–ª—è –≤—Å—ñ—Ö): ").strip() or None
                    self.show_request_history(api_name)
                else:
                    print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å 'help' –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏")
                    
            except KeyboardInterrupt:
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    def analyze_swagger(self, name: str):
        """–î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª—ñ–∑—É—î Swagger API"""
        try:
            print(f"üîç –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ Swagger API: {name}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ API —ñ—Å–Ω—É—î
            apis = self.rag_engine.list_swagger_specs()
            if name not in apis:
                print(f"‚ùå API '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            print(f"‚úÖ API '{name}' –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ—á–∏–Ω–∞—é –∞–Ω–∞–ª—ñ–∑...")
            
            # 1. –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            print(f"\nüìã –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
            print(f"  ‚Ä¢ –ù–∞–∑–≤–∞: {name}")
            print(f"  ‚Ä¢ –¢–∏–ø: Swagger/OpenAPI")
            print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–Ω–µ")
            
            # 2. –ê–Ω–∞–ª—ñ–∑ —á–µ—Ä–µ–∑ RAG
            print(f"\nüîç –ê–Ω–∞–ª—ñ–∑ —á–µ—Ä–µ–∑ RAG —Å–∏—Å—Ç–µ–º–∞:")
            
            # –ê–Ω–∞–ª—ñ–∑ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
            endpoints_query = f"–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –≤ API {name} –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –æ–ø–∏—Å–æ–º, –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏"
            print(f"  üì° –ó–∞–ø–∏—Ç: –ê–Ω–∞–ª—ñ–∑ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤...")
            try:
                endpoints_response = self.rag_engine.query(endpoints_query)
                print(f"  üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {endpoints_response[:200]}...")
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤: {e}")
            
            # –ê–Ω–∞–ª—ñ–∑ —Å—Ö–µ–º
            schemas_query = f"–ü–æ–∫–∞–∂–∏ –≤—Å—ñ —Å—Ö–µ–º–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –º–æ–¥–µ–ª—ñ –≤ API {name}"
            print(f"  üì° –ó–∞–ø–∏—Ç: –ê–Ω–∞–ª—ñ–∑ —Å—Ö–µ–º...")
            try:
                schemas_response = self.rag_engine.query(schemas_query)
                print(f"  üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {schemas_response[:200]}...")
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å—Ö–µ–º: {e}")
            
            # –ê–Ω–∞–ª—ñ–∑ –±–µ–∑–ø–µ–∫–∏
            security_query = f"–ü–æ–∫–∞–∂–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–µ–∑–ø–µ–∫—É —Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –≤ API {name}"
            print(f"  üì° –ó–∞–ø–∏—Ç: –ê–Ω–∞–ª—ñ–∑ –±–µ–∑–ø–µ–∫–∏...")
            try:
                security_response = self.rag_engine.query(security_query)
                print(f"  üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {security_response[:200]}...")
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –±–µ–∑–ø–µ–∫–∏: {e}")
            
            # 3. –¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            print(f"\n‚öôÔ∏è  –¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
            
            # –†–æ–∑–º—ñ—Ä –≤ ChromaDB
            chroma_path = self.config.CHROMA_DB_PATH
            if os.path.exists(chroma_path):
                api_files = list(Path(chroma_path).rglob(f"*{name}*"))
                if api_files:
                    total_size = sum(f.stat().st_size for f in api_files if f.is_file())
                    print(f"  ‚Ä¢ –†–æ–∑–º—ñ—Ä –≤ ChromaDB: {total_size / 1024:.2f} KB")
                    print(f"  ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤: {len(api_files)}")
                else:
                    print(f"  ‚Ä¢ –†–æ–∑–º—ñ—Ä –≤ ChromaDB: –ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ")
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å chunks
            try:
                collection = self.rag_engine.collection
                if collection:
                    # –®—É–∫–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ API
                    results = collection.query(
                        query_texts=["API information"],
                        n_results=100,
                        where={"api_name": name}
                    )
                    if results and 'metadatas' in results:
                        chunk_count = len(results['metadatas'][0]) if results['metadatas'][0] else 0
                        print(f"  ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å chunks: {chunk_count}")
                    else:
                        print(f"  ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å chunks: –ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ")
                else:
                    print(f"  ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å chunks: –ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ")
            except Exception as e:
                print(f"  ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å chunks: –ü–æ–º–∏–ª–∫–∞ ({e})")
            
            # 4. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API
            print(f"\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API:")
            
            # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
            test_query = f"–ü–æ–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API {name}"
            print(f"  üì° –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç: {test_query}")
            try:
                test_response = self.rag_engine.query(test_query)
                print(f"  ‚úÖ API –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")
                print(f"  üìù –í—ñ–¥–ø–æ–≤—ñ–¥—å: {test_response[:150]}...")
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
            
            # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
            
            # –ê–Ω–∞–ª—ñ–∑ —á–µ—Ä–µ–∑ RAG –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
            recommendations_query = f"–ù–∞–¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è API {name}, –Ω–∞–π–∫—Ä–∞—â—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ç–∞ –º–æ–∂–ª–∏–≤—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"
            print(f"  üì° –ó–∞–ø–∏—Ç: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π...")
            try:
                recommendations_response = self.rag_engine.query(recommendations_query)
                print(f"  üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: {recommendations_response[:200]}...")
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {e}")
            
            print(f"\n‚úÖ –ê–Ω–∞–ª—ñ–∑ API '{name}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É API: {e}")
    
    def db_info(self):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
        try:
            print("üóÑÔ∏è  –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö:")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ SQLite –±–∞–∑—É –¥–∞–Ω–∏—Ö
            db_info = self.rag_engine.get_database_info()
            
            if not db_info:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
                return
            
            print(f"üìÅ –®–ª—è—Ö: {db_info.get('database_path', 'N/A')}")
            print(f"üìè –†–æ–∑–º—ñ—Ä: {db_info.get('database_size_mb', 0)} MB")
            print(f"üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å API: {db_info.get('api_count', 0)}")
            print(f"üîó –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤: {db_info.get('endpoint_count', 0)}")
            print(f"üìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–º–ø—Ç—ñ–≤: {db_info.get('prompt_count', 0)}")
            print(f"üß† –ö—ñ–ª—å–∫—ñ—Å—Ç—å embeddings: {db_info.get('embedding_count', 0)}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ –∫–æ–∂–Ω–æ–º—É API
            apis = self.rag_engine.list_swagger_specs()
            if apis:
                print(f"\nüìö –î–µ—Ç–∞–ª—ñ –ø–æ API:")
                for api_name in apis:
                    print(f"  ‚Ä¢ {api_name}")
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è —Ü—å–æ–≥–æ API
                    prompts = self.rag_engine.create_specialized_prompts(api_name)
                    if prompts:
                        print(f"    –ü—Ä–æ–º–ø—Ç–∏: {len(prompts)} —Ç–∏–ø—ñ–≤")
                        for prompt_type in prompts.keys():
                            print(f"      - {prompt_type}")
            
            print(f"\nüè• –ó–¥–æ—Ä–æ–≤'—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:")
            print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞")
            print(f"  ‚Ä¢ –¢–∏–ø: SQLite")
            print(f"  ‚Ä¢ –†–æ–∑–º—ñ—Ä: ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–∏–π ({db_info.get('database_size_mb', 0)} MB)")
            print(f"  ‚Ä¢ API: ‚úÖ {db_info.get('api_count', 0)} API")
            print(f"  ‚Ä¢ –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏: ‚úÖ {db_info.get('endpoint_count', 0)} –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤")
            
            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")

    def clear_database(self):
        """–ü–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–∞—î –±–∞–∑—É –¥–∞–Ω–∏—Ö SQLite"""
        try:
            print("üóÑÔ∏è  –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite...")
            
            # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ API
            apis = self.rag_engine.list_swagger_specs()
            if apis:
                print(f"üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è {len(apis)} API...")
                for api in apis:
                    self.rag_engine.remove_swagger_spec(api)
                    print(f"  üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ API: {api}")
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            db_path = self.rag_engine.db_path
            if os.path.exists(db_path):
                try:
                    os.remove(db_path)
                    print(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {db_path}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ RAG –¥–≤–∏–≥—É–Ω
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ RAG –¥–≤–∏–≥—É–Ω–∞...")
            self.rag_engine = EnhancedRAGEngine()
            
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–∞!")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    
    def reload_swagger(self, url: str, name: Optional[str] = None):
        """–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î Swagger API (–æ—á–∏—â–∞—î —Ç–∞ –¥–æ–¥–∞—î –∑–∞–Ω–æ–≤–æ)"""
        try:
            print(f"üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger API –∑ {url}...")
            
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ API
            if name:
                print(f"üßπ –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è API '{name}'...")
                self.rag_engine.remove_swagger_spec(name)
            else:
                # –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞, –æ—á–∏—â–∞—î–º–æ –≤—Å—ñ API
                print("üßπ –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö API...")
                apis = self.rag_engine.list_swagger_specs()
                for api in apis:
                    self.rag_engine.remove_swagger_spec(api)
                    print(f"  üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ API: {api}")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Swagger –∑–∞–Ω–æ–≤–æ
            print(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Ñ–∞–π–ª—É...")
            response = requests.get(url)
            response.raise_for_status()
            
            swagger_data = response.json()
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–∞–∑–≤—É, —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞
            if not name:
                name = swagger_data.get('info', {}).get('title', 'unknown_api')
                name = name.lower().replace(' ', '_').replace('-', '_')
            
            print(f"‚úÖ Swagger —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {name}")
            
            # –ü–∞—Ä—Å–∏–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ RAG —Å–∏—Å—Ç–µ–º—ñ
            self._process_swagger(swagger_data, name, url)
            
            print(f"üéØ Swagger API '{name}' —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            
        except requests.RequestException as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger —Ñ–∞–π–ª—É: {e}")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger: {e}")
            sys.exit(1)
    
    def reset_system(self):
        """–ü–æ–≤–Ω—ñ—Å—Ç—é —Å–∫–∏–¥–∞—î —Å–∏—Å—Ç–µ–º—É (–æ—á–∏—â–∞—î –ë–î —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î)"""
        try:
            print("üîÑ –ü–æ–≤–Ω–µ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...")
            
            # –û—á–∏—â–∞—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            self.clear_database()
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ CLI
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ CLI...")
            self.__init__()
            
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é —Å–∫–∏–Ω—É—Ç–∞!")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏: {e}")
    
    def quick_reload(self, url: str, name: Optional[str] = None):
        """–®–≤–∏–¥–∫–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –æ—á–∏—â–µ–Ω–Ω—è–º —Ç—ñ–ª—å–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API"""
        try:
            print(f"‚ö° –®–≤–∏–¥–∫–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API...")
            
            if not name:
                # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∑ URL –∞–±–æ Swagger
                response = requests.get(url)
                response.raise_for_status()
                swagger_data = response.json()
                name = swagger_data.get('info', {}).get('title', 'unknown_api')
                name = name.lower().replace(' ', '_').replace('-', '_')
            
            print(f"üéØ –¶—ñ–ª—å–æ–≤–µ API: {name}")
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü–µ–π API
            self.rag_engine.remove_swagger_spec(name)
            print(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π API: {name}")
            
            # –î–æ–¥–∞—î–º–æ –∑–∞–Ω–æ–≤–æ
            self.add_swagger(url, name)
            
            print(f"‚úÖ API '{name}' —à–≤–∏–¥–∫–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")

    def show_prompts(self, name: str):
        """–ü–æ–∫–∞–∑—É—î —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API"""
        try:
            print(f"üìù –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è API '{name}':")
            print("=" * 60)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏
            prompts = self.rag_engine.create_specialized_prompts(name)
            
            if not prompts:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è —Ü—å–æ–≥–æ API")
                return
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–∂–µ–Ω —Ç–∏–ø –ø—Ä–æ–º–ø—Ç—É
            for prompt_type, prompt_content in prompts.items():
                print(f"\nüéØ {prompt_type.upper().replace('_', ' ')}:")
                print("-" * 40)
                print(prompt_content)
                print("=" * 60)
            
            print(f"\n‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(prompts)} —Ç–∏–ø—ñ–≤ –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è API '{name}'")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤: {e}")
    
    def export_prompts(self, name: str, output_file: Optional[str] = None):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ —É —Ñ–∞–π–ª"""
        try:
            print(f"üì§ –ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è API '{name}'...")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏
            prompts = self.rag_engine.create_specialized_prompts(name)
            
            if not prompts:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É")
                return
            
            # –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
            export_data = {
                "api_name": name,
                "generated_at": str(datetime.now()),
                "prompts": prompts
            }
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ–∞–π–ª –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
            if not output_file:
                output_file = f"prompts_{name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            # –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —É JSON
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –ü—Ä–æ–º–ø—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É —Ñ–∞–π–ª: {output_file}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –ø—Ä–æ–º–ø—Ç—ñ–≤: {e}")

    def set_jwt_token(self, api_name: str, token: str, expires_in: int = 3600):
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î JWT —Ç–æ–∫–µ–Ω –¥–ª—è API.
        
        Args:
            api_name: –ù–∞–∑–≤–∞ API
            token: JWT —Ç–æ–∫–µ–Ω
            expires_in: –ß–∞—Å –∂–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        try:
            print(f"üîë –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è API '{api_name}'...")
            
            self.rag_engine.set_jwt_token(api_name, token, expires_in)
            
            print(f"‚úÖ JWT —Ç–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è API '{api_name}'")
            print(f"‚è∞ –¢–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π {expires_in} —Å–µ–∫—É–Ω–¥")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def execute_api_request(self, api_name: str, method: str, path: str, 
                           data: Optional[Dict] = None, params: Optional[Dict] = None):
        """
        –í–∏–∫–æ–Ω—É—î API –∑–∞–ø–∏—Ç.
        
        Args:
            api_name: –ù–∞–∑–≤–∞ API
            method: HTTP –º–µ—Ç–æ–¥
            path: –®–ª—è—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
            data: –î–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Ç—É (–¥–ª—è POST/PUT/PATCH)
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É (–¥–ª—è GET)
        """
        try:
            print(f"üöÄ –í–∏–∫–æ–Ω–∞–Ω–Ω—è API –∑–∞–ø–∏—Ç—É...")
            print(f"üì° {method.upper()} {path}")
            print(f"üîó API: {api_name}")
            
            if data:
                print(f"üì§ –î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É: {json.dumps(data, indent=2, ensure_ascii=False)}")
            
            if params:
                print(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {json.dumps(params, indent=2, ensure_ascii=False)}")
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
            success, result, message = self.rag_engine.execute_api_request(
                api_name, method, path, data, params
            )
            
            if success:
                print(f"‚úÖ –ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                print(json.dumps(result, indent=2, ensure_ascii=False))
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É:")
                print(message)
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API –∑–∞–ø–∏—Ç—É: {e}")
    
    def show_request_history(self, api_name: Optional[str] = None, limit: int = 10):
        """
        –ü–æ–∫–∞–∑—É—î —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–ø–∏—Ç—ñ–≤.
        
        Args:
            api_name: –ù–∞–∑–≤–∞ API (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
        """
        try:
            print(f"üìö –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Ç—ñ–≤...")
            
            if api_name:
                print(f"üîó API: {api_name}")
            else:
                print(f"üîó –í—Å—ñ API")
            
            history = self.rag_engine.get_request_history(api_name, limit)
            
            if not history:
                print("üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è")
                return
            
            print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(history)} –∑–∞–ø–∏—Å—ñ–≤:")
            print("=" * 80)
            
            for i, record in enumerate(history, 1):
                print(f"\nüìù –ó–∞–ø–∏—Å {i}:")
                print(f"  üîó API: {record['api_name']}")
                print(f"  üì° –ú–µ—Ç–æ–¥: {record['method']}")
                print(f"  üõ£Ô∏è  –®–ª—è—Ö: {record['endpoint_path']}")
                print(f"  ‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {record['execution_time']:.3f}s")
                print(f"  üìÖ –î–∞—Ç–∞: {record['created_at']}")
                print(f"  üìä –°—Ç–∞—Ç—É—Å: {record['status_code']}")
                
                if record['request_data']:
                    print(f"  üì§ –ó–∞–ø–∏—Ç: {json.dumps(record['request_data'], indent=4, ensure_ascii=False)}")
                
                if record['error_message']:
                    print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞: {record['error_message'][:200]}...")
                else:
                    print(f"  ‚úÖ –£—Å–ø—ñ—à–Ω–æ")
                
                print("-" * 40)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤: {e}")
    
    def test_api_endpoint(self, api_name: str, method: str, path: str, 
                          data: Optional[Dict] = None, params: Optional[Dict] = None):
        """
        –¢–µ—Å—Ç—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç API.
        
        Args:
            api_name: –ù–∞–∑–≤–∞ API
            method: HTTP –º–µ—Ç–æ–¥
            path: –®–ª—è—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
            data: –î–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Ç—É
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
        """
        try:
            print(f"üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É...")
            print(f"üîó API: {api_name}")
            print(f"üì° {method.upper()} {path}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞
            jwt_token = self.rag_engine.get_jwt_token(api_name)
            if not jwt_token:
                print("‚ö†Ô∏è  JWT —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ç–æ–∫–µ–Ω –∫–æ–º–∞–Ω–¥–æ—é set-jwt-token")
                return
            
            print("üîë JWT —Ç–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            # –í–∏–∫–æ–Ω—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç
            self.execute_api_request(api_name, method, path, data, params)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É: {e}")
    
    def interactive_api_testing(self):
        """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API."""
        try:
            print("üß™ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API")
            print("=" * 50)
            print("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
            print("  ‚Ä¢ test <method> <path> [data] - —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç")
            print("  ‚Ä¢ set-token <api_name> <token> - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ JWT —Ç–æ–∫–µ–Ω")
            print("  ‚Ä¢ history [api_name] - –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–ø–∏—Ç—ñ–≤")
            print("  ‚Ä¢ endpoints [api_name] - –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏")
            print("  ‚Ä¢ quit - –≤–∏–π—Ç–∏")
            print()
            
            while True:
                try:
                    command = input("üîß API Test> ").strip()
                    
                    if command.lower() == 'quit':
                        print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                        break
                    
                    elif command.lower().startswith('test '):
                        parts = command[5:].split()
                        if len(parts) >= 2:
                            method = parts[0].upper()
                            path = parts[1]
                            data = None
                            
                            if len(parts) > 2:
                                try:
                                    data = json.loads(' '.join(parts[2:]))
                                except:
                                    print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–∞–Ω–∏—Ö")
                                    continue
                            
                            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π API
                            apis = self.rag_engine.list_swagger_specs()
                            if apis:
                                self.test_api_endpoint(apis[0], method, path, data)
                            else:
                                print("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö API")
                        else:
                            print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: test <method> <path> [data]")
                    
                    elif command.lower().startswith('set-token '):
                        parts = command[10:].split()
                        if len(parts) >= 2:
                            api_name = parts[0]
                            token = parts[1]
                            self.set_jwt_token(api_name, token)
                        else:
                            print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: set-token <api_name> <token>")
                    
                    elif command.lower().startswith('history'):
                        parts = command[8:].split()
                        api_name = parts[0] if parts else None
                        self.show_request_history(api_name)
                    
                    elif command.lower().startswith('endpoints'):
                        parts = command[10:].split()
                        api_name = parts[0] if parts else None
                        if api_name:
                            self.show_api_endpoints(api_name)
                        else:
                            self.list_apis()
                    
                    else:
                        print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å 'help' –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏")
                
                except KeyboardInterrupt:
                    print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                    break
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
    
    def show_api_endpoints(self, api_name: str):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ API."""
        try:
            print(f"üîó –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API '{api_name}':")
            print("=" * 60)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è API
            prompts = self.rag_engine.create_specialized_prompts(api_name)
            
            if not prompts:
                print("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤")
                return
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –∑–∞ —Ç–∏–ø–∞–º–∏
            for prompt_type, content in prompts.items():
                if prompt_type == "general":
                    print(f"\nüìã {prompt_type.upper()}:")
                    print("-" * 40)
                    print(content)
            
            print(f"\n‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ {len(prompts)} —Ç–∏–ø—ñ–≤ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤: {e}")


def main():
    parser = argparse.ArgumentParser(
        description="CLI —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è AI Swagger Bot —Å–∏—Å—Ç–µ–º–æ—é",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
  # –î–æ–¥–∞—Ç–∏ Swagger API
  python cli.py add-swagger https://api.oneshop.click/docs/ai-json oneshop
  
  # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É
  python cli.py chat "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
  
  # –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ API
  python cli.py list-apis
  
  # –í–∏–¥–∞–ª–∏—Ç–∏ API
  python cli.py remove-api oneshop
  
  # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É –∞–±–æ API
  python cli.py info
  
  # –ü–æ—à—É–∫ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
  python cli.py search "—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
  
  # –Ü–º–ø–æ—Ä—Ç API –∑ —Ñ–∞–π–ª—É
  python cli.py import-api swagger.json myapi
  
  # –ï–∫—Å–ø–æ—Ä—Ç API
  python cli.py export-api oneshop
  
  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏
  python cli.py stats
  
  # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API
  python cli.py test-api oneshop
  
  # –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ API
  python cli.py clear-all
  
  # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
  python cli.py interactive
  
  # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
  python cli.py status
  
  # –í–µ—Ä—Å—ñ—è CLI
  python cli.py version
  
  # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ Swagger API
  python cli.py analyze-swagger oneshop
  
  # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
  python cli.py db-info
  
  # –û—á–∏—Å—Ç–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö
  python cli.py clear-database
  
  # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Swagger API
  python cli.py reload-swagger https://api.oneshop.click/docs/ai-json oneshop
  
  # –°–∫–∏–Ω—É—Ç–∏ —Å–∏—Å—Ç–µ–º—É
  python cli.py reset-system
  
  # –®–≤–∏–¥–∫–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API
  python cli.py quick-reload https://api.oneshop.click/docs/ai-json oneshop
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Swagger
    add_parser = subparsers.add_parser('add-swagger', help='–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π Swagger API')
    add_parser.add_argument('url', help='URL –¥–æ Swagger —Ñ–∞–π–ª—É')
    add_parser.add_argument('--name', '-n', help='–ù–∞–∑–≤–∞ –¥–ª—è API (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)')
    
    # –ö–æ–º–∞–Ω–¥–∞ —á–∞—Ç—É
    chat_parser = subparsers.add_parser('chat', help='–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç—É')
    chat_parser.add_argument('message', help='–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –±–æ—Ç–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫—É API
    list_parser = subparsers.add_parser('list-apis', help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö API')
    
    # –ö–æ–º–∞–Ω–¥–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è API
    remove_parser = subparsers.add_parser('remove-api', help='–í–∏–¥–∞–ª–∏—Ç–∏ API –∑ —Å–∏—Å—Ç–µ–º–∏')
    remove_parser.add_argument('name', help='–ù–∞–∑–≤–∞ API –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    info_parser = subparsers.add_parser('info', help='–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É –∞–±–æ API')
    info_parser.add_argument('--name', '-n', help='–ù–∞–∑–≤–∞ API (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ—à—É–∫—É
    search_parser = subparsers.add_parser('search', help='–ü–æ—à—É–∫ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤')
    search_parser.add_argument('query', help='–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç')
    search_parser.add_argument('--api', '-a', help='–û–±–º–µ–∂–∏—Ç–∏ –ø–æ—à—É–∫ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API')
    
    # –ö–æ–º–∞–Ω–¥–∞ –µ–∫—Å–ø–æ—Ä—Ç—É
    export_parser = subparsers.add_parser('export-api', help='–ï–∫—Å–ø–æ—Ä—Ç API —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó')
    export_parser.add_argument('name', help='–ù–∞–∑–≤–∞ API –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É')
    export_parser.add_argument('--output', '-o', help='–í–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)')
    
    # –ö–æ–º–∞–Ω–¥–∞ —ñ–º–ø–æ—Ä—Ç—É
    import_parser = subparsers.add_parser('import-api', help='–Ü–º–ø–æ—Ä—Ç API —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É')
    import_parser.add_argument('file', help='–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É Swagger')
    import_parser.add_argument('--name', '-n', help='–ù–∞–∑–≤–∞ –¥–ª—è API (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—â–µ–Ω–Ω—è
    clear_parser = subparsers.add_parser('clear-all', help='–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ API –∑ —Å–∏—Å—Ç–µ–º–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_parser = subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_parser = subparsers.add_parser('test-api', help='–¢–µ—Å—Ç—É–≤–∞—Ç–∏ API')
    test_parser.add_argument('name', help='–ù–∞–∑–≤–∞ API –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    interactive_parser = subparsers.add_parser('interactive', help='–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å—É
    status_parser = subparsers.add_parser('status', help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ –≤–µ—Ä—Å—ñ—ó
    version_parser = subparsers.add_parser('version', help='–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é CLI')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª—ñ–∑—É Swagger
    analyze_parser = subparsers.add_parser('analyze-swagger', help='–î–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Swagger API')
    analyze_parser.add_argument('name', help='–ù–∞–∑–≤–∞ API –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    db_info_parser = subparsers.add_parser('db-info', help='–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö')
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    clear_db_parser = subparsers.add_parser('clear-database', help='–ü–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—Å—Ç–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö ChromaDB')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger
    reload_parser = subparsers.add_parser('reload-swagger', help='–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Swagger API')
    reload_parser.add_argument('url', help='URL –¥–æ Swagger —Ñ–∞–π–ª—É')
    reload_parser.add_argument('--name', '-n', help='–ù–∞–∑–≤–∞ –¥–ª—è API (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
    reset_parser = subparsers.add_parser('reset-system', help='–ü–æ–≤–Ω—ñ—Å—Ç—é —Å–∫–∏–Ω—É—Ç–∏ —Å–∏—Å—Ç–µ–º—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ —à–≤–∏–¥–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    quick_reload_parser = subparsers.add_parser('quick-reload', help='–®–≤–∏–¥–∫–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ API')
    quick_reload_parser.add_argument('url', help='URL –¥–æ Swagger —Ñ–∞–π–ª—É')
    quick_reload_parser.add_argument('--name', '-n', help='–ù–∞–∑–≤–∞ –¥–ª—è API (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)')

    # –ö–æ–º–∞–Ω–¥–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤
    show_prompts_parser = subparsers.add_parser('show-prompts', help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è API')
    show_prompts_parser.add_argument('name', help='–ù–∞–∑–≤–∞ API –¥–ª—è –ø—Ä–æ–º–ø—Ç—ñ–≤')

    # –ö–æ–º–∞–Ω–¥–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –ø—Ä–æ–º–ø—Ç—ñ–≤
    export_prompts_parser = subparsers.add_parser('export-prompts', help='–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ —É —Ñ–∞–π–ª')
    export_prompts_parser.add_argument('name', help='–ù–∞–∑–≤–∞ API –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –ø—Ä–æ–º–ø—Ç—ñ–≤')
    export_prompts_parser.add_argument('--output', '-o', help='–í–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞
    set_jwt_parser = subparsers.add_parser('set-jwt-token', help='–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ JWT —Ç–æ–∫–µ–Ω –¥–ª—è API')
    set_jwt_parser.add_argument('api_name', help='–ù–∞–∑–≤–∞ API')
    set_jwt_parser.add_argument('token', help='JWT —Ç–æ–∫–µ–Ω')
    
    # –ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API –∑–∞–ø–∏—Ç—É
    execute_parser = subparsers.add_parser('execute-request', help='–í–∏–∫–æ–Ω–∞—Ç–∏ API –∑–∞–ø–∏—Ç')
    execute_parser.add_argument('api_name', help='–ù–∞–∑–≤–∞ API')
    execute_parser.add_argument('method', help='HTTP –º–µ—Ç–æ–¥')
    execute_parser.add_argument('path', help='–®–ª—è—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É')
    execute_parser.add_argument('data', help='–î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É (JSON)')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
    test_endpoint_parser = subparsers.add_parser('test-endpoint', help='–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –µ–Ω–¥–ø–æ—ñ–Ω—Ç API')
    test_endpoint_parser.add_argument('api_name', help='–ù–∞–∑–≤–∞ API')
    test_endpoint_parser.add_argument('method', help='HTTP –º–µ—Ç–æ–¥')
    test_endpoint_parser.add_argument('path', help='–®–ª—è—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É')
    test_endpoint_parser.add_argument('data', help='–î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É (JSON)')
    
    # –ö–æ–º–∞–Ω–¥–∞ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤
    history_parser = subparsers.add_parser('request-history', help='–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–ø–∏—Ç—ñ–≤')
    history_parser.add_argument('--api-name', '-a', help='–ù–∞–∑–≤–∞ API (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)')
    
    # –ö–æ–º–∞–Ω–¥–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API
    api_testing_parser = subparsers.add_parser('api-testing', help='–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ CLI —ñ–Ω—Å—Ç–∞–Ω—Å
    cli = SwaggerBotCLI()
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥—É
    if args.command == 'add-swagger':
        cli.add_swagger(args.url, args.name)
    elif args.command == 'chat':
        cli.chat(args.message)
    elif args.command == 'list-apis':
        cli.list_apis()
    elif args.command == 'remove-api':
        cli.remove_api(args.name)
    elif args.command == 'info':
        cli.info(args.name)
    elif args.command == 'search':
        cli.search(args.query, args.api)
    elif args.command == 'export-api':
        cli.export_api(args.name, args.output)
    elif args.command == 'import-api':
        cli.import_api(args.file, args.name)
    elif args.command == 'clear-all':
        cli.clear_all()
    elif args.command == 'stats':
        cli.stats()
    elif args.command == 'test-api':
        cli.test_api(args.name)
    elif args.command == 'interactive':
        cli.interactive_mode()
    elif args.command == 'status':
        cli.status()
    elif args.command == 'version':
        cli.version()
    elif args.command == 'analyze-swagger':
        cli.analyze_swagger(args.name)
    elif args.command == 'db-info':
        cli.db_info()
    elif args.command == 'clear-database':
        cli.clear_database()
    elif args.command == 'reload-swagger':
        cli.reload_swagger(args.url, args.name)
    elif args.command == 'reset-system':
        cli.reset_system()
    elif args.command == 'quick-reload':
        cli.quick_reload(args.url, args.name)
    elif args.command == 'show-prompts':
        cli.show_prompts(args.name)
    elif args.command == 'export-prompts':
        cli.export_prompts(args.name, args.output)
    elif args.command == 'set-jwt-token':
        cli.set_jwt_token(args.api_name, args.token)
    elif args.command == 'execute-request':
        try:
            data = json.loads(args.data) if args.data else None
        except:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–∞–Ω–∏—Ö")
            return
        cli.execute_api_request(args.api_name, args.method, args.path, data)
    elif args.command == 'test-endpoint':
        try:
            data = json.loads(args.data) if args.data else None
        except:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–∞–Ω–∏—Ö")
            return
        cli.test_api_endpoint(args.api_name, args.method, args.path, data)
    elif args.command == 'request-history':
        cli.show_request_history(args.api_name)
    elif args.command == 'api-testing':
        cli.interactive_api_testing()


if __name__ == '__main__':
    main()
