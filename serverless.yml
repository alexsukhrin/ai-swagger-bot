service: ai-swagger-bot

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  
  # Environment variables
  environment:
    STAGE: ${self:provider.stage}
    PYTHONPATH: /var/task:/var/task/api:/var/task/src
  
  # IAM roles
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - rds:*
            - ec2:*
          Resource: "*"

  # VPC configuration (якщо потрібно)
  vpc:
    securityGroupIds:
      - sg-xxxxxxxxxxxxxxxxx
    subnetIds:
      - subnet-xxxxxxxxxxxxxxxxx
      - subnet-xxxxxxxxxxxxxxxxx

functions:
  api:
    handler: lambda_handler.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
      - httpApi:
          path: /{proxy+}
          method: ANY
          cors: true
    
    # Memory and timeout settings
    memorySize: 1024
    timeout: 30
    
    # Environment variables specific to this function
    environment:
      FUNCTION_NAME: ${self:service}-${self:provider.stage}
    
    # Layers (якщо потрібно)
    # layers:
    #   - arn:aws:lambda:${self:provider.region}:770693421928:layer:Klayers-p311-psycopg2-binary:1
    
    # VPC configuration
    vpc:
      securityGroupIds:
        - sg-xxxxxxxxxxxxxxxxx
      subnetIds:
        - subnet-xxxxxxxxxxxxxxxxx
        - subnet-xxxxxxxxxxxxxxxxx

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
    layer:
      name: python-deps
      description: Python dependencies for AI Swagger Bot
    noDeploy:
      - coverage
      - pytest
      - pytest-cov
      - pytest-mock
      - black
      - flake8
      - mypy
    zip: true
    slim: true
    usePoetry: false
    useStaticCache: true
    useDownloadCache: true

resources:
  Resources:
    # RDS Database (якщо потрібно)
    # DatabaseInstance:
    #   Type: AWS::RDS::DBInstance
    #   Properties:
    #     DBInstanceIdentifier: ${self:service}-${self:provider.stage}
    #     DBInstanceClass: db.t3.micro
    #     Engine: postgres
    #     EngineVersion: '13.7'
    #     AllocatedStorage: 20
    #     StorageType: gp2
    #     MasterUsername: admin
    #     MasterUserPassword: !Ref DatabasePassword
    #     VPCSecurityGroups:
    #       - !Ref DatabaseSecurityGroup
    #     DBSubnetGroupName: !Ref DatabaseSubnetGroup
    #     BackupRetentionPeriod: 7
    #     MultiAZ: false
    #     PubliclyAccessible: false
    #     DeletionProtection: false
    #     Tags:
    #       - Key: Name
    #         Value: ${self:service}-${self:provider.stage}
    
    # VPC Security Group
    # DatabaseSecurityGroup:
    #   Type: AWS::EC2::SecurityGroup
    #   Properties:
    #     GroupDescription: Security group for RDS database
    #     VpcId: vpc-xxxxxxxxx
    #     SecurityGroupIngress:
    #       - IpProtocol: tcp
    #         FromPort: 5432
    #         ToPort: 5432
    #         SourceSecurityGroupId: !Ref LambdaSecurityGroup
    
    # Lambda Security Group
    # LambdaSecurityGroup:
    #   Type: AWS::EC2::SecurityGroup
    #   Properties:
    #     GroupDescription: Security group for Lambda function
    #     VpcId: vpc-xxxxxxxxx
    #     SecurityGroupEgress:
    #       - IpProtocol: -1
    #         CidrIp: 0.0.0.0/0

  Outputs:
    ApiGatewayRestApiId:
      Description: "API Gateway REST API ID"
      Value: !Ref ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiId
    
    ApiGatewayRestApiRootResourceId:
      Description: "API Gateway REST API Root Resource ID"
      Value: !GetAtt ApiGatewayRestApi.RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiRootResourceId
    
    LambdaFunctionArn:
      Description: "Lambda Function ARN"
      Value: !GetAtt ApiLambdaFunction.Arn
      Export:
        Name: ${self:service}-${self:provider.stage}-LambdaFunctionArn 