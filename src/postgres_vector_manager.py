"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ–∫—Ç–æ—Ä—ñ–≤ –¥–ª—è PostgreSQL –∑ pgvector.
"""

import json
import uuid
from datetime import datetime
from typing import Any, Dict, List, Optional

import numpy as np
from sqlalchemy import text
from sqlalchemy.engine import Engine

from src.config import Config


class PostgresVectorManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ–∫—Ç–æ—Ä—ñ–≤ –¥–ª—è PostgreSQL –∑ pgvector."""

    def __init__(self, engine: Engine = None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–µ–∫—Ç–æ—Ä—ñ–≤.

        Args:
            engine: SQLAlchemy engine –¥–ª—è PostgreSQL
        """
        if engine:
            self.engine = engine
        else:
            from api.database import engine

            self.engine = engine

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π pgvector
        self._check_pgvector_extension()

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        self._create_embeddings_table()

    def _check_pgvector_extension(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π pgvector extension."""
        try:
            with self.engine.connect() as conn:
                result = conn.execute(text("SELECT * FROM pg_extension WHERE extname = 'vector'"))
                if not result.fetchone():
                    print("‚ö†Ô∏è  pgvector extension –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ...")
                    conn.execute(text("CREATE EXTENSION IF NOT EXISTS vector"))
                    conn.commit()
                    print("‚úÖ pgvector extension –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ pgvector: {e}")
            raise

    def _create_embeddings_table(self):
        """–°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—é –¥–ª—è embeddings —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î."""
        try:
            with self.engine.connect() as conn:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è
                result = conn.execute(
                    text(
                        """
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables
                        WHERE table_name = 'api_embeddings'
                    )
                """
                    )
                )

                if not result.fetchone()[0]:
                    print("üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ api_embeddings...")

                    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é —Ç–∞ –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç–∞–º–∏
                    conn.execute(
                        text(
                            """
                        CREATE TABLE api_embeddings (
                            id VARCHAR(36) PRIMARY KEY,
                            user_id VARCHAR(36) NOT NULL,
                            swagger_spec_id VARCHAR(36) NOT NULL,
                            endpoint_path VARCHAR(500) NOT NULL,
                            method VARCHAR(10) NOT NULL,
                            description TEXT NOT NULL,
                            embedding TEXT NOT NULL,
                            embedding_metadata JSONB,
                            created_at TIMESTAMP DEFAULT NOW(),
                            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                            FOREIGN KEY (swagger_spec_id) REFERENCES swagger_specs(id) ON DELETE CASCADE,
                            UNIQUE(user_id, swagger_spec_id, endpoint_path, method)
                        )
                    """
                        )
                    )

                    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
                    conn.execute(
                        text(
                            """
                        CREATE INDEX idx_api_embeddings_user_id ON api_embeddings(user_id)
                    """
                        )
                    )
                    conn.execute(
                        text(
                            """
                        CREATE INDEX idx_api_embeddings_swagger_spec_id ON api_embeddings(swagger_spec_id)
                    """
                        )
                    )
                    conn.execute(
                        text(
                            """
                        CREATE INDEX idx_api_embeddings_method_path ON api_embeddings(method, endpoint_path)
                    """
                        )
                    )
                    conn.execute(
                        text(
                            """
                        CREATE INDEX idx_api_embeddings_created ON api_embeddings(created_at)
                    """
                        )
                    )
                    conn.execute(
                        text(
                            """
                        CREATE INDEX idx_api_embeddings_user_swagger ON api_embeddings(user_id, swagger_spec_id)
                    """
                        )
                    )

                    conn.commit()
                    print("‚úÖ –¢–∞–±–ª–∏—Ü—è api_embeddings —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∑ –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç–∞–º–∏ —Ç–∞ —ñ–Ω–¥–µ–∫—Å–∞–º–∏")
                else:
                    print("‚úÖ –¢–∞–±–ª–∏—Ü—è api_embeddings –≤–∂–µ —ñ—Å–Ω—É—î")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ: {e}")
            raise

    def add_embedding(
        self,
        user_id: str,
        swagger_spec_id: str,
        endpoint_path: str,
        method: str,
        description: str,
        embedding: List[float],
        metadata: Dict[str, Any] = None,
    ) -> str:
        """
        –î–æ–¥–∞—î –≤–µ–∫—Ç–æ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö –∑ –æ–±—Ä–æ–±–∫–æ—é –¥—É–±–ª—é–≤–∞–Ω–Ω—è.

        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            swagger_spec_id: ID Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            endpoint_path: –®–ª—è—Ö –¥–æ endpoint
            method: HTTP –º–µ—Ç–æ–¥
            description: –û–ø–∏—Å endpoint
            embedding: –í–µ–∫—Ç–æ—Ä (—Å–ø–∏—Å–æ–∫ float)
            metadata: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ

        Returns:
            ID —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É
        """
        try:
            embedding_json = json.dumps(embedding)

            with self.engine.connect() as conn:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–∏–π embedding
                result = conn.execute(
                    text(
                        """
                    SELECT id FROM api_embeddings
                    WHERE user_id = :user_id
                    AND swagger_spec_id = :swagger_spec_id
                    AND endpoint_path = :endpoint_path
                    AND method = :method
                """
                    ),
                    {
                        "user_id": user_id,
                        "swagger_spec_id": swagger_spec_id,
                        "endpoint_path": endpoint_path,
                        "method": method,
                    },
                )

                existing_record = result.fetchone()

                if existing_record:
                    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å
                    embedding_id = existing_record[0]
                    conn.execute(
                        text(
                            """
                        UPDATE api_embeddings
                        SET description = :description, embedding = :embedding,
                            embedding_metadata = :metadata, created_at = :created_at
                        WHERE id = :id
                    """
                        ),
                        {
                            "id": embedding_id,
                            "description": description,
                            "embedding": embedding_json,
                            "embedding_metadata": json.dumps(metadata) if metadata else None,
                            "created_at": datetime.now().isoformat(),
                        },
                    )
                    print(
                        f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –≤–µ–∫—Ç–æ—Ä: {method} {endpoint_path} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}"
                    )
                else:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
                    embedding_id = str(uuid.uuid4())
                    conn.execute(
                        text(
                            """
                        INSERT INTO api_embeddings
                        (id, user_id, swagger_spec_id, endpoint_path, method, description,
                         embedding, embedding_metadata, created_at)
                        VALUES (:id, :user_id, :swagger_spec_id, :endpoint_path, :method,
                               :description, :embedding, :embedding_metadata, :created_at)
                    """
                        ),
                        {
                            "id": embedding_id,
                            "user_id": user_id,
                            "swagger_spec_id": swagger_spec_id,
                            "endpoint_path": endpoint_path,
                            "method": method,
                            "description": description,
                            "embedding": embedding_json,
                            "embedding_metadata": json.dumps(metadata) if metadata else None,
                            "created_at": datetime.now().isoformat(),
                        },
                    )
                    print(
                        f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –≤–µ–∫—Ç–æ—Ä: {method} {endpoint_path} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}"
                    )

                conn.commit()
                return embedding_id

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞: {e}")
            raise

    def search_similar(
        self,
        query_embedding: List[float],
        user_id: str,
        swagger_spec_id: str = None,
        limit: int = 5,
    ) -> List[Dict[str, Any]]:
        """
        –®—É–∫–∞—î –ø–æ–¥—ñ–±–Ω—ñ –≤–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

        Args:
            query_embedding: –í–µ–∫—Ç–æ—Ä –∑–∞–ø–∏—Ç—É
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            swagger_spec_id: ID Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–±–Ω–∏—Ö embeddings –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
        """
        try:
            query_embedding_json = json.dumps(query_embedding)

            # –ó–∞–ø–∏—Ç –∑ –≤–µ–∫—Ç–æ—Ä–Ω–∏–º –ø–æ—à—É–∫–æ–º –∑–∞ –∫–æ—Å–∏–Ω—É—Å–Ω–æ—é —Å—Ö–æ–∂—ñ—Å—Ç—é
            base_query = f"""
                SELECT id, endpoint_path, method, description, embedding, embedding_metadata, created_at,
                       1 - (embedding <=> '{query_embedding_json}'::vector) as similarity
                FROM api_embeddings
                WHERE user_id = :user_id
            """

            params = {"user_id": user_id}

            # –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –ø–æ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
            if swagger_spec_id:
                base_query += " AND swagger_spec_id = :swagger_spec_id"
                params["swagger_spec_id"] = swagger_spec_id

            # –°–æ—Ä—Ç—É—î–º–æ –ø–æ —Å—Ö–æ–∂–æ—Å—Ç—ñ (–Ω–∞–π–±—ñ–ª—å—à —Å—Ö–æ–∂—ñ —Å–ø–æ—á–∞—Ç–∫—É)
            base_query += " ORDER BY similarity DESC LIMIT :limit"
            params["limit"] = limit

            with self.engine.connect() as conn:
                result = conn.execute(text(base_query), params)
                rows = result.fetchall()

                results = []
                for row in rows:
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ JSON string –Ω–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫, –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ —î, —è–∫—â–æ –≤–∂–µ dict/list
                    if row[4]:
                        if isinstance(row[4], str):
                            embedding = json.loads(row[4])
                        else:
                            embedding = row[4]  # –í–∂–µ —Å–ø–∏—Å–æ–∫ –∞–±–æ dict
                    else:
                        embedding = []

                    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–ª—è metadata
                    if row[5]:
                        if isinstance(row[5], str):
                            metadata = json.loads(row[5])
                        else:
                            metadata = row[5]  # –í–∂–µ dict
                    else:
                        metadata = {}

                    results.append(
                        {
                            "id": row[0],
                            "endpoint_path": row[1],
                            "method": row[2],
                            "description": row[3],
                            "embedding": embedding,
                            "metadata": metadata,
                            "created_at": row[6],
                            "similarity": float(row[7]) if row[7] is not None else 0.0,
                        }
                    )

                return results

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –ø–æ–¥—ñ–±–Ω–∏—Ö –≤–µ–∫—Ç–æ—Ä—ñ–≤: {e}")
            return []

    def get_embeddings_for_user(
        self, user_id: str, swagger_spec_id: str = None
    ) -> List[Dict[str, Any]]:
        """
        –û—Ç—Ä–∏–º—É—î –≤—Å—ñ embeddings –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            swagger_spec_id: ID Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –°–ø–∏—Å–æ–∫ embeddings
        """
        try:
            base_query = """
                SELECT id, endpoint_path, method, description, embedding, embedding_metadata, created_at
                FROM api_embeddings
                WHERE user_id = :user_id
            """

            params = {"user_id": user_id}

            if swagger_spec_id:
                base_query += " AND swagger_spec_id = :swagger_spec_id"
                params["swagger_spec_id"] = swagger_spec_id

            base_query += " ORDER BY created_at DESC"

            with self.engine.connect() as conn:
                result = conn.execute(text(base_query), params)
                rows = result.fetchall()

                results = []
                for row in rows:
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ JSON string –Ω–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫, –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ —î, —è–∫—â–æ –≤–∂–µ dict/list
                    if row[4]:
                        if isinstance(row[4], str):
                            embedding = json.loads(row[4])
                        else:
                            embedding = row[4]  # –í–∂–µ —Å–ø–∏—Å–æ–∫ –∞–±–æ dict
                    else:
                        embedding = []

                    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–ª—è metadata
                    if row[5]:
                        if isinstance(row[5], str):
                            metadata = json.loads(row[5])
                        else:
                            metadata = row[5]  # –í–∂–µ dict
                    else:
                        metadata = {}

                    results.append(
                        {
                            "id": row[0],
                            "endpoint_path": row[1],
                            "method": row[2],
                            "description": row[3],
                            "embedding": embedding,
                            "metadata": metadata,
                            "created_at": row[6],
                        }
                    )

                return results

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è embeddings: {e}")
            return []

    def delete_embeddings_for_user(self, user_id: str, swagger_spec_id: str = None) -> bool:
        """
        –í–∏–¥–∞–ª—è—î embeddings –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            swagger_spec_id: ID Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ
        """
        try:
            base_query = "DELETE FROM api_embeddings WHERE user_id = :user_id"
            params = {"user_id": user_id}

            if swagger_spec_id:
                base_query += " AND swagger_spec_id = :swagger_spec_id"
                params["swagger_spec_id"] = swagger_spec_id

            with self.engine.connect() as conn:
                result = conn.execute(text(base_query), params)
                conn.commit()

                deleted_count = result.rowcount
                print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} embeddings –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è embeddings: {e}")
            return False

    def get_statistics(self, user_id: str = None) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ embeddings.

        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        """
        try:
            with self.engine.connect() as conn:
                if user_id:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    result = conn.execute(
                        text(
                            """
                        SELECT
                            COUNT(*) as total_embeddings,
                            COUNT(DISTINCT swagger_spec_id) as swagger_specs_count,
                            COUNT(DISTINCT method) as methods_count,
                            COUNT(DISTINCT endpoint_path) as unique_endpoints
                        FROM api_embeddings
                        WHERE user_id = :user_id
                    """
                        ),
                        {"user_id": user_id},
                    )
                else:
                    # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    result = conn.execute(
                        text(
                            """
                        SELECT
                            COUNT(*) as total_embeddings,
                            COUNT(DISTINCT user_id) as users_count,
                            COUNT(DISTINCT swagger_spec_id) as swagger_specs_count,
                            COUNT(DISTINCT method) as methods_count,
                            COUNT(DISTINCT endpoint_path) as unique_endpoints
                        FROM api_embeddings
                    """
                        )
                    )

                row = result.fetchone()

                if user_id:
                    return {
                        "total_embeddings": row[0],
                        "swagger_specs_count": row[1],
                        "methods_count": row[2],
                        "unique_endpoints": row[3],
                    }
                else:
                    return {
                        "total_embeddings": row[0],
                        "users_count": row[1],
                        "swagger_specs_count": row[2],
                        "methods_count": row[3],
                        "unique_endpoints": row[4],
                    }

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def cleanup_duplicates(self) -> int:
        """
        –í–∏–¥–∞–ª—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ embeddings.

        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        """
        try:
            with self.engine.connect() as conn:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏, –∑–∞–ª–∏—à–∞—é—á–∏ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π
                result = conn.execute(
                    text(
                        """
                    DELETE FROM api_embeddings
                    WHERE id IN (
                        SELECT id FROM (
                            SELECT id,
                                   ROW_NUMBER() OVER (
                                       PARTITION BY user_id, swagger_spec_id, endpoint_path, method
                                       ORDER BY created_at DESC
                                   ) as rn
                            FROM api_embeddings
                        ) t
                        WHERE t.rn > 1
                    )
                """
                    )
                )

                deleted_count = result.rowcount
                conn.commit()

                if deleted_count > 0:
                    print(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ embeddings")
                else:
                    print("‚úÖ –î—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

                return deleted_count

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {e}")
            return 0
