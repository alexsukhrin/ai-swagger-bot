"""
–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π API –∞–≥–µ–Ω—Ç –∑ –¥—ñ–∞–ª–æ–≥–æ–º –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞.
"""

import hashlib
import json
import logging
import os
import pickle
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import requests

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ logger
logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—ñ
try:
    from .enhanced_prompt_manager import EnhancedPromptManager
    from .enhanced_swagger_parser import EnhancedSwaggerParser
    from .rag_engine import PostgresRAGEngine
except ImportError:
    try:
        from enhanced_prompt_manager import EnhancedPromptManager
        from enhanced_swagger_parser import EnhancedSwaggerParser
        from rag_engine import PostgresRAGEngine
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        raise

try:
    from langchain.schema import HumanMessage, SystemMessage
    from langchain_openai import ChatOpenAI
except ImportError:
    logging.error("LangChain –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install langchain langchain-openai")
    raise


class InteractiveConversationHistory:
    """–ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏."""

    def __init__(self, storage_dir: str = "./interactive_conversation_history"):
        self.storage_dir = Path(storage_dir)
        self.storage_dir.mkdir(exist_ok=True)

    def _get_user_file(self, user_id: str) -> Path:
        """–û—Ç—Ä–∏–º—É—î —Ñ–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        return self.storage_dir / f"{user_id}.pkl"

    def save_conversation(self, user_id: str, conversation: List[Dict[str, Any]]):
        """–ó–±–µ—Ä—ñ–≥–∞—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏."""
        file_path = self._get_user_file(user_id)
        with open(file_path, "wb") as f:
            pickle.dump(conversation, f)

    def load_conversation(self, user_id: str) -> List[Dict[str, Any]]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏."""
        file_path = self._get_user_file(user_id)
        if file_path.exists():
            with open(file_path, "rb") as f:
                return pickle.load(f)
        return []

    def add_interaction(self, user_id: str, interaction: Dict[str, Any]):
        """–î–æ–¥–∞—î –Ω–æ–≤—É –≤–∑–∞—î–º–æ–¥—ñ—é –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó."""
        conversation = self.load_conversation(user_id)
        interaction["timestamp"] = datetime.now()
        conversation.append(interaction)

        # –û–±–º–µ–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 20 –≤–∑–∞—î–º–æ–¥—ñ–π
        if len(conversation) > 20:
            conversation = conversation[-20:]

        self.save_conversation(user_id, conversation)

    def get_recent_context(self, user_id: str, max_interactions: int = 3) -> str:
        """–û—Ç—Ä–∏–º—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –≤–∑–∞—î–º–æ–¥—ñ–π."""
        conversation = self.load_conversation(user_id)
        if not conversation:
            return ""

        recent = conversation[-max_interactions:]
        context_parts = []

        for interaction in recent:
            timestamp = interaction.get("timestamp", datetime.now()).strftime("%H:%M")
            user_msg = interaction.get("user_message", "")
            bot_msg = interaction.get("bot_response", "")
            status = interaction.get("status", "unknown")

            context_parts.append(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ({timestamp}): {user_msg}")
            context_parts.append(f"–ë–æ—Ç ({timestamp}) [{status}]: {bot_msg}")

        return "\n".join(context_parts)


class InteractiveSwaggerAgent:
    """
    –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Swagger/OpenAPI —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è–º–∏.
    –ü—ñ–¥—Ç—Ä–∏–º—É—î –¥—ñ–∞–ª–æ–≥ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞.
    """

    def __init__(
        self,
        swagger_spec_path: str,
        enable_api_calls: bool = False,
        openai_api_key: Optional[str] = None,
        jwt_token: Optional[str] = None,
        base_url_override: Optional[str] = None,
        user_id: Optional[str] = None,
        swagger_spec_id: Optional[str] = None,
    ):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.

        Args:
            swagger_spec_path: –®–ª—è—Ö –¥–æ Swagger/OpenAPI —Ñ–∞–π–ª—É
            enable_api_calls: –ß–∏ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ API –≤–∏–∫–ª–∏–∫–∏
            openai_api_key: OpenAI API –∫–ª—é—á (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            jwt_token: JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É
            if not os.path.exists(swagger_spec_path):
                raise FileNotFoundError(f"Swagger —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {swagger_spec_path}")

            # –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—é—á
            self.openai_api_key = openai_api_key or os.getenv("OPENAI_API_KEY")
            if not self.openai_api_key:
                raise ValueError(
                    "OPENAI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π—Ç–µ –≤ .env —Ñ–∞–π–ª –∞–±–æ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä."
                )

            # –û—Ç—Ä–∏–º—É—î–º–æ JWT —Ç–æ–∫–µ–Ω
            self.jwt_token = jwt_token or os.getenv("JWT_TOKEN")

            # –ü–∞—Ä—Å–∏–º–æ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é
            self.parser = EnhancedSwaggerParser(swagger_spec_path)
            self.base_url = base_url_override or self.parser.get_base_url()
            self.api_info = self.parser.get_api_info()

            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            self.enable_api_calls = enable_api_calls
            self.user_id = user_id
            self.swagger_spec_id = swagger_spec_id
            self.model = os.getenv("OPENAI_MODEL", "gpt-4")
            self.temperature = float(os.getenv("OPENAI_TEMPERATURE", "0"))

            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ LangChain LLM
            self.llm = ChatOpenAI(
                model=self.model, temperature=self.temperature, openai_api_key=self.openai_api_key
            )

            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ RAG engine
            self._initialize_rag()

            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç—ñ–≤
            self.prompt_manager = EnhancedPromptManager()

            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
            self.conversation_history = InteractiveConversationHistory()

            logging.info(f"–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∞–≥–µ–Ω—Ç –∑ –±–∞–∑–æ–≤–∏–º URL: {self.base_url}")

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
            raise

    def _initialize_rag(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è RAG engine –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –ø–∞—Ä—Å–µ—Ä–æ–º."""
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PostgresRAGEngine –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ ID
            user_id = getattr(self, "user_id", "default_user")
            swagger_spec_id = getattr(self, "swagger_spec_id", "default_spec")

            self.rag_engine = PostgresRAGEngine(user_id=user_id, swagger_spec_id=swagger_spec_id)

            logging.info(
                f"RAG engine —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è user_id={user_id}, swagger_spec_id={swagger_spec_id}"
            )
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó RAG: {e}")
            raise

    def _generate_user_id(self, user_identifier: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        return hashlib.md5(user_identifier.encode()).hexdigest()

    def process_interactive_query(
        self, user_query: str, user_identifier: str = "default_user"
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–æ–±–∫–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥—ñ–∞–ª–æ–≥—É.

        Args:
            user_query: –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_identifier: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é —Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–º
        """
        try:
            if not user_query.strip():
                return {
                    "response": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç.",
                    "status": "error",
                    "needs_followup": False,
                }

            user_id = self._generate_user_id(user_identifier)
            logging.info(f"–û–±—Ä–æ–±–∫–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {user_query}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞
            is_creation = self._is_creation_request(user_query)
            logger.info(f"üèóÔ∏è –ß–∏ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {is_creation}")
            if is_creation:
                logger.info("‚û°Ô∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞")
                return self._handle_creation_request(user_query, user_id)

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤–∑–∞—î–º–æ–¥—ñ–π
            context = self.conversation_history.get_recent_context(user_id)

            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            logger.info("üß† –ê–Ω–∞–ª—ñ–∑—É—é –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            intent = self._analyze_user_intent(user_query, context)
            logger.info(f"üí° –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É –Ω–∞–º—ñ—Ä—É: {intent}")
            if not intent:
                response = self._generate_helpful_error_response(user_query)
                self.conversation_history.add_interaction(
                    user_id,
                    {
                        "user_message": user_query,
                        "bot_response": response,
                        "status": "error",
                        "needs_followup": False,
                    },
                )
                return {"response": response, "status": "error", "needs_followup": False}

            # –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ endpoints
            endpoints = self.rag_engine.search_similar_endpoints(user_query)
            if not endpoints:
                response = self._generate_no_endpoint_response(user_query)
                self.conversation_history.add_interaction(
                    user_id,
                    {
                        "user_message": user_query,
                        "bot_response": response,
                        "status": "error",
                        "needs_followup": False,
                    },
                )
                return {"response": response, "status": "error", "needs_followup": False}

            logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(endpoints)} –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö endpoints")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –∑–∞–ø–∏—Ç
            if intent.get("is_informational", False) or intent.get("operation") == "INFO":
                response = self._handle_informational_request(user_query, endpoints)
                self.conversation_history.add_interaction(
                    user_id,
                    {
                        "user_message": user_query,
                        "bot_response": response,
                        "status": "informational",
                        "needs_followup": False,
                    },
                )
                return {"response": response, "status": "informational", "needs_followup": False}

            # –§–æ—Ä–º—É—î–º–æ API –∑–∞–ø–∏—Ç
            api_request = self._form_api_request(user_query, intent, endpoints)
            if not api_request:
                response = self._generate_request_formation_error(user_query, intent)
                self.conversation_history.add_interaction(
                    user_id,
                    {
                        "user_message": user_query,
                        "bot_response": response,
                        "status": "error",
                        "needs_followup": False,
                    },
                )
                return {"response": response, "status": "error", "needs_followup": False}

            # –Ø–∫—â–æ API –≤–∏–∫–ª–∏–∫–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ, –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–µ–≤—å—é
            if not self.enable_api_calls:
                response = self._format_response(api_request, preview=True)
                self.conversation_history.add_interaction(
                    user_id,
                    {
                        "user_message": user_query,
                        "bot_response": response,
                        "status": "preview",
                        "needs_followup": False,
                    },
                )
                return {"response": response, "status": "preview", "needs_followup": False}

            # –í–∏–∫–æ–Ω—É—î–º–æ API –≤–∏–∫–ª–∏–∫ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º retry
            logger.info(f"üöÄ –ì–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è API –∑–∞–ø–∏—Ç—É: {api_request}")
            api_response = self._call_api_with_retry(api_request, user_query, intent)
            logger.info(f"üì¨ –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API: {api_response}")

            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞
            if self._is_server_error(api_response):
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —Ç–∞ –≥–µ–Ω–µ—Ä—É—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                followup_question = self._analyze_error_and_generate_followup(
                    api_response, api_request, user_query, intent
                )

                response = self._format_response(api_request, api_response)
                response += f"\n\n{followup_question}"

                self.conversation_history.add_interaction(
                    user_id,
                    {
                        "user_message": user_query,
                        "bot_response": response,
                        "status": "needs_followup",
                        "needs_followup": True,
                        "api_request": api_request,
                        "intent": intent,
                        "server_error": api_response,
                    },
                )

                return {
                    "response": response,
                    "status": "needs_followup",
                    "needs_followup": True,
                    "api_request": api_request,
                    "intent": intent,
                    "server_error": api_response,
                }
            else:
                # –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                response = self._format_response(api_request, api_response)
                self.conversation_history.add_interaction(
                    user_id,
                    {
                        "user_message": user_query,
                        "bot_response": response,
                        "status": "success",
                        "needs_followup": False,
                    },
                )

                return {"response": response, "status": "success", "needs_followup": False}

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É: {e}")
            error_response = self._generate_error_response(str(e))
            self.conversation_history.add_interaction(
                user_id,
                {
                    "user_message": user_query,
                    "bot_response": error_response,
                    "status": "error",
                    "needs_followup": False,
                },
            )
            return {"response": error_response, "status": "error", "needs_followup": False}

    def process_followup_query(
        self, user_query: str, user_identifier: str = "default_user"
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏.

        Args:
            user_query: –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_identifier: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é —Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–º
        """
        try:
            user_id = self._generate_user_id(user_identifier)
            conversation = self.conversation_history.load_conversation(user_id)

            if not conversation:
                return {
                    "response": "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.",
                    "status": "error",
                    "needs_followup": False,
                }

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—é –≤–∑–∞—î–º–æ–¥—ñ—é, —è–∫–∞ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
            last_interaction = None
            for interaction in reversed(conversation):
                if interaction.get("needs_followup"):
                    last_interaction = interaction
                    break

            if not last_interaction:
                return {
                    "response": "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.",
                    "status": "error",
                    "needs_followup": False,
                }

            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç —Ç–∞ API –∑–∞–ø–∏—Ç
            original_query = last_interaction.get("user_message", "")
            api_request = last_interaction.get("api_request", {})
            intent = last_interaction.get("intent", {})
            server_error = last_interaction.get("server_error", {})

            # –û–Ω–æ–≤–ª—é—î–º–æ intent –∑ –Ω–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            updated_intent = self._update_intent_with_followup(intent, user_query)

            # –û–Ω–æ–≤–ª—é—î–º–æ API –∑–∞–ø–∏—Ç
            updated_api_request = self._update_api_request_with_followup(
                api_request, updated_intent
            )

            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–æ–Ω—É—î–º–æ API –≤–∏–∫–ª–∏–∫ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º retry
            api_response = self._call_api_with_retry(
                updated_api_request, user_query, updated_intent
            )

            if self._is_server_error(api_response):
                # –©–µ –æ–¥–Ω–∞ –ø–æ–º–∏–ª–∫–∞ - –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
                followup_question = self._analyze_error_and_generate_followup(
                    api_response, updated_api_request, user_query, updated_intent
                )

                response = self._format_response(updated_api_request, api_response)
                response += f"\n\n{followup_question}"

                self.conversation_history.add_interaction(
                    user_id,
                    {
                        "user_message": user_query,
                        "bot_response": response,
                        "status": "needs_followup",
                        "needs_followup": True,
                        "api_request": updated_api_request,
                        "intent": updated_intent,
                        "server_error": api_response,
                    },
                )

                return {
                    "response": response,
                    "status": "needs_followup",
                    "needs_followup": True,
                    "api_request": updated_api_request,
                    "intent": updated_intent,
                    "server_error": api_response,
                }
            else:
                # –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                response = self._format_response(updated_api_request, api_response)
                response += "\n\n‚úÖ –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ!"

                self.conversation_history.add_interaction(
                    user_id,
                    {
                        "user_message": user_query,
                        "bot_response": response,
                        "status": "success",
                        "needs_followup": False,
                    },
                )

                return {"response": response, "status": "success", "needs_followup": False}

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É: {e}")
            return {
                "response": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É: {e}",
                "status": "error",
                "needs_followup": False,
            }

    def _is_server_error(self, api_response: Dict[str, Any]) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
        if not api_response:
            return True

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø—Ä–∞–≤–∂–Ω—ñ server errors (–Ω–µ auth –ø–æ–º–∏–ª–∫–∏)
        if "error" in api_response:
            return True

        status_code = api_response.get("status_code", 200)

        # 401/403 - —Ü–µ auth –ø–æ–º–∏–ª–∫–∏, –∞ –Ω–µ server errors
        # –í–æ–Ω–∏ –ø–æ–≤–∏–Ω–Ω—ñ –æ–±—Ä–æ–±–ª—è—Ç–∏—Å—è –æ–∫—Ä–µ–º–æ
        if status_code in [401, 403]:
            return True  # –ê–ª–µ –≤—Å–µ –∂ —Ç–∞–∫–∏ —Ç—Ä–µ–±–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É

        return status_code >= 400

    def _analyze_error_and_generate_followup(
        self,
        api_response: Dict[str, Any],
        api_request: Dict[str, Any],
        user_query: str,
        intent: Dict[str, Any],
    ) -> str:
        """–ê–Ω–∞–ª—ñ–∑—É—î –ø–æ–º–∏–ª–∫—É —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ –≥–µ–Ω–µ—Ä—É—î –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é."""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ auth –ø–æ–º–∏–ª–∫–∏ —Å–ø–æ—á–∞—Ç–∫—É
            if "auth_error" in api_response:
                auth_error = api_response.get("auth_error", "")
                auth_details = api_response.get("auth_details", "")
                return f"üîê –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {auth_error}\n\n{auth_details}\n\nüí° –î–æ–¥–∞–π—Ç–µ JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ API."

            # –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ–º–∏–ª–∫–∏
            error_message = api_response.get("error", "")
            error_details = api_response.get("details", "")

            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏
            if "validation" in error_message.lower() or "required" in error_message.lower():
                return self._generate_validation_followup(api_request, intent, error_message)
            elif "unauthorized" in error_message.lower() or "401" in str(
                api_response.get("status_code")
            ):
                return "üîê –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à JWT —Ç–æ–∫–µ–Ω."
            elif "not found" in error_message.lower() or "404" in str(
                api_response.get("status_code")
            ):
                return "üîç –†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å ID –∞–±–æ —à–ª—è—Ö—É."
            elif "conflict" in error_message.lower() or "409" in str(
                api_response.get("status_code")
            ):
                return "‚ö†Ô∏è –ö–æ–Ω—Ñ–ª—ñ–∫—Ç –¥–∞–Ω–∏—Ö. –ú–æ–∂–ª–∏–≤–æ, –∑–∞–ø–∏—Å –≤–∂–µ —ñ—Å–Ω—É—î."
            else:
                return f"‚ùì –°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É: {error_message}\n\nüí° –°–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö."

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–∫–∏: {e}")
            return "‚ùì –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç."

    def _generate_validation_followup(
        self, api_request: Dict[str, Any], intent: Dict[str, Any], error_message: str
    ) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫."""
        try:
            endpoint_info = api_request.get("endpoint_info", {})
            required_fields = endpoint_info.get("required_parameters", [])

            if required_fields:
                fields_text = ", ".join(required_fields)
                return f"""
‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {error_message}

üìã –î–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏:
‚Ä¢ {fields_text}

üí° –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
‚Ä¢ "–î–æ–¥–∞–π –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: –ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞"
‚Ä¢ "–í–∫–∞–∂–∏ –æ–ø–∏—Å: –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–ª—è –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤"
                """
            else:
                return f"""
‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {error_message}

üí° –ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç –∞–±–æ –Ω–∞–¥–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
                """

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó followup: {e}")
            return "‚ùì –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç."

    def _update_intent_with_followup(
        self, original_intent: Dict[str, Any], followup_query: str
    ) -> Dict[str, Any]:
        """–û–Ω–æ–≤–ª—é—î intent –∑ –Ω–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –∑ followup –∑–∞–ø–∏—Ç—É."""
        try:
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ followup –∑–∞–ø–∏—Ç
            followup_intent = self._analyze_user_intent(followup_query, "")

            if not followup_intent:
                return original_intent

            # –û–±'—î–¥–Ω—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            updated_intent = original_intent.copy()

            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            if "parameters" in followup_intent:
                if "parameters" not in updated_intent:
                    updated_intent["parameters"] = {}
                updated_intent["parameters"].update(followup_intent["parameters"])

            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
            if "data" in followup_intent:
                if "data" not in updated_intent:
                    updated_intent["data"] = {}
                updated_intent["data"].update(followup_intent["data"])

            return updated_intent

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è intent: {e}")
            return original_intent

    def _update_api_request_with_followup(
        self, original_request: Dict[str, Any], updated_intent: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–û–Ω–æ–≤–ª—é—î API –∑–∞–ø–∏—Ç –∑ –Ω–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é."""
        try:
            updated_request = original_request.copy()

            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
            if "data" in updated_intent and updated_intent["data"]:
                updated_request["data"] = updated_intent["data"]

            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            if "parameters" in updated_intent and updated_intent["parameters"]:
                if "params" not in updated_request:
                    updated_request["params"] = {}
                updated_request["params"].update(updated_intent["parameters"])

            return updated_request

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è API –∑–∞–ø–∏—Ç—É: {e}")
            return original_request

    def _analyze_user_intent(self, user_query: str, context: str = "") -> Optional[Dict[str, Any]]:
        """–ê–Ω–∞–ª—ñ–∑—É—î –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –∑–∞–ø–∏—Ç
            query_lower = user_query.lower()
            info_keywords = [
                "–ø–æ–∫–∞–∂–∏",
                "–ø–æ–∫–∞–∑–∞—Ç–∏",
                "—è–∫—ñ —î",
                "—â–æ –º–æ–∂–Ω–∞",
                "endpoints",
                "api",
                "—Å–ø–∏—Å–æ–∫ endpoints",
                "–¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó",
                "—â–æ —è –º–æ–∂—É",
                "—è–∫—ñ –º–µ—Ç–æ–¥–∏",
                "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è",
            ]

            is_info_request = any(keyword in query_lower for keyword in info_keywords)

            system_prompt = f"""
            –¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ API. –ê–Ω–∞–ª—ñ–∑—É–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤–∏–∑–Ω–∞—á–∞–π:
            1. –ß–∏ —Ü–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –∑–∞–ø–∏—Ç (–ø–æ–∫–∞–∑–∞—Ç–∏ endpoints, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é) —á–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π (–≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—é)
            2. –¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó (GET, POST, PUT, DELETE) - —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
            3. –†–µ—Å—É—Ä—Å –∞–±–æ endpoint
            4. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ –¥–∞–Ω—ñ
            5. –ú–µ—Ç–∞ –∞–±–æ —Ü—ñ–ª—å –∑–∞–ø–∏—Ç—É

            –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤–∑–∞—î–º–æ–¥—ñ–π:
            {context}

            –í–ê–ñ–õ–ò–í–û: –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–∏ endpoints, —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ–π, –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é - —Ü–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –∑–∞–ø–∏—Ç, –ù–ï –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π!

            –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
            {{
                "is_informational": true/false,
                "operation": "GET|POST|PUT|DELETE|INFO",
                "resource": "–Ω–∞–∑–≤–∞ —Ä–µ—Å—É—Ä—Å—É",
                "parameters": {{"param1": "value1"}},
                "data": {{"field1": "value1"}},
                "intent": "–æ–ø–∏—Å –º–µ—Ç–∏ –∑–∞–ø–∏—Ç—É"
            }}
            """

            messages = [SystemMessage(content=system_prompt), HumanMessage(content=user_query)]

            response = self.llm.invoke(messages)

            # –ü–∞—Ä—Å–∏–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            try:
                intent_data = json.loads(response.content)
                return intent_data
            except json.JSONDecodeError:
                logging.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å LLM")
                return None

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –Ω–∞–º—ñ—Ä—É: {e}")
            return None

    def _form_api_request(
        self, user_query: str, intent: Dict[str, Any], endpoints: List[Dict[str, Any]]
    ) -> Optional[Dict[str, Any]]:
        """–§–æ—Ä–º—É—î API –∑–∞–ø–∏—Ç –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é."""
        try:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π endpoint
            logger.info(f"üîç –®—É–∫–∞—é endpoint –¥–ª—è intent: {intent}")
            best_endpoint = self._find_best_endpoint(intent, endpoints)
            logger.info(f"üéØ –ó–Ω–∞–π–¥–µ–Ω–æ endpoint: {best_endpoint}")
            if not best_endpoint:
                return None

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ endpoint
            endpoint_info = self._get_endpoint_details(best_endpoint)

            # –í–∞–ª—ñ–¥—É—î–º–æ —Ç–∞ —Ñ–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç
            request_data = self._validate_and_form_request(intent, endpoint_info)
            if not request_data:
                return None

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ endpoint_path –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É (–≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤–Ω–∏–π URL)
            endpoint_url = best_endpoint.get(
                "endpoint_path", f"{self.base_url}{endpoint_info['path']}"
            )

            return {
                "url": endpoint_url,
                "method": endpoint_info["method"],
                "headers": self._get_headers(),
                "data": request_data.get("data"),
                "params": request_data.get("params"),
                "endpoint_info": endpoint_info,
            }

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è API –∑–∞–ø–∏—Ç—É: {e}")
            return None

    def _find_best_endpoint(
        self, intent: Dict[str, Any], endpoints: List[Dict[str, Any]]
    ) -> Optional[Dict[str, Any]]:
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫—Ä–∞—â–∏–π endpoint –¥–ª—è –∑–∞–ø–∏—Ç—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é."""
        target_method = intent.get("operation", "").upper()
        target_resource = intent.get("resource", "").lower()
        user_intent = intent.get("intent", "").lower()

        best_score = 0
        best_endpoint = None

        logger.info(
            f"üîç –ü–æ—à—É–∫ endpoint –¥–ª—è: method={target_method}, resource={target_resource}, intent={user_intent}"
        )

        for endpoint in endpoints:
            metadata = endpoint.get("metadata", {})
            method = metadata.get("method", "").upper()
            path = metadata.get("path", "").lower()
            summary = metadata.get("summary", "").lower()

            score = 0

            # –°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –º–µ—Ç–æ–¥—É (–Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ)
            if method == target_method:
                score += 5

            # –°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—É –≤ —à–ª—è—Ö—É
            if target_resource in path:
                score += 3

            # –°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –≤ –æ–ø–∏—Å—ñ
            if target_resource in summary:
                score += 2

            # –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è "–≤—Å—ñ" –∑–∞–ø–∏—Ç—ñ–≤
            if any(
                word in user_intent for word in ["–≤—Å—ñ", "all", "—Å–ø–∏—Å–æ–∫", "–ø–æ–∫–∞–∑–∞—Ç–∏", "–æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ"]
            ):
                # –í—ñ–¥–¥–∞—î–º–æ –ø–µ—Ä–µ–≤–∞–≥—É endpoints –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ ID
                if "{id}" not in path and "{" not in path:
                    score += 4  # –ë–æ–Ω—É—Å –∑–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
                    logger.info(f"  ‚úÖ –ë–æ–Ω—É—Å –∑–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: {method} {path}")
                elif "{id}" in path:
                    score -= 2  # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ID –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    logger.info(f"  ‚ö†Ô∏è –®—Ç—Ä–∞—Ñ –∑–∞ ID –ø–∞—Ä–∞–º–µ—Ç—Ä: {method} {path}")

            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –±–æ–Ω—É—Å–∏ –∑–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ summary
            if any(word in summary for word in ["get all", "—Å–ø–∏—Å–æ–∫", "–≤—Å—ñ", "–æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ"]):
                score += 2
                logger.info(f"  ‚úÖ –ë–æ–Ω—É—Å –∑–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ –æ–ø–∏—Å—ñ: {method} {path}")

            logger.info(f"  üìä Endpoint: {method} {path} - score: {score}")

            if score > best_score:
                best_score = score
                best_endpoint = endpoint

        if best_endpoint:
            final_method = best_endpoint.get("metadata", {}).get("method", "")
            final_path = best_endpoint.get("metadata", {}).get("path", "")
            logger.info(f"üéØ –û–±—Ä–∞–Ω–∏–π endpoint: {final_method} {final_path} (score: {best_score})")

        return best_endpoint

    def _get_endpoint_details(self, endpoint: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ endpoint."""
        metadata = endpoint.get("metadata", {})

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ endpoint
        for ep in self.parser.get_endpoints():
            if ep["method"] == metadata.get("method") and ep["path"] == metadata.get("path"):
                return {
                    "method": ep["method"],
                    "path": ep["path"],
                    "summary": ep.get("summary", ""),
                    "description": ep.get("description", ""),
                    "parameters": ep.get("parameters", []),
                    "request_body": ep.get("request_body", {}),
                    "required_parameters": ep.get("required_parameters", []),
                    "optional_parameters": ep.get("optional_parameters", []),
                    "path_variables": ep.get("path_variables", []),
                    "query_parameters": ep.get("query_parameters", []),
                }

        return metadata

    def _validate_and_form_request(
        self, intent: Dict[str, Any], endpoint_info: Dict[str, Any]
    ) -> Optional[Dict[str, Any]]:
        """–í–∞–ª—ñ–¥—É—î —Ç–∞ —Ñ–æ—Ä–º—É—î –∑–∞–ø–∏—Ç."""
        try:
            request_data = {}
            params = {}

            # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            intent_params = intent.get("parameters", {})
            intent_data = intent.get("data", {})

            # Path variables
            for param in endpoint_info.get("parameters", []):
                if hasattr(param, "location") and param.location == "path":
                    param_name = param.name
                    if param_name in intent_params:
                        # –ó–∞–º—ñ–Ω—é—î–º–æ –≤ —à–ª—è—Ö—É
                        path = endpoint_info["path"].replace(
                            f"{{{param_name}}}", str(intent_params[param_name])
                        )
                        endpoint_info["path"] = path

            # Query parameters
            for param in endpoint_info.get("parameters", []):
                if hasattr(param, "location") and param.location == "query":
                    param_name = param.name
                    if param_name in intent_params:
                        params[param_name] = intent_params[param_name]

            # Request body - –¥–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è POST/PUT/PATCH –∑–∞–ø–∏—Ç—ñ–≤
            if intent_data:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î request_body –≤ endpoint_info –∞–±–æ —á–∏ —Ü–µ POST/PUT/PATCH –∑–∞–ø–∏—Ç
                method = endpoint_info.get("method", "").upper()
                if endpoint_info.get("request_body") or method in ["POST", "PUT", "PATCH"]:
                    request_data["data"] = intent_data

            return {"data": request_data.get("data"), "params": params}

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—É: {e}")
            return None

    def _get_headers(self) -> Dict[str, str]:
        """–§–æ—Ä–º—É—î –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø–∏—Ç—É."""
        headers = {"Content-Type": "application/json", "Accept": "application/json"}

        # –û—Ç—Ä–∏–º—É—î–º–æ JWT —Ç–æ–∫–µ–Ω –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        jwt_token = self._get_jwt_token_from_db()
        if jwt_token:
            headers["Authorization"] = f"Bearer {jwt_token}"
            logger.info("üîë –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é JWT —Ç–æ–∫–µ–Ω –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
        elif self.jwt_token:
            # Fallback –¥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞
            headers["Authorization"] = f"Bearer {self.jwt_token}"
            logger.info("üîë –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
        else:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π API —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∏–∫–ª–∏–∫—ñ–≤ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö API
            external_api_token = os.getenv("EXTERNAL_API_TOKEN")
            if external_api_token:
                headers["Authorization"] = f"Bearer {external_api_token}"
                logger.info("üîë –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–æ–≤–Ω—ñ—à–Ω—ñ–π API —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
            else:
                logger.info("üåê API —Ä–æ—É—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–º–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó)")

        return headers

    def _get_jwt_token_from_db(self) -> Optional[str]:
        """–û—Ç—Ä–∏–º—É—î JWT —Ç–æ–∫–µ–Ω –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
        try:
            import os
            import sys

            sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

            try:
                from api.database import SessionLocal
                from api.models import ApiToken
            except ImportError:
                return None

            db = SessionLocal()
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ü—ñ—î—ó Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                token = (
                    db.query(ApiToken)
                    .filter(
                        ApiToken.user_id == self.user_id,
                        ApiToken.swagger_spec_id == self.swagger_spec_id,
                        ApiToken.token_name == "jwt_auth",
                        ApiToken.is_active == True,
                    )
                    .first()
                )

                return token.token_value if token else None

            finally:
                db.close()

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞ –∑ –ë–î: {e}")
            return None

    def _call_api(self, api_request: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–í–∏–∫–æ–Ω—É—î API –≤–∏–∫–ª–∏–∫ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫."""
        try:
            timeout = int(os.getenv("REQUEST_TIMEOUT", "30"))
            start_time = time.time()

            logger.info(f"üåê –í–∏–∫–æ–Ω—É—é API –∑–∞–ø–∏—Ç: {api_request['method']} {api_request['url']}")

            response = requests.request(
                method=api_request["method"],
                url=api_request["url"],
                headers=api_request["headers"],
                params=api_request.get("params"),
                json=api_request.get("data"),
                timeout=timeout,
            )

            execution_time = int((time.time() - start_time) * 1000)  # –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

            api_response = {
                "status_code": response.status_code,
                "headers": dict(response.headers),
                "data": response.json() if response.content else None,
                "text": response.text,
            }

            logger.info(
                f"üìä API –≤—ñ–¥–ø–æ–≤—ñ–¥—å: status={response.status_code}, data={response.text[:100]}..."
            )

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –¥–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            if response.status_code == 401:
                logger.warning("üîí –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (401). –ú–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω JWT —Ç–æ–∫–µ–Ω.")
                api_response["auth_error"] = "Unauthorized"
                api_response["auth_details"] = "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ JWT —Ç–æ–∫–µ–Ω."
            elif response.status_code == 403:
                logger.warning("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ (403). –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")
                api_response["auth_error"] = "Forbidden"
                api_response["auth_details"] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ endpoint."

            # –ó–∞–ø–∏—Å—É—î–º–æ API –≤–∏–∫–ª–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            self._record_api_call(api_request, api_response, execution_time)

            return api_response

        except requests.exceptions.Timeout:
            error_response = {
                "error": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É",
                "details": "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–æ—Ç—è–≥–æ–º 30 —Å–µ–∫—É–Ω–¥",
            }
            self._record_api_call(api_request, error_response, 0)
            return error_response
        except requests.exceptions.ConnectionError:
            error_response = {
                "error": "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è",
                "details": "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞",
            }
            self._record_api_call(api_request, error_response, 0)
            return error_response
        except UnicodeEncodeError as e:
            error_response = {
                "error": "–ü–æ–º–∏–ª–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è",
                "details": f"–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–∫–æ–¥—É–≤–∞—Ç–∏ —Å–∏–º–≤–æ–ª–∏: {str(e)}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è slug.",
                "encoding_error": True,
            }
            self._record_api_call(api_request, error_response, 0)
            return error_response
        except Exception as e:
            error_response = {"error": str(e), "details": "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É"}
            self._record_api_call(api_request, error_response, 0)
            return error_response

    def _record_api_call(
        self, api_request: Dict[str, Any], api_response: Dict[str, Any], execution_time: int
    ):
        """–ó–∞–ø–∏—Å—É—î API –≤–∏–∫–ª–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö."""
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ
            import os
            import sys

            sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

            try:
                from api.database import SessionLocal
                from api.models import ApiCall
            except ImportError:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–æ–¥—É–ª—ñ –¥–ª—è –∑–∞–ø–∏—Å—É API –≤–∏–∫–ª–∏–∫—ñ–≤")
                return

            import uuid
            from datetime import datetime

            # –û—Ç—Ä–∏–º—É—î–º–æ user_id —Ç–∞ swagger_spec_id –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            user_id = getattr(self, "user_id", "default_user")
            swagger_spec_id = getattr(self, "swagger_spec_id", None)

            if not swagger_spec_id:
                # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ URL
                url = api_request.get("url", "")
                if "api-service" in url:
                    swagger_spec_id = "api-service"

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ API –≤–∏–∫–ª–∏–∫
            api_call = ApiCall(
                id=str(uuid.uuid4()),
                user_id=user_id,
                swagger_spec_id=swagger_spec_id or "unknown",
                endpoint_path=api_request.get("url", ""),
                method=api_request.get("method", "GET"),
                request_data=api_request,
                response_data=api_response,
                status_code=api_response.get("status_code"),
                execution_time=execution_time,
                created_at=datetime.now(),
            )

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            db = SessionLocal()
            try:
                db.add(api_call)
                db.commit()
                print(
                    f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ API –≤–∏–∫–ª–∏–∫: {api_request.get('method')} {api_request.get('url')}"
                )
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É API –≤–∏–∫–ª–∏–∫—É: {e}")
                db.rollback()
            finally:
                db.close()

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É API –≤–∏–∫–ª–∏–∫—É: {e}")

    def _call_api_with_retry(
        self, api_request: Dict[str, Any], user_query: str = "", intent: Dict[str, Any] = None
    ) -> Optional[Dict[str, Any]]:
        """–í–∏–∫–æ–Ω—É—î API –≤–∏–∫–ª–∏–∫ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º retry —Ç–∞ GPT-–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏."""
        import time

        from src.config import Config

        if not Config.AUTO_RETRY_ENABLED:
            return self._call_api(api_request)

        original_request = api_request.copy()
        current_request = api_request.copy()

        for attempt in range(1, Config.MAX_RETRY_ATTEMPTS + 1):
            logger.info(
                f"üîÑ –°–ø—Ä–æ–±–∞ {attempt}/{Config.MAX_RETRY_ATTEMPTS}: {current_request['method']} {current_request['url']}"
            )

            # –í–∏–∫–æ–Ω—É—î–º–æ API –≤–∏–∫–ª–∏–∫
            api_response = self._call_api(current_request)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω retry
            if not self._should_retry(api_response, attempt, Config.MAX_RETRY_ATTEMPTS):
                # –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –º–∞–∫—Å–∏–º—É–º —Å–ø—Ä–æ–± - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if attempt > 1:
                    logger.info(f"‚úÖ –ó–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π –ø—ñ—Å–ª—è {attempt} —Å–ø—Ä–æ–±")
                return api_response

            if attempt < Config.MAX_RETRY_ATTEMPTS:
                logger.warning(
                    f"üîß –°–ø—Ä–æ–±–∞ {attempt} –Ω–µ –≤–¥–∞–ª–∞—Å—å, –∞–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è..."
                )

                # –û—Ç—Ä–∏–º—É—î–º–æ GPT-–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                fix_result = self._analyze_and_fix_with_gpt(
                    original_request=original_request,
                    current_request=current_request,
                    api_response=api_response,
                    user_query=user_query,
                    attempt=attempt,
                    max_attempts=Config.MAX_RETRY_ATTEMPTS,
                )

                if fix_result and fix_result.get("can_retry", False):
                    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                    current_request = fix_result.get("updated_request", current_request)
                    logger.info(
                        f"üõ†Ô∏è –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {fix_result.get('analysis', '–ù–µ–≤—ñ–¥–æ–º–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è')}"
                    )

                    # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
                    if Config.RETRY_DELAY_SECONDS > 0:
                        time.sleep(Config.RETRY_DELAY_SECONDS)
                else:
                    logger.warning(f"‚ùå GPT –Ω–µ –º–æ–∂–µ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ retry")
                    break

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        logger.warning(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º —Å–ø—Ä–æ–± ({Config.MAX_RETRY_ATTEMPTS}) –≤–∏—á–µ—Ä–ø–∞–Ω–æ")
        return api_response

    def _should_retry(
        self, api_response: Dict[str, Any], current_attempt: int, max_attempts: int
    ) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω retry –¥–ª—è —Ü—ñ—î—ó –ø–æ–º–∏–ª–∫–∏."""
        from src.config import Config

        if not api_response or current_attempt >= max_attempts:
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ connection errors
        if "error" in api_response:
            error_msg = api_response.get("error", "").lower()
            if Config.RETRY_ON_CONNECTION_ERRORS and "–∑'—î–¥–Ω–∞–Ω–Ω—è" in error_msg:
                return True
            if Config.RETRY_ON_TIMEOUT_ERRORS and "—Ç–∞–π–º–∞—É—Ç" in error_msg:
                return True
            if "–∫–æ–¥—É–≤–∞–Ω–Ω—è" in error_msg or api_response.get("encoding_error", False):
                return True  # Retry –Ω–∞ –ø–æ–º–∏–ª–∫–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è - GPT –º–æ–∂–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ slug

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ HTTP status codes
        status_code = api_response.get("status_code")
        if status_code and status_code in Config.RETRY_ON_STATUS_CODES:
            return True

        # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è 400 –ø–æ–º–∏–ª–æ–∫ - —Ç—ñ–ª—å–∫–∏ –ø–µ–≤–Ω—ñ –≤–∏–ø–∞–¥–∫–∏
        if status_code == 400:
            error_message = str(api_response.get("data", {})).lower()

            # –î–æ–∑–≤–æ–ª—è—î–º–æ retry —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤—ñ–¥–æ–º–∏—Ö –≤–∏–ø—Ä–∞–≤–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
            if Config.RETRY_ON_MISSING_SLUG and "slug must be a string" in error_message:
                logger.info("üîß –î–æ–∑–≤–æ–ª–µ–Ω–æ retry: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π slug")
                return True

            if Config.RETRY_ON_MISSING_REQUIRED_FIELDS and (
                "required" in error_message or "missing" in error_message
            ):
                logger.info("üîß –î–æ–∑–≤–æ–ª–µ–Ω–æ retry: –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è")
                return True

            # –Ü–Ω—à—ñ 400 –ø–æ–º–∏–ª–∫–∏ –ù–ï retry
            logger.info(f"‚ùå 400 –ø–æ–º–∏–ª–∫–∞ –ù–ï –¥–ª—è retry: {error_message[:100]}")
            return False

        return False

    def _analyze_and_fix_with_gpt(
        self,
        original_request: Dict[str, Any],
        current_request: Dict[str, Any],
        api_response: Dict[str, Any],
        user_query: str,
        attempt: int,
        max_attempts: int,
    ) -> Optional[Dict[str, Any]]:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î GPT –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å."""
        try:
            import json

            from src.enhanced_prompt_manager import EnhancedPromptManager

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–æ–∫ –∑ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            prompt_manager = EnhancedPromptManager()

            # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
            error_info = {
                "user_query": user_query,
                "original_request": json.dumps(original_request, ensure_ascii=False),
                "current_request": json.dumps(current_request, ensure_ascii=False),
                "api_error": str(api_response.get("error", api_response.get("data", {}))),
                "status_code": api_response.get("status_code", "Unknown"),
                "retry_attempt": attempt,
                "max_retries": max_attempts,
            }

            # –í–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–º–ø—Ç –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø–æ–º–∏–ª–∫–∏
            if api_response.get("encoding_error", False) or "–∫–æ–¥—É–≤–∞–Ω–Ω—è" in str(
                api_response.get("error", "")
            ):
                prompt_name = "encoding_error_fix"
                # –î–ª—è –ø–æ–º–∏–ª–æ–∫ –∫–æ–¥—É–≤–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                error_info["error_details"] = api_response.get(
                    "details", str(api_response.get("error", ""))
                )
            else:
                prompt_name = "error_analysis_and_fix"

            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç
            filled_prompt = prompt_manager.get_prompt_by_name(prompt_name, **error_info)

            if not filled_prompt or "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É" in filled_prompt:
                logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–æ–∫")
                return None

            # –í–∏–∫–ª–∏–∫–∞—î–º–æ GPT —á–µ—Ä–µ–∑ LangChain
            messages = [HumanMessage(content=filled_prompt)]
            response = self.llm(messages)

            if not response or not response.content:
                logger.error("‚ùå GPT –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–∫–∏")
                return None

            response_text = response.content

            # –õ–æ–≥—É—î–º–æ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT –¥–ª—è –¥–µ–±–∞–≥—É
            logger.debug(f"ü§ñ –ü–æ–≤–Ω–∞ GPT –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text}")

            # –ü–∞—Ä—Å–∏–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            import json

            try:
                # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ –≤—Å—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ JSON
                try:
                    fix_result = json.loads(response_text.strip())
                    logger.info(f"ü§ñ GPT –∞–Ω–∞–ª—ñ–∑: {fix_result.get('analysis', '–ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')}")
                    return fix_result
                except json.JSONDecodeError:
                    pass

                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è, –≤–∏—Ç—è–≥—É—î–º–æ JSON –±–ª–æ–∫
                json_start = response_text.find("{")
                json_end = response_text.rfind("}") + 1
                if json_start >= 0 and json_end > json_start:
                    json_response = response_text[json_start:json_end]
                    logger.debug(f"üìù –í–∏—Ç—è–≥–Ω—É—Ç–∏–π JSON: {json_response}")

                    # –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫—ñ–Ω–µ—Ü—å JSON
                    import re

                    # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π –≤–∞–ª—ñ–¥–Ω–∏–π JSON –æ–±'—î–∫—Ç
                    brace_count = 0
                    valid_end = json_start
                    for i, char in enumerate(response_text[json_start:], json_start):
                        if char == "{":
                            brace_count += 1
                        elif char == "}":
                            brace_count -= 1
                            if brace_count == 0:
                                valid_end = i + 1
                                break

                    json_response = response_text[json_start:valid_end]
                    fix_result = json.loads(json_response)

                    logger.info(f"ü§ñ GPT –∞–Ω–∞–ª—ñ–∑: {fix_result.get('analysis', '–ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')}")
                    return fix_result
                else:
                    logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ JSON –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT")
                    return None

            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –≤—ñ–¥ GPT: {e}")
                logger.debug(f"GPT –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text}")
                return None

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ GPT –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return None

    def _format_response(
        self,
        api_request: Dict[str, Any],
        response: Optional[Dict[str, Any]] = None,
        preview: bool = False,
    ) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
        try:
            if preview:
                return self._format_preview_response(api_request)

            if not response:
                return self._generate_error_response("–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞")

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
            return self._process_api_response_with_gpt(api_request, response)

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
            return self._generate_error_response(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {str(e)}")

    def _process_api_response_with_gpt(
        self, api_request: Dict[str, Any], api_response: Dict[str, Any]
    ) -> str:
        """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å API —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ GPT –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É."""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_query = self._get_last_user_query()

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            processing_prompt = self.prompt_manager.get_api_response_processing_prompt(
                user_query=user_query,
                api_response=api_response,
                available_fields=self._extract_available_fields(api_response),
            )

            # –í–∏–∫–ª–∏–∫–∞—î–º–æ GPT –¥–ª—è –æ–±—Ä–æ–±–∫–∏
            messages = [
                SystemMessage(content="–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π."),
                HumanMessage(content=processing_prompt),
            ]

            llm_response = self.llm.invoke(messages)
            processed_response = llm_response.content

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API –∑–∞–ø–∏—Ç
            api_info = f"""
üîó **API –ó–∞–ø–∏—Ç:**
‚Ä¢ URL: {api_request.get('url', '–ù–µ–≤—ñ–¥–æ–º–æ')}
‚Ä¢ –ú–µ—Ç–æ–¥: {api_request.get('method', 'GET')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –£—Å–ø—ñ—à–Ω–æ

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
{processed_response}
"""

            return api_info

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ GPT: {e}")
            # Fallback –¥–æ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            return self._format_basic_response(api_request, api_response)

    def _create_object_with_auto_fill(
        self, user_query: str, endpoint_info: Dict[str, Any], user_identifier: str = "default_user"
    ) -> str:
        """–°—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º –ø–æ–ª—ñ–≤ —Ç–∞ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫."""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏
            conversation_history = self.conversation_history.load_conversation(user_identifier)

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞
            creation_prompt = self.prompt_manager.get_object_creation_prompt(
                user_query=user_query,
                endpoint_info=endpoint_info,
                conversation_history=conversation_history,
            )

            # –í–∏–∫–ª–∏–∫–∞—î–º–æ GPT –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞
            messages = [
                SystemMessage(
                    content="–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ —á–µ—Ä–µ–∑ API —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤."
                ),
                HumanMessage(content=creation_prompt),
            ]

            llm_response = self.llm.invoke(messages)
            creation_response = llm_response.content

            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –æ–±'—î–∫—Ç–∞
            object_data = self._parse_object_creation_response(creation_response)

            if object_data:
                # –§–æ—Ä–º—É—î–º–æ API –∑–∞–ø–∏—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
                api_request = self._form_creation_request(endpoint_info, object_data)

                # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
                response = self._call_api(api_request)

                if response and not self._is_server_error(response):
                    # –£—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
                    # –°–µ—Ä—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –æ–±—Ä–æ–±–∫–æ—é datetime
                    try:
                        response_json = self._serialize_response(response)
                    except Exception:
                        response_json = str(response)

                    success_message = f"""
‚úÖ **–û–±'—î–∫—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!**

üìã **–î–µ—Ç–∞–ª—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:**
{creation_response}

üîó **API –ó–∞–ø–∏—Ç:**
‚Ä¢ URL: {api_request.get('url', '–ù–µ–≤—ñ–¥–æ–º–æ')}
‚Ä¢ –ú–µ—Ç–æ–¥: {api_request.get('method', 'POST')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –£—Å–ø—ñ—à–Ω–æ

üìä **–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:**
```json
{response_json}
```
"""
                    return success_message
                else:
                    # –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ
                    return self._handle_creation_error(response, creation_response, user_query)
            else:
                return f"""
‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–ø–∏—Ç—É:**
–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —è–∫–∏–π –æ–±'—î–∫—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏.

üí° **–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤:**
‚Ä¢ "–°—Ç–≤–æ—Ä–∏ —Ç–æ–≤–∞—Ä –∑ –Ω–∞–∑–≤–æ—é –¢–µ–ª–µ—Ñ–æ–Ω"
‚Ä¢ "–°—Ç–≤–æ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞"
‚Ä¢ "–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ"

üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç.
"""

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞: {e}")
            return f"""
‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞:**
{str(e)}

üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""

    def _parse_object_creation_response(self, gpt_response: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –æ–±'—î–∫—Ç–∞."""
        try:
            # –®—É–∫–∞—î–º–æ JSON –±–ª–æ–∫ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT
            import re

            json_match = re.search(r"\{[^{}]*\}", gpt_response, re.DOTALL)

            if json_match:
                json_str = json_match.group(0)
                return json.loads(json_str)

            # –Ø–∫—â–æ JSON –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –¥–∞–Ω—ñ –∑ —Ç–µ–∫—Å—Ç—É
            return self._extract_data_from_text(gpt_response)

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT: {e}")
            return None

    def _extract_data_from_text(self, text: str) -> Dict[str, Any]:
        """–í–∏—Ç—è–≥—É—î –¥–∞–Ω—ñ –∑ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT."""
        data = {}

        # –®—É–∫–∞—î–º–æ –ø–∞—Ä–∏ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è
        import re

        patterns = [
            r'"name":\s*"([^"]+)"',
            r'"description":\s*"([^"]+)"',
            r'"price":\s*([\d.]+)',
            r'"category":\s*"([^"]+)"',
            r'"email":\s*"([^"]+)"',
            r'"status":\s*"([^"]+)"',
        ]

        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                key = pattern.split('"')[1]
                value = match.group(1)
                data[key] = value

        return data

    def _form_creation_request(
        self, endpoint_info: Dict[str, Any], object_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–§–æ—Ä–º—É—î API –∑–∞–ø–∏—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞."""
        return {
            "url": endpoint_info.get("url", ""),
            "method": "POST",
            "headers": self._get_headers(),
            "data": object_data,
            "endpoint_info": endpoint_info,
        }

    def _handle_creation_error(
        self, response: Dict[str, Any], creation_response: str, user_query: str
    ) -> str:
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∞."""
        error_message = response.get("error", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")

        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏
        if "validation" in error_message.lower() or "required" in error_message.lower():
            return f"""
‚ùå **–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ:**
{error_message}

üí° **–ó–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ:**
{creation_response}

üîÑ **–†—ñ—à–µ–Ω–Ω—è:**
–ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.
"""
        elif "authorization" in error_message.lower() or "token" in error_message.lower():
            return f"""
‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:**
{error_message}

üîê **–†—ñ—à–µ–Ω–Ω—è:**
–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""
        elif "not found" in error_message.lower():
            return f"""
‚ùå **–†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:**
{error_message}

üí° **–†—ñ—à–µ–Ω–Ω—è:**
–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å URL –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""
        else:
            return f"""
‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞:**
{error_message}

üí° **–ó–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ:**
{creation_response}

üîÑ **–†—ñ—à–µ–Ω–Ω—è:**
–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""

    def _get_last_user_query(self) -> str:
        """–û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
        # –¢—É—Ç –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
        # –ù–∞—Ä–∞–∑—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç
        return "–ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Ç—É"

    def _is_creation_request(self, user_query: str) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î —á–∏ —î –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞."""
        query_lower = user_query.lower()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥/–ø–æ–∫–∞–∑/–æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        view_keywords = [
            "–ø–æ–∫–∞–∂–∏",
            "–ø–æ–∫–∞–∑–∞—Ç–∏",
            "–æ—Ç—Ä–∏–º–∞—Ç–∏",
            "—Å–ø–∏—Å–æ–∫",
            "–≤—Å—ñ",
            "show",
            "get",
            "list",
            "view",
            "—è–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏",
            "—è–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫",
            "endpoints –¥–ª—è",
            "endpoints",
        ]
        if any(keyword in query_lower for keyword in view_keywords):
            return False

        # –¢—ñ–ª—å–∫–∏ —è–∫—â–æ —î –µ–∫—Å–ø–ª—ñ—Ü–∏—Ç–Ω—ñ –¥—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        creation_keywords = ["—Å—Ç–≤–æ—Ä–∏", "create", "–¥–æ–¥–∞–π", "add", "–Ω–æ–≤–∏–π", "new"]
        return any(keyword in query_lower for keyword in creation_keywords)

    def _handle_creation_request(self, user_query: str, user_id: str) -> Dict[str, Any]:
        """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞."""
        try:
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –æ–±'—î–∫—Ç–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            object_type = self._determine_creation_type(user_query)

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π endpoint –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            endpoint_info = self._find_creation_endpoint(object_type)

            if not endpoint_info:
                response = f"""
‚ùå **–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ endpoint –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è {object_type}**

üí° **–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ –æ–±'—î–∫—Ç—ñ–≤:**
‚Ä¢ –¢–æ–≤–∞—Ä–∏ (products)
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó (categories)
‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (users)

üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç.
"""
                return {"success": False, "response": response, "status": "no_creation_endpoint"}

            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º
            creation_response = self._create_object_with_auto_fill(
                user_query, endpoint_info, user_id
            )

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∑–∞—î–º–æ–¥—ñ—é
            self.conversation_history.add_interaction(
                user_id,
                {
                    "user_message": user_query,
                    "bot_response": creation_response,
                    "status": "creation_processed",
                },
            )

            return {"success": True, "response": creation_response, "status": "creation_processed"}

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")
            return {
                "success": False,
                "response": self._generate_error_response(str(e)),
                "status": "creation_error",
            }

    def _determine_creation_type(self, user_query: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –æ–±'—î–∫—Ç–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è."""
        query_lower = user_query.lower()

        if any(word in query_lower for word in ["–∫–∞—Ç–µ–≥–æ—Ä—ñ—é", "category"]):
            return "category"
        elif any(word in query_lower for word in ["—Ç–æ–≤–∞—Ä", "product", "–ø—Ä–æ–¥—É–∫—Ç"]):
            return "product"
        elif any(word in query_lower for word in ["–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "user"]):
            return "user"
        else:
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–≤–∞–∂–∞—î–º–æ —Ç–æ–≤–∞—Ä–æ–º
            return "product"

    def _find_creation_endpoint(self, object_type: str) -> Optional[Dict[str, Any]]:
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å endpoint –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞."""
        try:
            # –®—É–∫–∞—î–º–æ POST endpoints –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            all_endpoints = self.rag_engine.get_all_endpoints()
            logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(all_endpoints)} endpoints –¥–ª—è –ø–æ—à—É–∫—É {object_type}")

            for endpoint in all_endpoints:
                metadata = endpoint.get("metadata", {})
                method = metadata.get("method", "").upper()
                path = metadata.get("path", "").lower()

                logging.info(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—é endpoint: {method} {path} –¥–ª—è {object_type}")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ POST endpoint –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
                if method == "POST":
                    if object_type == "category" and "category" in path:
                        logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ endpoint –¥–ª—è category: {method} {path}")
                        return endpoint
                    elif object_type == "product" and ("product" in path or "item" in path):
                        logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ endpoint –¥–ª—è product: {method} {path}")
                        return endpoint
                    elif object_type == "user" and "user" in path:
                        logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ endpoint –¥–ª—è user: {method} {path}")
                        return endpoint

            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π endpoint, —à—É–∫–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π
            for endpoint in all_endpoints:
                metadata = endpoint.get("metadata", {})
                method = metadata.get("method", "").upper()
                if method == "POST":
                    path = metadata.get("path", "").lower()
                    logging.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑–∞–≥–∞–ª—å–Ω–∏–π POST endpoint: {method} {path}")
                    return endpoint

            logging.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ POST endpoint –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è {object_type}")
            return None

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É endpoint –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")
            return None

    def _extract_available_fields(self, api_response: Dict[str, Any]) -> List[str]:
        """–í–∏—Ç—è–≥—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–ª—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API."""
        fields = set()

        def extract_fields_from_obj(obj, prefix=""):
            if isinstance(obj, dict):
                for key, value in obj.items():
                    field_name = f"{prefix}.{key}" if prefix else key
                    fields.add(field_name)
                    if isinstance(value, (dict, list)):
                        extract_fields_from_obj(value, field_name)
            elif isinstance(obj, list) and obj:
                extract_fields_from_obj(obj[0], prefix)

        extract_fields_from_obj(api_response)
        return list(fields)

    def _format_basic_response(
        self, api_request: Dict[str, Any], api_response: Dict[str, Any]
    ) -> str:
        """–ë–∞–∑–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (fallback)."""
        return f"""
üîó **API –ó–∞–ø–∏—Ç:**
‚Ä¢ URL: {api_request.get('url', '–ù–µ–≤—ñ–¥–æ–º–æ')}
‚Ä¢ –ú–µ—Ç–æ–¥: {api_request.get('method', 'GET')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –£—Å–ø—ñ—à–Ω–æ

üìä **–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:**
```json
{self._serialize_response(api_response)}
```
"""

    def _format_preview_response(self, api_request: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–ø–∏—Ç—É."""
        return f"""
üîç **–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–ø–∏—Ç—É:**
‚Ä¢ URL: {api_request.get('url', '–ù–µ–≤—ñ–¥–æ–º–æ')}
‚Ä¢ –ú–µ—Ç–æ–¥: {api_request.get('method', 'GET')}
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {api_request.get('params', {})}
‚Ä¢ –î–∞–Ω—ñ: {api_request.get('data', {})}

üí° –¶–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥. –ó–∞–ø–∏—Ç —â–µ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ.
"""

    def _generate_helpful_error_response(self, user_query: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∫–æ—Ä–∏—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–æ–º—É –∑–∞–ø–∏—Ç—ñ."""
        return f"""
ü§î –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç: "{user_query}"

üí° –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏"
‚Ä¢ "–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –∑ –Ω–∞–∑–≤–æ—é '–¢–µ—Å—Ç'"
‚Ä¢ "–û—Ç—Ä–∏–º–∞–π —Ç–æ–≤–∞—Ä –∑ ID 123"
‚Ä¢ "–û–Ω–æ–≤–∏ —Ç–æ–≤–∞—Ä 456 - –∑–º—ñ–Ω–∏ —Ü—ñ–Ω—É –Ω–∞ 1000"

üìö –î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó:
‚Ä¢ GET - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
‚Ä¢ POST - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
‚Ä¢ PUT - –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
‚Ä¢ DELETE - –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
        """

    def _generate_no_endpoint_response(self, user_query: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ endpoint."""
        return f"""
üîç –ù–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π—à–æ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ API endpoint –¥–ª—è –∑–∞–ø–∏—Ç—É: "{user_query}"

üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ —Ä–µ—Å—É—Ä—Å—É
‚Ä¢ –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è
‚Ä¢ –í—ñ–¥—Å—É—Ç–Ω—ñ–π endpoint –¥–ª—è —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ

üìã –î–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏:
‚Ä¢ –¢–æ–≤–∞—Ä–∏ (products)
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó (categories)
‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (users)
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è (orders)

üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ —Ä–µ—Å—É—Ä—Å—É.
        """

    def _generate_request_formation_error(self, user_query: str, intent: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É."""
        return f"""
‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ API –∑–∞–ø–∏—Ç –¥–ª—è: "{user_query}"

üîç –ê–Ω–∞–ª—ñ–∑ –Ω–∞–º—ñ—Ä—É:
‚Ä¢ –û–ø–µ—Ä–∞—Ü—ñ—è: {intent.get('operation', '–ù–µ–≤—ñ–¥–æ–º–æ')}
‚Ä¢ –†–µ—Å—É—Ä—Å: {intent.get('resource', '–ù–µ–≤—ñ–¥–æ–º–æ')}
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {intent.get('parameters', {})}

üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
‚Ä¢ –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö
‚Ä¢ –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤

üõ†Ô∏è –°–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –î–æ–¥–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ–Ω—à–∏–π endpoint
        """

    def _generate_error_response(self, error_message: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏ –∑–∞–≥–∞–ª—å–Ω—ñ–π –ø–æ–º–∏–ª—Ü—ñ."""
        return f"""
‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {error_message}

üîß –©–æ –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏:
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚Ä¢ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É
‚Ä¢ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç
‚Ä¢ –ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üìû –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è, –∑–±–µ—Ä–µ–∂—ñ—Ç—å —Ü—é –ø–æ–º–∏–ª–∫—É –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É.
        """

    def get_available_endpoints(self) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö endpoints."""
        try:
            return self.rag_engine.get_all_endpoints()
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è endpoints: {e}")
            return []

    def get_api_summary(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API."""
        endpoints = self.parser.get_endpoints()
        schemas = self.parser.get_all_schemas_info()

        return {
            "api_info": self.api_info,
            "total_endpoints": len(endpoints),
            "total_schemas": len(schemas),
            "methods": list(set(ep["method"] for ep in endpoints)),
            "tags": list(set(tag for ep in endpoints for tag in ep.get("tags", []))),
            "base_url": self.base_url,
        }

    def get_conversation_history(self, user_identifier: str) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        user_id = self._generate_user_id(user_identifier)
        return self.conversation_history.load_conversation(user_id)

    def clear_conversation_history(self, user_identifier: str):
        """–û—á–∏—â–∞—î —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        user_id = self._generate_user_id(user_identifier)
        file_path = self.conversation_history._get_user_file(user_id)
        if file_path.exists():
            file_path.unlink()

    def _serialize_response(self, response: Any) -> str:
        """–°–µ—Ä—ñ–∞–ª—ñ–∑—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –æ–±—Ä–æ–±–∫–æ—é datetime –æ–±'—î–∫—Ç—ñ–≤."""

        def json_serializer(obj):
            """–ö–∞—Å—Ç–æ–º–Ω–∏–π —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä –¥–ª—è datetime —Ç–∞ —ñ–Ω—à–∏—Ö –æ–±'—î–∫—Ç—ñ–≤."""
            if hasattr(obj, "isoformat"):
                return obj.isoformat()
            elif hasattr(obj, "__dict__"):
                return str(obj)
            else:
                return str(obj)

        return json.dumps(response, ensure_ascii=False, indent=2, default=json_serializer)

    def _handle_informational_request(
        self, user_query: str, endpoints: List[Dict[str, Any]]
    ) -> str:
        """–û–±—Ä–æ–±–ª—è—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –∑–∞–ø–∏—Ç–∏ –ø—Ä–æ endpoints —Ç–∞ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é."""
        try:
            if not endpoints:
                return "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö endpoints –¥–ª—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É."

            query_lower = user_query.lower()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –ø—Ä–æ –í–°–Ü endpoints
            if any(
                word in query_lower
                for word in [
                    "–≤—Å—ñ",
                    "–≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ",
                    "all",
                    "—Å–ø–∏—Å–æ–∫",
                    "–ø–æ–∫–∞–∂–∏ endpoints",
                    "–¥–æ—Å—Ç—É–ø–Ω—ñ endpoints",
                ]
            ):
                return self._format_all_endpoints()  # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ endpoints –≥—Ä—É–ø–∞–º–∏

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π endpoint –∑ –¥–µ—Ç–∞–ª—è–º–∏
            elif any(
                word in query_lower
                for word in ["–¥–µ—Ç–∞–ª—å–Ω–∞", "–¥–µ—Ç–∞–ª—å–Ω–æ", "–ø–∞—Ä–∞–º–µ—Ç—Ä–∏", "—è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏"]
            ):
                return self._format_detailed_endpoints(endpoints[:3])  # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–æ –ø–µ—Ä—à—ñ 3
            else:
                return self._format_basic_endpoints(endpoints)  # –ü–æ–∫–∞–∑—É—î–º–æ –±–∞–∑–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É: {e}")
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É: {str(e)}"

    def _format_basic_endpoints(self, endpoints: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –±–∞–∑–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ endpoints."""
        response_parts = ["üìö **–î–æ—Å—Ç—É–ø–Ω—ñ API Endpoints:**\n"]

        for i, endpoint in enumerate(endpoints[:10], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
            metadata = endpoint.get("metadata", {})
            method = metadata.get("method", "GET")
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ full_url —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ path
            path = metadata.get("full_url", metadata.get("path", ""))
            summary = metadata.get("summary", "")

            response_parts.append(f"**{i}. {method} {path}**")
            if summary:
                response_parts.append(f"   üìù {summary}")
            response_parts.append("")

        if len(endpoints) > 10:
            response_parts.append(f"... —ñ —â–µ {len(endpoints) - 10} endpoints")

        response_parts.extend(
            [
                "\nüí° **–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏:**",
                '‚Ä¢ –©–æ–± –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç, –Ω–∞–ø–∏—à—ñ—Ç—å: "–û—Ç—Ä–∏–º–∞–π –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏" –∞–±–æ "–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"',
                '‚Ä¢ –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π endpoint, —Å–ø–∏—Ç–∞–π—Ç–µ: "–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ GET /products"',
                '‚Ä¢ –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –Ω–∞–ø–∏—à—ñ—Ç—å: "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è {–Ω–∞–∑–≤–∞ endpoint}"',
            ]
        )

        return "\n".join(response_parts)

    def _format_detailed_endpoints(self, endpoints: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ endpoints –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏."""
        response_parts = ["üìñ **–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API Endpoints:**\n"]

        for i, endpoint in enumerate(endpoints, 1):
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ endpoint
            endpoint_details = self._get_endpoint_details(endpoint)

            metadata = endpoint.get("metadata", {})
            method = metadata.get("method", "GET")
            path = metadata.get("full_url", metadata.get("path", ""))
            summary = metadata.get("summary", "")

            response_parts.append(f"## {i}. {method} {path}")
            if summary:
                response_parts.append(f"**–û–ø–∏—Å:** {summary}")

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            parameters_info = self._format_endpoint_parameters(endpoint_details, method, path)
            if parameters_info:
                response_parts.append(parameters_info)

            # –î–æ–¥–∞—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            examples = self._generate_usage_examples(endpoint_details, method, path)
            if examples:
                response_parts.append(examples)

            response_parts.append("---\n")

        return "\n".join(response_parts)

    def _format_endpoint_parameters(
        self, endpoint_details: Dict[str, Any], method: str, path: str
    ) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ endpoint'–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é."""
        try:
            parameters = endpoint_details.get("parameters", [])
            if not parameters:
                return ""

            params_parts = ["\n**üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:**"]

            # –ì—Ä—É–ø—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ —Ç–∏–ø–æ–º
            query_params = []
            path_params = []
            header_params = []

            for param in parameters:
                param_type = param.get("in", "query")
                if param_type == "query":
                    query_params.append(param)
                elif param_type == "path":
                    path_params.append(param)
                elif param_type == "header":
                    header_params.append(param)

            # Path –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            if path_params:
                params_parts.append("**üîó Path –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:**")
                for param in path_params:
                    name = param.get("name", "")
                    description = param.get("description", "")
                    required = "‚úÖ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π" if param.get("required") else "‚ö™ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π"
                    params_parts.append(f"  ‚Ä¢ `{name}` - {description} ({required})")
                params_parts.append("")

            # Query –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (—Ñ—ñ–ª—å—Ç—Ä–∏, –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è —Ç–æ—â–æ)
            if query_params:
                params_parts.append("**üîç Query –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (—Ñ—ñ–ª—å—Ç—Ä–∏):**")
                for param in query_params:
                    name = param.get("name", "")
                    description = param.get("description", "")
                    required = "‚úÖ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π" if param.get("required") else "‚ö™ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π"

                    # –î–æ–¥–∞—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ schema
                    schema = param.get("schema", {})
                    example = schema.get("example", "")
                    param_type = schema.get("type", "")

                    param_line = f"  ‚Ä¢ `{name}` ({param_type}) - {description} ({required})"
                    if example:
                        param_line += f"\n    üí° –ü—Ä–∏–∫–ª–∞–¥: `{name}={example}`"

                    # –î–æ–¥–∞—î–º–æ enum –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫—â–æ —î
                    enum_values = schema.get("enum", [])
                    if enum_values:
                        param_line += (
                            f"\n    üéØ –î–æ–ø—É—Å—Ç–∏–º—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: {', '.join(map(str, enum_values))}"
                        )

                    params_parts.append(param_line)
                params_parts.append("")

            return "\n".join(params_parts)

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: {e}")
            return ""

    def _generate_usage_examples(
        self, endpoint_details: Dict[str, Any], method: str, path: str
    ) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è endpoint'–∞."""
        try:
            parameters = endpoint_details.get("parameters", [])
            examples_parts = ["\n**üí° –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**"]

            # –ë–∞–∑–æ–≤–∏–π –ø—Ä–∏–∫–ª–∞–¥
            base_url = path.split("?")[0]  # –í–∏–¥–∞–ª—è—î–º–æ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–∫—â–æ —î
            examples_parts.append(f"**–ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç:**")
            examples_parts.append(f"```")
            examples_parts.append(f"{method} {base_url}")
            examples_parts.append(f"```")

            # –ü—Ä–∏–∫–ª–∞–¥–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            query_params = [p for p in parameters if p.get("in") == "query"]
            if query_params:
                examples_parts.append("\n**–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:**")

                # –ü—Ä–∏–∫–ª–∞–¥ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
                pagination_example = self._generate_pagination_example(base_url, query_params)
                if pagination_example:
                    examples_parts.append(pagination_example)

                # –ü—Ä–∏–∫–ª–∞–¥ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
                filter_example = self._generate_filter_example(base_url, query_params)
                if filter_example:
                    examples_parts.append(filter_example)

                # –ü—Ä–∏–∫–ª–∞–¥ –∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º
                sort_example = self._generate_sort_example(base_url, query_params)
                if sort_example:
                    examples_parts.append(sort_example)

            # –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
            filter_help = self._generate_filter_help(query_params)
            if filter_help:
                examples_parts.append(filter_help)

            return "\n".join(examples_parts)

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∏–∫–ª–∞–¥—ñ–≤: {e}")
            return ""

    def _generate_pagination_example(self, base_url: str, query_params: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–∏–∫–ª–∞–¥ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é."""
        page_param = next((p for p in query_params if p.get("name") == "page"), None)
        limit_param = next((p for p in query_params if p.get("name") == "limit"), None)

        if page_param and limit_param:
            return f"```\n{base_url}?page=1&limit=10  # –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞, 10 –∑–∞–ø–∏—Å—ñ–≤\n```"
        return ""

    def _generate_filter_example(self, base_url: str, query_params: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–∏–∫–ª–∞–¥ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏."""
        filters_param = next((p for p in query_params if p.get("name") == "filters"), None)
        if filters_param:
            schema = filters_param.get("schema", {})
            example = schema.get("example", "")
            if example:
                return f"```\n{base_url}?filters={example}\n```"
        return ""

    def _generate_sort_example(self, base_url: str, query_params: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–∏–∫–ª–∞–¥ –∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º."""
        sort_by = next((p for p in query_params if p.get("name") == "sortBy"), None)
        sort_order = next((p for p in query_params if p.get("name") == "sortOrder"), None)

        if sort_by and sort_order:
            sort_by_example = sort_by.get("schema", {}).get("example", "name")
            sort_order_example = sort_order.get("schema", {}).get("example", "asc")
            return f"```\n{base_url}?sortBy={sort_by_example}&sortOrder={sort_order_example}\n```"
        return ""

    def _generate_filter_help(self, query_params: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –¥–æ–≤—ñ–¥–∫—É –ø–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ö."""
        filters_param = next((p for p in query_params if p.get("name") == "filters"), None)
        if not filters_param:
            return ""

        help_parts = ["\n**üîß –î–æ–≤—ñ–¥–∫–∞ –ø–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ö:**"]
        help_parts.append("–§—ñ–ª—å—Ç—Ä–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —è–∫ JSON string –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:")
        help_parts.append('‚Ä¢ `{"name":{"like":"iPhone"}}` - –ø–æ—à—É–∫ –ø–æ —á–∞—Å—Ç–∏–Ω—ñ –Ω–∞–∑–≤–∏')
        help_parts.append('‚Ä¢ `{"price":{"gte":100,"lte":1000}}` - —Ü—ñ–Ω–∞ –≤—ñ–¥ 100 –¥–æ 1000')
        help_parts.append('‚Ä¢ `{"status":{"eq":"active"}}` - —Ç–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å')
        help_parts.append('‚Ä¢ `{"createdAt":{"gte":"2024-01-01"}}` - –¥–∞—Ç–∞ –ø—ñ—Å–ª—è 1 —Å—ñ—á–Ω—è 2024')

        return "\n".join(help_parts)

    def _format_all_endpoints(self) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ endpoints, –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –∑–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏."""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ endpoints –∑ –ø–∞—Ä—Å–µ—Ä–∞
            all_endpoints = self.parser.get_endpoints()

            if not all_endpoints:
                return "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ endpoints –≤ API."

            # –ì—Ä—É–ø—É—î–º–æ endpoints –∑–∞ —Ç–µ–≥–∞–º–∏/—Ä–µ—Å—É—Ä—Å–∞–º–∏
            grouped_endpoints = self._group_endpoints_by_resource(all_endpoints)

            response_parts = ["üìö **–í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ API Endpoints:**\n"]

            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_count = len(all_endpoints)
            response_parts.append(f"**üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {total_count} endpoints\n")

            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ –≥—Ä—É–ø–∞—Ö
            for resource, endpoints in grouped_endpoints.items():
                if not endpoints:
                    continue

                response_parts.append(f"### üî∏ {resource} ({len(endpoints)} endpoints)")

                # –ü–æ–∫–∞–∑—É—î–º–æ endpoints –≤ –≥—Ä—É–ø—ñ
                for endpoint in endpoints:
                    method = endpoint.get("method", "GET")
                    path = endpoint.get("path", "")
                    summary = endpoint.get("summary", "")
                    base_url = self.parser.get_base_url() or ""
                    full_url = f"{base_url}{path}" if base_url else path

                    endpoint_line = f"  ‚Ä¢ **{method}** `{full_url}`"
                    if summary:
                        endpoint_line += f" - {summary}"

                    response_parts.append(endpoint_line)

                response_parts.append("")  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏

            # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏
            response_parts.extend(
                [
                    "---",
                    "üí° **–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏:**",
                    '‚Ä¢ –î–ª—è –¥–µ—Ç–∞–ª–µ–π: "–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ GET /products"',
                    '‚Ä¢ –î–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: "–û—Ç—Ä–∏–º–∞–π –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏" –∞–±–æ "–°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"',
                    '‚Ä¢ –î–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: "–ü–æ–∫–∞–∂–∏ endpoints –¥–ª—è —Ç–æ–≤–∞—Ä—ñ–≤"',
                    "",
                    "üîç **–û—Å–Ω–æ–≤–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏:**",
                    "‚Ä¢ **Products** - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏",
                    "‚Ä¢ **Categories** - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏",
                    "‚Ä¢ **Orders** - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏",
                    "‚Ä¢ **Brands** - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—Ä–µ–Ω–¥–∞–º–∏",
                    "‚Ä¢ **Collections** - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—è–º–∏",
                ]
            )

            return "\n".join(response_parts)

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö endpoints: {e}")
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—Å—ñ—Ö endpoints: {str(e)}"

    def _group_endpoints_by_resource(
        self, endpoints: List[Dict[str, Any]]
    ) -> Dict[str, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø—É—î endpoints –∑–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏/—Ç–µ–≥–∞–º–∏."""
        grouped = {}

        for endpoint in endpoints:
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ—Å—É—Ä—Å –∑–∞ —Ç–µ–≥–∞–º–∏ –∞–±–æ —à–ª—è—Ö–æ–º
            tags = endpoint.get("tags", [])
            if tags:
                resource = tags[0]  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —Ç–µ–≥
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–≥—ñ–≤, –≤–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞ —à–ª—è—Ö–æ–º
                path = endpoint.get("path", "")
                resource = self._extract_resource_from_path(path)

            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–∑–≤—É —Ä–µ—Å—É—Ä—Å—É
            resource = resource.capitalize() if resource else "Other"

            if resource not in grouped:
                grouped[resource] = []

            grouped[resource].append(endpoint)

        # –°–æ—Ä—Ç—É—î–º–æ –≥—Ä—É–ø–∏ –∑–∞ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—é
        priority_order = [
            "Product",
            "Category",
            "Order",
            "Brand",
            "Collection",
            "Setting",
            "Family",
            "Attribute",
        ]
        sorted_grouped = {}

        # –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ –≥—Ä—É–ø–∏
        for resource in priority_order:
            if resource in grouped:
                sorted_grouped[resource] = grouped[resource]

        # –ü–æ—Ç—ñ–º –¥–æ–¥–∞—î–º–æ —Ä–µ—à—Ç—É
        for resource, endpoints in grouped.items():
            if resource not in sorted_grouped:
                sorted_grouped[resource] = endpoints

        return sorted_grouped

    def _extract_resource_from_path(self, path: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î —Ä–µ—Å—É—Ä—Å –∑ —à–ª—è—Ö—É endpoint'–∞."""
        if not path:
            return "Other"

        # –í–∏–¥–∞–ª—è—î–º–æ leading slash —Ç–∞ –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —Å–µ–≥–º–µ–Ω—Ç
        segments = path.strip("/").split("/")
        if segments:
            return segments[0]

        return "Other"
