"""
CLI –¥–µ–º–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó AI Error Handler —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
"""

import os
import sys
from typing import Any, Dict

from ai_error_handler import get_ai_error_handler
from clickone_shop_agent import ClickoneShopAgent, get_clickone_shop_agent


def print_banner():
    """–í–∏–≤–æ–¥–∏—Ç—å –±–∞–Ω–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("ü§ñ" + "=" * 60 + "ü§ñ")
    print("           AI SWAGGER BOT - ERROR HANDLER DEMO")
    print("ü§ñ" + "=" * 60 + "ü§ñ")
    print()


def print_menu():
    """–í–∏–≤–æ–¥–∏—Ç—å –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("\nüìã **–ú–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–∏:**")
    print("1. üîç –¢–µ—Å—Ç AI –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–∫–∏")
    print("2. üìù –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –ø–æ–º–∏–ª–∫–æ—é")
    print("3. üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞")
    print("4. üìã –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤—ñ–¥ AI")
    print("5. üóÇÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É –ø–æ–º–∏–ª–æ–∫")
    print("6. üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à –ø–æ–º–∏–ª–æ–∫")
    print("0. üö™ –í–∏—Ö—ñ–¥")
    print()


def test_ai_error_analysis(agent: ClickoneShopAgent):
    """–¢–µ—Å—Ç AI –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–∫–∏"""
    print("\nüîç **–¢–µ—Å—Ç AI –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–∫–∏**")

    # –ü—Ä–∏–∫–ª–∞–¥–∏ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    error_examples = [
        {
            "message": "Category name must contain only letters (no numbers or special characters)",
            "data": {"name": "Test Category 123", "slug": "test-123"},
        },
        {
            "message": "Slug must be unique",
            "data": {"name": "Test Category", "slug": "existing-slug"},
        },
        {
            "message": "Description is too long (max 500 characters)",
            "data": {"name": "Test", "slug": "test", "description": "A" * 600},
        },
    ]

    for i, example in enumerate(error_examples, 1):
        print(f"\nüìù **–ü—Ä–∏–∫–ª–∞–¥ {i}:**")
        print(f"–ü–æ–º–∏–ª–∫–∞: {example['message']}")
        print(f"–î–∞–Ω—ñ: {example['data']}")

        # –û—Ç—Ä–∏–º—É—î–º–æ AI –∞–Ω–∞–ª—ñ–∑
        analysis = agent.get_ai_error_analysis(example["message"], example["data"])
        print(f"\nü§ñ **AI –∞–Ω–∞–ª—ñ–∑:**")
        print(analysis)

        if i < len(error_examples):
            input("\n‚è∏Ô∏è  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É...")


def test_category_creation_with_error(agent: ClickoneShopAgent):
    """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –ø–æ–º–∏–ª–∫–æ—é"""
    print("\nüìù **–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –ø–æ–º–∏–ª–∫–æ—é**")

    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑ –ø–æ–º–∏–ª–∫–æ—é
    invalid_data = {
        "name": "Test Category 123",  # –ú—ñ—Å—Ç–∏—Ç—å —á–∏—Å–ª–∞
        "slug": "test-category-123",
        "description": "Test category with numbers and special characters #@!",
    }

    print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω—ñ: {invalid_data}")

    try:
        # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        response = agent.create_category(invalid_data)

        if not response.success:
            print(f"\n‚ùå **–ü–æ–º–∏–ª–∫–∞ API:**")
            print(response.error)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            if "ai_fix" in (response.data or {}):
                ai_fix = response.data["ai_fix"]
                print(f"\nü§ñ **AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ:**")
                print(f"–í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ: {ai_fix.get('fixed_data', {})}")
                print(f"–ü–æ—è—Å–Ω–µ–Ω–Ω—è: {ai_fix.get('explanation', '–ù–µ–º–∞—î')}")
                print(f"–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {ai_fix.get('confidence', 0):.1%}")

                suggestions = ai_fix.get("suggestions", [])
                if suggestions:
                    print("–ü–æ—Ä–∞–¥–∏:")
                    for j, suggestion in enumerate(suggestions, 1):
                        print(f"  {j}. {suggestion}")
            else:
                print("‚ö†Ô∏è AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–æ)")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


def test_automatic_fix_and_retry(agent: ClickoneShopAgent):
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏"""
    print("\nüîÑ **–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏**")

    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑ –ø–æ–º–∏–ª–∫–æ—é
    invalid_data = {
        "name": "Test Category 456",  # –ú—ñ—Å—Ç–∏—Ç—å —á–∏—Å–ª–∞
        "slug": "test-category-456",
        "description": "Test category with numbers",
    }

    print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω—ñ: {invalid_data}")

    try:
        # –ü–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞
        response = agent.create_category(invalid_data)

        if not response.success:
            print(f"\n‚ùå **–ü–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞ –Ω–µ–≤–¥–∞–ª–∞:**")
            print(response.error)

            # –°–ø—Ä–æ–±—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏
            print(f"\nüîÑ **–°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è...**")
            retry_response = agent.retry_with_ai_fix(response)

            if retry_response.success:
                print("‚úÖ **AI —É—Å–ø—ñ—à–Ω–æ –≤–∏–ø—Ä–∞–≤–∏–≤ –ø–æ–º–∏–ª–∫—É!**")
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {retry_response.data}")
            else:
                print("‚ö†Ô∏è **AI –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ**")
                print(f"–ü–æ–º–∏–ª–∫–∞: {retry_response.error}")
        else:
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ (–Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–æ)")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


def get_validation_rules_from_ai(agent: ClickoneShopAgent):
    """–û—Ç—Ä–∏–º—É—î –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤—ñ–¥ AI"""
    print("\nüìã **–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤—ñ–¥ AI**")

    entity_types = ["category", "product", "order", "user"]

    for entity_type in entity_types:
        print(f"\nüîç **–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è {entity_type}:**")
        try:
            rules = agent.get_validation_rules(entity_type)
            print(rules)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª: {e}")

        if entity_type != entity_types[-1]:
            input("\n‚è∏Ô∏è  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∏–ø—É...")


def show_cache_stats(agent: ClickoneShopAgent):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É –ø–æ–º–∏–ª–æ–∫"""
    print("\nüóÇÔ∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É –ø–æ–º–∏–ª–æ–∫**")

    try:
        stats = agent.ai_error_handler.get_cache_stats()
        print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫: {stats['total_errors']}")
        print(f"üíæ –†–æ–∑–º—ñ—Ä –∫–µ—à—É: {stats['cache_size']} —Å–∏–º–≤–æ–ª—ñ–≤")
        print(f"ü§ñ –ú–æ–¥–µ–ª—å AI: {stats['model']}")

        if stats["total_errors"] > 0:
            print(f"\nüìã **–ö–µ—à–æ–≤–∞–Ω—ñ –ø–æ–º–∏–ª–∫–∏:**")
            for i, (key, value) in enumerate(agent.ai_error_handler.error_cache.items(), 1):
                print(f"  {i}. {key[:50]}...")
                print(f"     –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {value.confidence:.1%}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def clear_error_cache(agent: ClickoneShopAgent):
    """–û—á–∏—â–∞—î –∫–µ—à –ø–æ–º–∏–ª–æ–∫"""
    print("\nüßπ **–û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø–æ–º–∏–ª–æ–∫**")

    try:
        agent.ai_error_handler.clear_cache()
        print("‚úÖ –ö–µ—à –ø–æ–º–∏–ª–æ–∫ –æ—á–∏—â–µ–Ω–æ")

        # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = agent.ai_error_handler.get_cache_stats()
        print(f"üìä –ù–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_errors']} –ø–æ–º–∏–ª–æ–∫")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É: {e}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print_banner()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: OPENAI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        print("–î–æ–¥–∞–π—Ç–µ OPENAI_API_KEY=your_key –≤ .env —Ñ–∞–π–ª")
        return

    if not os.getenv("CLICKONE_JWT_TOKEN"):
        print("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: CLICKONE_JWT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print("–î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ JWT —Ç–æ–∫–µ–Ω–∞")
        print("–î–æ–¥–∞–π—Ç–µ CLICKONE_JWT_TOKEN=your_token –≤ .env —Ñ–∞–π–ª")

    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–≥–µ–Ω—Ç
        print("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI Error Handler...")
        agent = get_clickone_shop_agent()

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ JWT —Ç–æ–∫–µ–Ω, —è–∫—â–æ —î
        jwt_token = os.getenv("CLICKONE_JWT_TOKEN")
        if jwt_token:
            agent.set_jwt_token(jwt_token)
            print("‚úÖ JWT —Ç–æ–∫–µ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        print("‚úÖ AI Error Handler –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")

        # –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏
        while True:
            print_menu()

            try:
                choice = input("üéØ –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (0-6): ").strip()

                if choice == "0":
                    print("\nüëã –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è AI Error Handler Demo!")
                    break
                elif choice == "1":
                    test_ai_error_analysis(agent)
                elif choice == "2":
                    test_category_creation_with_error(agent)
                elif choice == "3":
                    test_automatic_fix_and_retry(agent)
                elif choice == "4":
                    get_validation_rules_from_ai(agent)
                elif choice == "5":
                    show_cache_stats(agent)
                elif choice == "6":
                    clear_error_cache(agent)
                else:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

                input("\n‚è∏Ô∏è  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
                break
            except Exception as e:
                print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                input("‚è∏Ô∏è  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è .env —Ñ–∞–π–ª—É —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ OpenAI")


if __name__ == "__main__":
    main()
