"""
AI Error Handler –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ API —á–µ—Ä–µ–∑ GPT –º–æ–¥–µ–ª—å.
"""

import json
import logging
from typing import Any, Dict, Optional

from src.config import Config

logger = logging.getLogger(__name__)


class AIErrorHandler:
    """AI Error Handler –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ API."""

    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI Error Handler."""
        self.config = Config()
        logger.info("AI Error Handler —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    def analyze_error(self, error_context: Dict[str, Any]) -> str:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î –ø–æ–º–∏–ª–∫—É API —á–µ—Ä–µ–∑ AI –º–æ–¥–µ–ª—å.
        
        Args:
            error_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏ –∑ –¥–µ—Ç–∞–ª—è–º–∏
            
        Returns:
            –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        """
        try:
            logger.info(f"AI –∞–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è API: {error_context.get('api_name', 'N/A')}")
            
            # –§–æ—Ä–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
            analysis_prompt = self._create_analysis_prompt(error_context)
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —á–µ—Ä–µ–∑ GPT
            error_analysis = self._analyze_with_gpt(analysis_prompt)
            
            return error_analysis
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–∫–∏: {e}")
            return self._fallback_error_analysis(error_context)
    
    def _create_analysis_prompt(self, error_context: Dict[str, Any]) -> str:
        """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–∫–∏."""
        api_name = error_context.get('api_name', 'N/A')
        method = error_context.get('method', 'N/A')
        path = error_context.get('path', 'N/A')
        status_code = error_context.get('status_code', 'N/A')
        response_text = error_context.get('response_text', 'N/A')
        headers = error_context.get('headers', {})
        
        prompt = f"""
        –¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ API —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ø–æ–º–∏–ª–∫—É —Ç–∞ –Ω–∞–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏:
        - API: {api_name}
        - –ú–µ—Ç–æ–¥: {method}
        - –®–ª—è—Ö: {path}
        - –ö–æ–¥ —Å—Ç–∞—Ç—É—Å—É: {status_code}
        - –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {response_text}
        - –ó–∞–≥–æ–ª–æ–≤–∫–∏: {json.dumps(headers, indent=2)}
        
        –ó–∞–≤–¥–∞–Ω–Ω—è:
        1. –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏
        2. –ü–æ—è—Å–Ω–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏
        3. –ù–∞–¥–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫—Ä–æ–∫–∏ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è
        4. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è
        5. –ù–∞–¥–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        
        –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—é —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—é, —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
        """
        
        return prompt
    
    def _analyze_with_gpt(self, prompt: str) -> str:
        """–ê–Ω–∞–ª—ñ–∑—É—î –ø–æ–º–∏–ª–∫—É —á–µ—Ä–µ–∑ GPT –º–æ–¥–µ–ª—å."""
        try:
            from openai import OpenAI
            
            client = OpenAI(api_key=self.config.OPENAI_API_KEY)
            
            system_prompt = """
            –¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ API —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–¥–∞–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –∞–Ω–∞–ª—ñ–∑–∏ –ø–æ–º–∏–ª–æ–∫
            –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ —Ç–∞ —Ä—ñ—à–µ–Ω–Ω—è–º–∏.
            
            –ö–ª—é—á–æ–≤—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏:
            1. –ê–Ω–∞–ª—ñ–∑—É–π –ø–æ–º–∏–ª–∫—É —Å–∏—Å—Ç–µ–º–Ω–æ —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–æ
            2. –ù–∞–¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –∫—Ä–æ–∫–∏ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è
            3. –ü–æ—è—Å–Ω—é–π –ø—Ä–∏—á–∏–Ω–∏ —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
            4. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è
            5. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
            6. –°—Ç—Ä—É–∫—Ç—É—Ä—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –ª–µ–≥–∫–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è
            """
            
            response = client.chat.completions.create(
                model=self.config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,  # –ù–∏–∑—å–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                max_tokens=1000
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ GPT –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É —á–µ—Ä–µ–∑ AI: {str(e)}"
    
    def _fallback_error_analysis(self, error_context: Dict[str, Any]) -> str:
        """Fallback –∞–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ –±–µ–∑ AI."""
        try:
            status_code = error_context.get('status_code', 0)
            method = error_context.get('method', 'N/A')
            path = error_context.get('path', 'N/A')
            
            # –ë–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ñ–≤
            if status_code == 400:
                return f"""
                üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ 400 (Bad Request):
                
                üìç –î–µ—Ç–∞–ª—ñ:
                - –ú–µ—Ç–æ–¥: {method}
                - –®–ª—è—Ö: {path}
                - –¢–∏–ø: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É
                
                üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
                - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö
                - –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
                - –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
                
                üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
                1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É
                2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç–Ω—ñ
                3. –í–∞–ª—ñ–¥—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
                4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é API
                
                üìö –ü—Ä–∏–∫–ª–∞–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É:
                ```json
                {{
                    "name": "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
                    "slug": "nazva-kategorii"
                }}
                ```
                """
            
            elif status_code == 401:
                return f"""
                üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ 401 (Unauthorized):
                
                üìç –î–µ—Ç–∞–ª—ñ:
                - –ú–µ—Ç–æ–¥: {method}
                - –®–ª—è—Ö: {path}
                - –¢–∏–ø: –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                
                üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
                - –í—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π JWT —Ç–æ–∫–µ–Ω
                - –ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π —Ç–æ–∫–µ–Ω
                - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
                
                üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
                1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞
                2. –û–Ω–æ–≤—ñ—Ç—å —Ç–æ–∫–µ–Ω, —è–∫—â–æ –≤—ñ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤
                3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
                4. –í–∏–∫–æ–Ω–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
                
                üîë –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞:
                ```
                Authorization: Bearer <your-jwt-token>
                ```
                """
            
            elif status_code == 403:
                return f"""
                üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ 403 (Forbidden):
                
                üìç –î–µ—Ç–∞–ª—ñ:
                - –ú–µ—Ç–æ–¥: {method}
                - –®–ª—è—Ö: {path}
                - –¢–∏–ø: –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ
                
                üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
                - –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
                - –û–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                - –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è IP –∞–¥—Ä–µ—Å–∏
                
                üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
                1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                2. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –ø—Ä–∞–≤
                3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ —Ä–æ–ª—ñ
                4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏
                """
            
            elif status_code == 404:
                return f"""
                üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ 404 (Not Found):
                
                üìç –î–µ—Ç–∞–ª—ñ:
                - –ú–µ—Ç–æ–¥: {method}
                - –®–ª—è—Ö: {path}
                - –¢–∏–ø: –†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                
                üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
                - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É
                - –†–µ—Å—É—Ä—Å –Ω–µ —ñ—Å–Ω—É—î
                - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID —Ä–µ—Å—É—Ä—Å—É
                
                üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
                1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —à–ª—è—Ö—É
                2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ä–µ—Å—É—Ä—Å —ñ—Å–Ω—É—î
                3. –í–∞–ª—ñ–¥—É–π—Ç–µ ID —Ä–µ—Å—É—Ä—Å—É
                4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é API
                
                üìö –î–æ—Å—Ç—É–ø–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏:
                - GET /api/categories - –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                - GET /api/categories/{id} - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ ID
                """
            
            elif status_code == 422:
                return f"""
                üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ 422 (Unprocessable Entity):
                
                üìç –î–µ—Ç–∞–ª—ñ:
                - –ú–µ—Ç–æ–¥: {method}
                - –®–ª—è—Ö: {path}
                - –¢–∏–ø: –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
                
                üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
                - –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∑–∞–ø–∏—Ç—É
                - –ü–æ—Ä—É—à–µ–Ω–Ω—è –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
                - –ö–æ–Ω—Ñ–ª—ñ–∫—Ç –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –¥–∞–Ω–∏–º–∏
                
                üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
                1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
                2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞–º
                3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å
                4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö
                
                üìã –ü—Ä–∏–∫–ª–∞–¥ –≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö:
                ```json
                {{
                    "name": "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
                    "slug": "nazva-kategorii",
                    "status": "active"
                }}
                ```
                """
            
            elif status_code == 500:
                return f"""
                üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ 500 (Internal Server Error):
                
                üìç –î–µ—Ç–∞–ª—ñ:
                - –ú–µ—Ç–æ–¥: {method}
                - –®–ª—è—Ö: {path}
                - –¢–∏–ø: –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
                
                üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
                - –ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ —Å–µ—Ä–≤–µ—Ä–∞
                - –ü—Ä–æ–±–ª–µ–º–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
                - –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –∫–æ–¥—ñ
                
                üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
                1. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å
                2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
                3. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
                4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
                
                ‚è∞ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞:
                - –ó–∞—á–µ–∫–∞–π—Ç–µ 1-2 —Ö–≤–∏–ª–∏–Ω–∏
                - –í–∏–∫–æ–Ω–∞–π—Ç–µ –∑–∞–ø–∏—Ç —â–µ —Ä–∞–∑
                - –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è - –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
                """
            
            else:
                return f"""
                üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏ {status_code}:
                
                üìç –î–µ—Ç–∞–ª—ñ:
                - –ú–µ—Ç–æ–¥: {method}
                - –®–ª—è—Ö: {path}
                - –¢–∏–ø: –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞
                
                üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
                1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é API
                2. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
                3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
                4. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç
                
                üìö –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:
                - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è API
                - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
                - –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
                """
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ fallback –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É: {str(e)}"
    
    def get_error_suggestions(self, error_type: str) -> str:
        """
        –û—Ç—Ä–∏–º—É—î –∑–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Ç–∏–ø—É –ø–æ–º–∏–ª–∫–∏.
        
        Args:
            error_type: –¢–∏–ø –ø–æ–º–∏–ª–∫–∏
            
        Returns:
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è
        """
        suggestions = {
            "authentication": """
                üîê –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é:
                
                ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:
                1. –ù–∞—è–≤–Ω—ñ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞
                2. –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
                3. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                4. –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω–∞
                
                üîÑ –†—ñ—à–µ–Ω–Ω—è:
                1. –û–Ω–æ–≤—ñ—Ç—å JWT —Ç–æ–∫–µ–Ω
                2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
                3. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                4. –í–∏–∫–æ–Ω–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
                """,
            
            "validation": """
                ‚úÖ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é:
                
                üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:
                1. –§–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—É
                2. –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
                3. –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö
                4. –ë—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞
                
                üõ†Ô∏è –†—ñ—à–µ–Ω–Ω—è:
                1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON
                2. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
                3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö
                4. –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
                """,
            
            "network": """
                üåê –ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ—Ä–µ–∂–µ—é:
                
                üì° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:
                1. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
                2. –î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
                3. –¢–∞–π–º–∞—É—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤
                4. Firewall –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                
                üîÑ –†—ñ—à–µ–Ω–Ω—è:
                1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
                2. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç
                3. –ó–º–µ–Ω—à—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö
                4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –º–µ—Ä–µ–∂–µ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                """,
            
            "server": """
                üñ•Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º:
                
                ‚ö†Ô∏è –°–∏–º–ø—Ç–æ–º–∏:
                1. –ü–æ–º–∏–ª–∫–∏ 5xx
                2. –ü–æ–≤—ñ–ª—å–Ω–∞ —Ä–æ–±–æ—Ç–∞
                3. –¢–∞–π–º–∞—É—Ç–∏
                4. –ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
                
                üõ†Ô∏è –†—ñ—à–µ–Ω–Ω—è:
                1. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø–∏—Ç
                2. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
                3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
                4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ retry –ª–æ–≥—ñ–∫—É
                """
        }
        
        return suggestions.get(error_type, "–¢–∏–ø –ø–æ–º–∏–ª–∫–∏ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ")
    
    def format_error_response(self, error_context: Dict[str, Any], 
                            include_suggestions: bool = True) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–æ–º–∏–ª–∫–æ—é.
        
        Args:
            error_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
            include_suggestions: –ß–∏ –≤–∫–ª—é—á–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            
        Returns:
            –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–æ–º–∏–ª–∫–æ—é
        """
        try:
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
            error_analysis = self.analyze_error(error_context)
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response_parts = [
                "‚ùå –ü–æ–º–∏–ª–∫–∞ API",
                "=" * 50,
                error_analysis
            ]
            
            if include_suggestions:
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
                status_code = error_context.get('status_code', 0)
                if status_code in [401, 403]:
                    error_type = "authentication"
                elif status_code in [400, 422]:
                    error_type = "validation"
                elif status_code >= 500:
                    error_type = "server"
                else:
                    error_type = "general"
                
                suggestions = self.get_error_suggestions(error_type)
                response_parts.extend([
                    "",
                    "üí° –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:",
                    suggestions
                ])
            
            return "\n".join(response_parts)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}")
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"
    
    def create_fix_plan(self, error_context: Dict[str, Any], original_request: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –°—Ç–≤–æ—Ä—é—î –ø–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ —á–µ—Ä–µ–∑ GPT.
        
        Args:
            error_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
            original_request: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞–≤ –ø–æ–º–∏–ª–∫—É
            
        Returns:
            –ü–ª–∞–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∞–±–æ None —è–∫—â–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ
        """
        try:
            logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è API: {error_context.get('api_name', 'N/A')}")
            
            # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            fix_prompt = self._create_fix_plan_prompt(error_context, original_request)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–ª–∞–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ GPT
            fix_plan = self._get_fix_plan_from_gpt(fix_prompt)
            
            return fix_plan
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {e}")
            return None
    
    def _create_fix_plan_prompt(self, error_context: Dict[str, Any], original_request: Dict[str, Any]) -> str:
        """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è."""
        prompt = f"""
        –¢–∏ - AI –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –º–æ–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫–∏ API. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ø–æ–º–∏–ª–∫—É —Ç–∞ —Å—Ç–≤–æ—Ä–∏ –ø–ª–∞–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏:
        - API: {error_context.get('api_name', 'N/A')}
        - –ú–µ—Ç–æ–¥: {error_context.get('method', 'N/A')}
        - –®–ª—è—Ö: {error_context.get('path', 'N/A')}
        - –ö–æ–¥ —Å—Ç–∞—Ç—É—Å—É: {error_context.get('status_code', 'N/A')}
        - –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {error_context.get('response_text', 'N/A')}
        
        –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç:
        - –î–∞–Ω—ñ: {json.dumps(original_request.get('data', {}), ensure_ascii=False)}
        - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {json.dumps(original_request.get('params', {}), ensure_ascii=False)}
        
        –ó–∞–≤–¥–∞–Ω–Ω—è:
        1. –í–∏–∑–Ω–∞—á–∏—Ç–∏, —á–∏ –º–æ–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É
        2. –Ø–∫—â–æ —Ç–∞–∫ - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        3. –Ø–∫—â–æ –Ω—ñ - –ø–æ—è—Å–Ω–∏—Ç–∏ —á–æ–º—É —Ç–∞ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –≤—Ä—É—á–Ω—É
        
        –°—Ç–≤–æ—Ä–∏ JSON –ø–ª–∞–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:
        {{
            "can_fix": true/false,
            "fix_type": "data_correction|parameter_adjustment|retry|manual_intervention",
            "fix_description": "–æ–ø–∏—Å —â–æ –±—É–¥–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ",
            "corrected_request": {{
                "method": "HTTP –º–µ—Ç–æ–¥",
                "path": "—à–ª—è—Ö",
                "data": {{}} // –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
                "params": {{}} // –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            }},
            "explanation": "–ø–æ—è—Å–Ω–µ–Ω–Ω—è —â–æ –±—É–ª–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–∞ —á–æ–º—É"
        }}
        
        –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ JSON –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
        """
        
        return prompt
    
    def _get_fix_plan_from_gpt(self, prompt: str) -> Optional[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º—É—î –ø–ª–∞–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ GPT."""
        try:
            from openai import OpenAI
            
            client = OpenAI(api_key=self.config.OPENAI_API_KEY)
            
            system_prompt = """
            –¢–∏ - AI –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ API. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–æ—á–Ω—ñ –ø–ª–∞–Ω–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ JSON –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
            """
            
            response = client.chat.completions.create(
                model=self.config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.1,
                max_tokens=1000
            )
            
            # –ü–∞—Ä—Å–∏–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            gpt_response = response.choices[0].message.content.strip()
            
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ JSON —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            import re
            json_match = re.search(r'\{.*\}', gpt_response, re.DOTALL)
            
            if json_match:
                try:
                    fix_plan = json.loads(json_match.group())
                    logger.info(f"GPT —Å—Ç–≤–æ—Ä–∏–≤ –ø–ª–∞–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {fix_plan}")
                    return fix_plan
                except json.JSONDecodeError:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –ø–ª–∞–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {gpt_response}")
            
            return None
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–ª–∞–Ω—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ GPT: {e}")
            return None
