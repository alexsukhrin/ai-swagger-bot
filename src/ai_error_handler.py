"""
AI Error Handler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ API —Ç–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
"""

import json
import os
import time
from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Tuple

import openai

from .config import Config


@dataclass
class APIError:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–º–∏–ª–∫–∏ API"""

    error_message: str
    status_code: int
    endpoint: str
    method: str
    input_data: Optional[Dict[str, Any]] = None
    response_data: Optional[Dict[str, Any]] = None


@dataclass
class AIFixSuggestion:
    """–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ AI"""

    fixed_data: Dict[str, Any]
    explanation: str
    confidence: float
    suggestions: List[str]


class AIErrorHandler:
    """AI –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""

    def __init__(self, openai_api_key: Optional[str] = None, model: str = "gpt-4"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI Error Handler

        Args:
            openai_api_key: API –∫–ª—é—á OpenAI (—è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –±–µ—Ä–µ—Ç—å—Å—è –∑ .env)
            model: –ú–æ–¥–µ–ª—å OpenAI –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        """
        self.api_key = openai_api_key or os.getenv("OPENAI_API_KEY")
        self.model = model or os.getenv("OPENAI_MODEL", "gpt-4")

        if not self.api_key:
            raise ValueError("OpenAI API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª—ñ")

        self.client = openai.OpenAI(api_key=self.api_key)

        # –ö–µ—à –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —Ç–∞ —ó—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
        self.error_cache: Dict[str, AIFixSuggestion] = {}

        print(f"ü§ñ AI Error Handler —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –º–æ–¥–µ–ª–ª—é {self.model}")

    def analyze_api_error(self, error: APIError) -> AIFixSuggestion:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î –ø–æ–º–∏–ª–∫—É API —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è

        Args:
            error: –û–±'—î–∫—Ç –ø–æ–º–∏–ª–∫–∏ API

        Returns:
            –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ AI
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        cache_key = self._generate_cache_key(error)
        if cache_key in self.error_cache:
            print("üìã –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")
            return self.error_cache[cache_key]

        print(f"üîç –ê–Ω–∞–ª—ñ–∑—É—é –ø–æ–º–∏–ª–∫—É API: {error.error_message}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
        prompt = self._create_error_analysis_prompt(error)

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": """–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ API —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö.
                        –ê–Ω–∞–ª—ñ–∑—É–π –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
                        –ü–æ–≤–µ—Ä—Ç–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON –∑ –ø–æ–ª—è–º–∏:
                        - fixed_data: –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
                        - explanation: –ø–æ—è—Å–Ω–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
                        - confidence: –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ (0.0-1.0)
                        - suggestions: —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–∞–¥ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞""",
                    },
                    {"role": "user", "content": prompt},
                ],
                max_tokens=500,
                temperature=0.1,
            )

            ai_response = response.choices[0].message.content
            print(f"ü§ñ AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {ai_response}")

            # –ü–∞—Ä—Å–∏–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            try:
                parsed_response = json.loads(ai_response)
                fix_suggestion = AIFixSuggestion(
                    fixed_data=parsed_response.get("fixed_data", {}),
                    explanation=parsed_response.get("explanation", "–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"),
                    confidence=parsed_response.get("confidence", 0.0),
                    suggestions=parsed_response.get("suggestions", []),
                )
            except json.JSONDecodeError:
                # –Ø–∫—â–æ JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—å—Å—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                fix_suggestion = self._create_fallback_fix(error)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
            self.error_cache[cache_key] = fix_suggestion

            return fix_suggestion

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É: {e}")
            return self._create_fallback_fix(error)

    def get_user_friendly_message(self, error: APIError, fix: AIFixSuggestion) -> str:
        """
        –°—Ç–≤–æ—Ä—é—î –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é

        Args:
            error: –ü–æ–º–∏–ª–∫–∞ API
            fix: –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è

        Returns:
            –ó—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
        """
        message_parts = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message_parts.append("üö® **–ü–æ–º–∏–ª–∫–∞ API**")
        message_parts.append(f"**–ï–Ω–¥–ø–æ—ñ–Ω—Ç:** {error.method} {error.endpoint}")
        message_parts.append(f"**–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏:** {error.status_code}")
        message_parts.append("")

        # –ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        message_parts.append("**–©–æ —Å—Ç–∞–ª–æ—Å—è:**")
        message_parts.append(f"{fix.explanation}")
        message_parts.append("")

        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
        if fix.fixed_data:
            message_parts.append("**–í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ:**")
            for key, value in fix.fixed_data.items():
                message_parts.append(f"‚Ä¢ **{key}:** `{value}`")
            message_parts.append("")

        # –ü–æ—Ä–∞–¥–∏
        if fix.suggestions:
            message_parts.append("**–ü–æ—Ä–∞–¥–∏:**")
            for i, suggestion in enumerate(fix.suggestions, 1):
                message_parts.append(f"{i}. {suggestion}")
            message_parts.append("")

        # –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å
        confidence_text = (
            "–í–∏—Å–æ–∫–∞" if fix.confidence > 0.7 else "–°–µ—Ä–µ–¥–Ω—è" if fix.confidence > 0.4 else "–ù–∏–∑—å–∫–∞"
        )
        message_parts.append(
            f"**–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ:** {confidence_text} ({fix.confidence:.1%})"
        )

        return "\n".join(message_parts)

    def suggest_retry_with_fix(self, error: APIError, fix: AIFixSuggestion) -> Dict[str, Any]:
        """
        –ü—Ä–æ–ø–æ–Ω—É—î —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏

        Args:
            error: –ü–æ–º–∏–ª–∫–∞ API
            fix: –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è

        Returns:
            –°–ª–æ–≤–∞—Ä –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏
        """
        return {
            "retry_data": fix.fixed_data,
            "instructions": f"–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏: {fix.explanation}",
            "confidence": fix.confidence,
            "suggestions": fix.suggestions,
        }

    def get_validation_rules(self, endpoint: str, entity_type: str) -> str:
        """
        –û—Ç—Ä–∏–º—É—î –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—É —Ç–∞ —Ç–∏–ø—É —Å—É—Ç–Ω–æ—Å—Ç—ñ

        Args:
            endpoint: –ï–Ω–¥–ø–æ—ñ–Ω—Ç API
            entity_type: –¢–∏–ø —Å—É—Ç–Ω–æ—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "category", "product")

        Returns:
            –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
        """
        prompt = f"""
        –û–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è {entity_type} –≤ API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ {endpoint} —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

        –î–∞–π –∑—Ä–æ–∑—É–º—ñ–ª–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏:
        - –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        - –§–æ—Ä–º–∞—Ç–∏ –¥–∞–Ω–∏—Ö
        - –û–±–º–µ–∂–µ–Ω–Ω—è
        - –ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        """

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ API –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ e-commerce —Å–∏—Å—Ç–µ–º. –ü–æ—è—Å–Ω—é–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
                    },
                    {"role": "user", "content": prompt},
                ],
                max_tokens=400,
                temperature=0.1,
            )

            return response.choices[0].message.content

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {e}")
            return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è {entity_type}: {str(e)}"

    def _create_error_analysis_prompt(self, error: APIError) -> str:
        """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–∫–∏"""
        prompt = f"""
        –ê–Ω–∞–ª—ñ–∑—É–π –ø–æ–º–∏–ª–∫—É API —Ç–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:

        **–ü–æ–º–∏–ª–∫–∞:** {error.error_message}
        **–ö–æ–¥ —Å—Ç–∞—Ç—É—Å—É:** {error.status_code}
        **–ï–Ω–¥–ø–æ—ñ–Ω—Ç:** {error.method} {error.endpoint}
        **–í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ:** {json.dumps(error.input_data, indent=2, ensure_ascii=False) if error.input_data else '–ù–µ–º–∞—î'}

        –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
        {{
            "fixed_data": {{"–ø–æ–ª–µ": "–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è"}},
            "explanation": "–ü–æ—è—Å–Ω–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é",
            "confidence": 0.8,
            "suggestions": ["–ø–æ—Ä–∞–¥–∞ 1", "–ø–æ—Ä–∞–¥–∞ 2"]
        }}
        """
        return prompt

    def _create_fallback_fix(self, error: APIError) -> AIFixSuggestion:
        """–°—Ç–≤–æ—Ä—é—î –±–∞–∑–æ–≤–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ AI"""
        return AIFixSuggestion(
            fixed_data=error.input_data or {},
            explanation=f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É: {error.error_message}",
            confidence=0.1,
            suggestions=[
                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö",
                "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ",
                "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó API",
            ],
        )

    def _generate_cache_key(self, error: APIError) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∫–ª—é—á –¥–ª—è –∫–µ—à—É –ø–æ–º–∏–ª–æ–∫"""
        key_parts = [
            error.method,
            error.endpoint,
            str(error.status_code),
            error.error_message[:100],  # –ü–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤ –ø–æ–º–∏–ª–∫–∏
        ]
        return "|".join(key_parts)

    def clear_cache(self) -> None:
        """–û—á–∏—â–∞—î –∫–µ—à –ø–æ–º–∏–ª–æ–∫"""
        self.error_cache.clear()
        print("üóëÔ∏è –ö–µ—à –ø–æ–º–∏–ª–æ–∫ –æ—á–∏—â–µ–Ω–æ")

    def get_cache_stats(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É"""
        return {
            "total_errors": len(self.error_cache),
            "cache_size": len(str(self.error_cache)),
            "model": self.model,
        }


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –ø—Ä–æ–µ–∫—Ç—ñ
_ai_error_handler: Optional[AIErrorHandler] = None


def get_ai_error_handler() -> AIErrorHandler:
    """–û—Ç—Ä–∏–º—É—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä AI Error Handler"""
    global _ai_error_handler
    if _ai_error_handler is None:
        _ai_error_handler = AIErrorHandler()
    return _ai_error_handler


def set_ai_error_handler(handler: AIErrorHandler) -> None:
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä AI Error Handler"""
    global _ai_error_handler
    _ai_error_handler = handler
