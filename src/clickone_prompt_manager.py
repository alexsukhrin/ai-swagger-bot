"""
–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è Clickone Shop API
"""

import os
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List, Optional

import yaml


@dataclass
class ClickonePrompt:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–º–ø—Ç—É –¥–ª—è Clickone Shop API"""

    name: str
    description: str
    template: str
    tags: List[str]
    priority: int
    category: str


class ClickonePromptManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è Clickone Shop API"""

    def __init__(self, prompts_file: str = "prompts/clickone_shop_api_prompts.yaml"):
        self.prompts_file = prompts_file
        self.prompts: Dict[str, ClickonePrompt] = {}
        self.categories: Dict[str, Dict[str, Any]] = {}
        self.settings: Dict[str, Any] = {}
        self.metadata: Dict[str, Any] = {}
        self.load_prompts()

    def load_prompts(self) -> None:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø—Ä–æ–º–ø—Ç–∏ –∑ YAML —Ñ–∞–π–ª—É"""
        try:
            prompts_path = Path(__file__).parent.parent / self.prompts_file

            if not prompts_path.exists():
                raise FileNotFoundError(f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {prompts_path}")

            with open(prompts_path, "r", encoding="utf-8") as f:
                data = yaml.safe_load(f)

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            self.settings = data.get("settings", {})
            self.categories = data.get("categories", {})
            self.metadata = data.get("metadata", {})

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–º–ø—Ç–∏
            prompts_data = data.get("prompts", {})
            for prompt_id, prompt_data in prompts_data.items():
                prompt = ClickonePrompt(
                    name=prompt_data.get("name", ""),
                    description=prompt_data.get("description", ""),
                    template=prompt_data.get("template", ""),
                    tags=prompt_data.get("tags", []),
                    priority=prompt_data.get("priority", 5),
                    category=prompt_data.get("category", "clickone_core"),
                )
                self.prompts[prompt_id] = prompt

            print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.prompts)} –ø—Ä–æ–º–ø—Ç—ñ–≤ –¥–ª—è Clickone Shop API")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤: {e}")
            self._create_default_prompts()

    def _create_default_prompts(self) -> None:
        """–°—Ç–≤–æ—Ä—é—î –±–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"""
        print("üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º...")

        # –ë–∞–∑–æ–≤–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        system_prompt = ClickonePrompt(
            name="–ë–∞–∑–æ–≤–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç Clickone Shop API",
            description="–û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Clickone Shop Backend API",
            template="–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ Clickone Shop Backend API v1.0. –î–æ–ø–æ–º–æ–∂–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ e-commerce –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ—é.",
            tags=["clickone", "system", "base"],
            priority=1,
            category="clickone_core",
        )

        self.prompts["clickone_system_base"] = system_prompt
        print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –±–∞–∑–æ–≤–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç")

    def get_prompt(self, prompt_id: str) -> Optional[ClickonePrompt]:
        """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–º–ø—Ç –∑–∞ ID"""
        return self.prompts.get(prompt_id)

    def get_prompts_by_category(self, category: str) -> List[ClickonePrompt]:
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
        return [prompt for prompt in self.prompts.values() if prompt.category == category]

    def get_prompts_by_tag(self, tag: str) -> List[ClickonePrompt]:
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–∞ —Ç–µ–≥–æ–º"""
        return [prompt for prompt in self.prompts.values() if tag in prompt.tags]

    def get_prompts_by_priority(self, priority: int) -> List[ClickonePrompt]:
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        return [prompt for prompt in self.prompts.values() if prompt.priority == priority]

    def search_prompts(self, query: str) -> List[ClickonePrompt]:
        """–®—É–∫–∞—î –ø—Ä–æ–º–ø—Ç–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º"""
        query_lower = query.lower()
        results = []

        for prompt in self.prompts.values():
            if (
                query_lower in prompt.name.lower()
                or query_lower in prompt.description.lower()
                or any(query_lower in tag.lower() for tag in prompt.tags)
            ):
                results.append(prompt)

        return results

    def get_system_prompt(self) -> str:
        """–û—Ç—Ä–∏–º—É—î —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç"""
        system_prompt = self.get_prompt("clickone_system_base")
        if system_prompt:
            return system_prompt.template
        return "–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ Clickone Shop Backend API. –î–æ–ø–æ–º–æ–∂–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."

    def get_intent_analysis_prompt(self) -> str:
        """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–∞–º—ñ—Ä—É"""
        intent_prompt = self.get_prompt("clickone_intent_analysis")
        if intent_prompt:
            return intent_prompt.template
        return "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è Clickone Shop API."

    def get_category_creation_prompt(self) -> str:
        """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        create_prompt = self.get_prompt("clickone_create_category")
        if create_prompt:
            return create_prompt.template
        return "–î–æ–ø–æ–º–æ–∂–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤ Clickone Shop API."

    def get_category_retrieval_prompt(self) -> str:
        """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
        get_prompt = self.get_prompt("clickone_get_categories")
        if get_prompt:
            return get_prompt.template
        return "–î–æ–ø–æ–º–æ–∂–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ Clickone Shop API."

    def get_category_update_prompt(self) -> str:
        """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        update_prompt = self.get_prompt("clickone_update_category")
        if update_prompt:
            return update_prompt.template
        return "–î–æ–ø–æ–º–æ–∂–∏ –æ–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤ Clickone Shop API."

    def get_category_deletion_prompt(self) -> str:
        """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        delete_prompt = self.get_prompt("clickone_delete_category")
        if delete_prompt:
            return delete_prompt.template
        return "–î–æ–ø–æ–º–æ–∂–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ Clickone Shop API."

    def get_search_filter_prompt(self) -> str:
        """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó"""
        search_prompt = self.get_prompt("clickone_search_filter")
        if search_prompt:
            return search_prompt.template
        return "–î–æ–ø–æ–º–æ–∂–∏ –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ Clickone Shop API."

    def get_error_handling_prompt(self) -> str:
        """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫"""
        error_prompt = self.get_prompt("clickone_error_handling")
        if error_prompt:
            return error_prompt.template
        return "–î–æ–ø–æ–º–æ–∂–∏ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ç–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É API."

    def get_jwt_auth_prompt(self) -> str:
        """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–º–ø—Ç –¥–ª—è JWT –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
        jwt_prompt = self.get_prompt("clickone_jwt_auth")
        if jwt_prompt:
            return jwt_prompt.template
        return "–î–æ–ø–æ–º–æ–∂–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ JWT –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é."

    def get_user_help_prompt(self) -> str:
        """–û—Ç—Ä–∏–º—É—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        help_prompt = self.get_prompt("clickone_user_help")
        if help_prompt:
            return help_prompt.template
        return "–ù–∞–¥–∞–π –¥–æ–ø–æ–º–æ–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É Clickone Shop API."

    def format_prompt(self, prompt_id: str, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –ø—Ä–æ–º–ø—Ç –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        prompt = self.get_prompt(prompt_id)
        if not prompt:
            return f"–ü—Ä–æ–º–ø—Ç {prompt_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

        try:
            return prompt.template.format(**kwargs)
        except KeyError as e:
            return f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –ø–∞—Ä–∞–º–µ—Ç—Ä {e}"

    def get_api_info(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API"""
        return {
            "title": self.metadata.get("api_title", "Clickone Shop Backend API"),
            "version": self.metadata.get("api_version", "1.0"),
            "base_url": self.metadata.get("base_url", "https://api.oneshop.click"),
            "endpoints_count": self.metadata.get("endpoints_count", 5),
            "schemas_count": self.metadata.get("schemas_count", 37),
            "security_scheme": self.metadata.get("security_scheme", "JWT Bearer"),
            "documentation_url": self.metadata.get("documentation_url", ""),
            "openapi_spec_url": self.metadata.get("openapi_spec_url", ""),
        }

    def get_categories_info(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        return {
            "total_categories": len(self.categories),
            "total_prompts": len(self.prompts),
            "categories": self.categories,
            "prompts_by_category": {
                category: len(self.get_prompts_by_category(category))
                for category in self.categories.keys()
            },
        }

    def validate_prompts(self) -> List[str]:
        """–í–∞–ª—ñ–¥—É—î –ø—Ä–æ–º–ø—Ç–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫"""
        errors = []

        for prompt_id, prompt in self.prompts.items():
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
            if not prompt.name:
                errors.append(f"–ü—Ä–æ–º–ø—Ç {prompt_id}: –≤—ñ–¥—Å—É—Ç–Ω—è –Ω–∞–∑–≤–∞")
            if not prompt.template:
                errors.append(f"–ü—Ä–æ–º–ø—Ç {prompt_id}: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —à–∞–±–ª–æ–Ω")
            if not prompt.tags:
                errors.append(f"–ü—Ä–æ–º–ø—Ç {prompt_id}: –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ç–µ–≥–∏")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
            if prompt.category not in self.categories:
                errors.append(f"–ü—Ä–æ–º–ø—Ç {prompt_id}: –Ω–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è {prompt.category}")

        return errors

    def export_prompts(self, output_file: str = "clickone_prompts_export.yaml") -> bool:
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î –ø—Ä–æ–º–ø—Ç–∏ –≤ YAML —Ñ–∞–π–ª"""
        try:
            export_data = {
                "version": "2.0",
                "exported_at": "2025-01-27T00:00:00Z",
                "description": "–ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç—ñ–≤ Clickone Shop API",
                "settings": self.settings,
                "categories": self.categories,
                "metadata": self.metadata,
                "prompts": {},
            }

            for prompt_id, prompt in self.prompts.items():
                export_data["prompts"][prompt_id] = {
                    "name": prompt.name,
                    "description": prompt.description,
                    "template": prompt.template,
                    "tags": prompt.tags,
                    "priority": prompt.priority,
                    "category": prompt.category,
                }

            output_path = Path(__file__).parent.parent / output_file
            with open(output_path, "w", encoding="utf-8") as f:
                yaml.dump(export_data, f, default_flow_style=False, allow_unicode=True)

            print(f"‚úÖ –ü—Ä–æ–º–ø—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ {output_file}")
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –ø—Ä–æ–º–ø—Ç—ñ–≤: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç—ñ–≤
clickone_prompt_manager = ClickonePromptManager()


def get_clickone_prompt_manager() -> ClickonePromptManager:
    """–û—Ç—Ä–∏–º—É—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç—ñ–≤"""
    return clickone_prompt_manager
