"""
RAG –¥–≤–∏–≥—É–Ω –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API endpoints.
"""

import logging
import os
from typing import Any, Dict, List, Optional

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_openai import OpenAIEmbeddings

from src.enhanced_swagger_parser import EnhancedSwaggerParser
from src.postgres_vector_manager import PostgresVectorManager

logger = logging.getLogger(__name__)


class PostgresRAGEngine:
    """RAG –¥–≤–∏–≥—É–Ω –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º PostgreSQL —Ç–∞ pgvector."""

    def __init__(self, user_id: str, swagger_spec_id: str, config: Dict[str, Any] = None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è PostgreSQL RAG –¥–≤–∏–≥—É–Ω–∞.

        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            swagger_spec_id: ID Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è RAG
        """
        from src.config import Config

        self.user_id = user_id
        self.swagger_spec_id = swagger_spec_id
        self.vector_manager = PostgresVectorManager()

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        if config:
            chunk_size = config.get("chunk_size", 1000)
            chunk_overlap = config.get("chunk_overlap", 200)
        else:
            chunk_size = 1000
            chunk_overlap = 200

        self.embeddings = OpenAIEmbeddings()
        self.text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=chunk_size, chunk_overlap=chunk_overlap, separators=["\n\n", "\n", " ", ""]
        )

        logger.info(f"–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è PostgreSQL RAG Engine –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    def create_vectorstore_from_swagger(self, swagger_spec_path: str) -> bool:
        """
        –°—Ç–≤–æ—Ä—é—î –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É –∑ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

        Args:
            swagger_spec_path: –®–ª—è—Ö –¥–æ Swagger —Ñ–∞–π–ª—É

        Returns:
            True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ
        """
        try:
            logger.info("–ü–∞—Ä—Å–∏–Ω–≥ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...")
            # –ü–∞—Ä—Å–∏–º–æ Swagger —Ñ–∞–π–ª
            parser = EnhancedSwaggerParser(swagger_spec_path)

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è chunks
            chunks = parser.create_enhanced_endpoint_chunks()
            logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ {len(chunks)} chunks")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É
            self.create_vectorstore(chunks)
            logger.info("–í–µ–∫—Ç–æ—Ä–Ω–∞ –±–∞–∑–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–Ω–æ—ó –±–∞–∑–∏: {e}")
            return False

    def create_vectorstore(self, chunks: List[Dict[str, Any]]) -> None:
        """
        –°—Ç–≤–æ—Ä—é—î –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É –¥–∞–Ω–∏—Ö –∑ chunks –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

        Args:
            chunks: –°–ø–∏—Å–æ–∫ chunks –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
        """
        for chunk in chunks:
            try:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–º–±–µ–¥—ñ–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç—É
                embedding = self.embeddings.embed_query(chunk["text"])

                # –î–æ–¥–∞—î–º–æ –≤ PostgreSQL –∑ –ø—Ä–∏–≤'—è–∑–∫–æ—é –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                self.vector_manager.add_embedding(
                    user_id=self.user_id,
                    swagger_spec_id=self.swagger_spec_id,
                    endpoint_path=chunk["metadata"].get("path", ""),
                    method=chunk["metadata"].get("method", "GET"),
                    description=chunk["text"],
                    embedding=embedding,
                    metadata=chunk["metadata"],
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞: {e}")
                continue

    def search_similar_endpoints(self, query: str, limit: int = 3) -> List[Dict[str, Any]]:
        """
        –®—É–∫–∞—î –ø–æ–¥—ñ–±–Ω—ñ endpoints –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

        Args:
            query: –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
            limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö endpoints
        """
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–º–±–µ–¥—ñ–Ω–≥ –¥–ª—è –∑–∞–ø–∏—Ç—É
            query_embedding = self.embeddings.embed_query(query)

            # –®—É–∫–∞—î–º–æ –ø–æ–¥—ñ–±–Ω—ñ –≤–µ–∫—Ç–æ—Ä–∏
            results = self.vector_manager.search_similar(
                query_embedding=query_embedding,
                user_id=self.user_id,
                swagger_spec_id=self.swagger_spec_id,
                limit=limit,
            )

            logger.info(
                f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ–¥—ñ–±–Ω–∏—Ö endpoints –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {self.user_id}"
            )
            return results

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É endpoints: {e}")
            return []

    def get_all_endpoints(self) -> List[Dict[str, Any]]:
        """
        –û—Ç—Ä–∏–º—É—î –≤—Å—ñ endpoints –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö endpoints –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """
        try:
            results = self.vector_manager.get_embeddings_for_user(
                user_id=self.user_id, swagger_spec_id=self.swagger_spec_id
            )

            logger.info(f"üìã –û—Ç—Ä–∏–º–∞–Ω–æ {len(results)} endpoints –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {self.user_id}")
            return results

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è endpoints: {e}")
            return []

    def delete_user_embeddings(self) -> bool:
        """
        –í–∏–¥–∞–ª—è—î –≤—Å—ñ embeddings –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

        Returns:
            True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ
        """
        try:
            success = self.vector_manager.delete_embeddings_for_user(
                user_id=self.user_id, swagger_spec_id=self.swagger_spec_id
            )

            if success:
                logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ embeddings –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {self.user_id}")
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è embeddings –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {self.user_id}")

            return success

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è embeddings: {e}")
            return False

    def get_statistics(self) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ embeddings –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        """
        try:
            stats = self.vector_manager.get_statistics(user_id=self.user_id)
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {self.user_id}: {stats}")
            return stats

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
