"""
Streamlit —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–ª—è AI Swagger Bot –∑ FastAPI –±–µ–∫–µ–Ω–¥–æ–º
"""

import json
import logging
import os
from datetime import datetime
from typing import Any, Dict, List, Optional

import requests
import streamlit as st
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è API
API_BASE_URL = os.getenv("API_BASE_URL", "http://api:8000")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


def check_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞."""
    if not OPENAI_API_KEY:
        st.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ OPENAI_API_KEY –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        st.info("–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∑ OPENAI_API_KEY=your_key_here")
        return False
    return True


def initialize_session_state():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó –¥–ª—è —á–∞—Ç—É."""
    if "messages" not in st.session_state:
        st.session_state.messages = []
    if "user_id" not in st.session_state:
        st.session_state.user_id = None
    if "swagger_id" not in st.session_state:
        st.session_state.swagger_id = None
    if "jwt_token" not in st.session_state:
        st.session_state.jwt_token = None
    if "is_authenticated" not in st.session_state:
        st.session_state.is_authenticated = False
    if "prompts_generated" not in st.session_state:
        st.session_state.prompts_generated = False


def get_auth_headers():
    """–û—Ç—Ä–∏–º—É—î –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó."""
    headers = {"Content-Type": "application/json"}
    if st.session_state.jwt_token and st.session_state.is_authenticated:
        headers["Authorization"] = f"Bearer {st.session_state.jwt_token}"
    return headers


def check_api_health():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω API."""
    import time

    # –°–ø—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
    for attempt in range(3):
        try:
            response = requests.get(f"{API_BASE_URL}/health", timeout=15)
            if response.status_code == 200:
                return True
        except Exception as e:
            logger.error(f"API health check attempt {attempt + 1} failed: {e}")
            if attempt < 2:  # –ù–µ —á–µ–∫–∞—î–º–æ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–ø—Ä–æ–±–∏
                time.sleep(2)

    return False


def create_demo_user():
    """–°—Ç–≤–æ—Ä—é—î –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –æ—Ç—Ä–∏–º—É—î —Ç–æ–∫–µ–Ω."""
    try:
        response = requests.post(
            f"{API_BASE_URL}/users/demo", headers={"Content-Type": "application/json"}, timeout=20
        )

        if response.status_code == 200:
            data = response.json()
            st.session_state.user_id = data["user_id"]
            st.session_state.jwt_token = data["token"]
            st.session_state.is_authenticated = True
            return True
        else:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {response.text}")
            return False
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        return False


def upload_swagger_file(file, auto_generate_prompts: bool = True) -> Optional[str]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î Swagger —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API —Ç–∞ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –≥–µ–Ω–µ—Ä—É—î –ø—Ä–æ–º–ø—Ç–∏."""
    try:
        files = {"file": (file.name, file.getvalue(), "application/json")}
        headers = get_auth_headers()
        headers.pop("Content-Type", None)  # Remove Content-Type for file upload

        response = requests.post(
            f"{API_BASE_URL}/upload-swagger", files=files, headers=headers, timeout=30
        )

        if response.status_code == 200:
            data = response.json()
            swagger_id = data["swagger_id"]
            st.session_state.swagger_id = swagger_id

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–º–ø—Ç–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if auto_generate_prompts:
                st.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—é –ø—Ä–æ–º–ø—Ç–∏ —á–µ—Ä–µ–∑ GPT...")
                if auto_generate_prompts_for_swagger(swagger_id):
                    st.session_state.prompts_generated = True
                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!")
                else:
                    st.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É.")

            return swagger_id
        else:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {response.text}")
            return None
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
        return None


def send_chat_message(message: str) -> Optional[str]:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç —á–µ—Ä–µ–∑ API."""
    try:
        data = {"message": message, "user_id": st.session_state.user_id}

        response = requests.post(
            f"{API_BASE_URL}/chat", json=data, headers=get_auth_headers(), timeout=30
        )

        if response.status_code == 200:
            data = response.json()
            return data["response"]
        else:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∞—Ç—É: {response.text}")
            return None
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return None


def get_chat_history() -> List[Dict[str, Any]]:
    """–û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É —á–µ—Ä–µ–∑ API."""
    try:
        response = requests.get(
            f"{API_BASE_URL}/chat-history", headers=get_auth_headers(), timeout=10
        )

        if response.status_code == 200:
            return response.json()
        else:
            return []
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
        return []


def display_message(content: str, role: str, timestamp: datetime = None):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ."""
    if role == "user":
        with st.chat_message("user", avatar="üë§"):
            st.write(content)
    else:
        with st.chat_message("assistant", avatar="ü§ñ"):
            st.write(content)

    if timestamp:
        st.caption(f"‚è∞ {timestamp.strftime('%H:%M:%S')}")


def get_example_queries():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π."""
    return {
        "üîç –ê–Ω–∞–ª—ñ–∑ API": [
            "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ endpoints",
            "–Ø–∫—ñ –º–µ—Ç–æ–¥–∏ HTTP –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è?",
            "–°–∫—ñ–ª—å–∫–∏ endpoints —É —Ü—å–æ–º—É API?",
            "–ü–æ–∫–∞–∂–∏ endpoints –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏",
            "–Ø–∫—ñ —Å—Ö–µ–º–∏ –¥–∞–Ω–∏—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è?",
        ],
        "üìù –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤": [
            "–°—Ç–≤–æ—Ä–∏ –ø—Ä–∏–∫–ª–∞–¥ POST –∑–∞–ø–∏—Ç—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
            "–ü–æ–∫–∞–∂–∏ —è–∫ –∑—Ä–æ–±–∏—Ç–∏ GET –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤",
            "–Ø–∫ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ PUT?",
            "–°—Ç–≤–æ—Ä–∏ –ø—Ä–∏–∫–ª–∞–¥ DELETE –∑–∞–ø–∏—Ç—É",
            "–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–∫–ª–∞–¥ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø–∏—Ç—É",
        ],
        "üîß –¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ": [
            "–Ø–∫—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è endpoint /users?",
            "–ü–æ–∫–∞–∂–∏ —Å—Ö–µ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è GET /products",
            "–Ø–∫—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó?",
            "–Ø–∫ –æ–±—Ä–æ–±–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –≤ —Ü—å–æ–º—É API?",
            "–ü–æ–∫–∞–∂–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ–ª—ñ–≤",
        ],
        "üöÄ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó": [
            "–Ø–∫ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –¥–æ–¥–∞—Ç–∏ –π–æ–º—É —Ç–æ–≤–∞—Ä?",
            "–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
            "–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é?",
            "–°—Ç–≤–æ—Ä–∏ –ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
            "–Ø–∫ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä —Ç–∞ –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫?",
        ],
        "‚ùì –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è": [
            "–ü–æ—è—Å–Ω–∏ —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ POST —Ç–∞ PUT",
            "–©–æ —Ç–∞–∫–µ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∏ HTTP?",
            "–Ø–∫ –ø—Ä–∞—Ü—é—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Bearer token?",
            "–ü–æ—è—Å–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ",
            "–Ø–∫ –æ–±—Ä–æ–±–ª—è—Ç–∏ –º–∞—Å–∏–≤–∏ –≤ API –∑–∞–ø–∏—Ç–∞—Ö?",
        ],
    }


def get_swagger_based_suggestions():
    """–ì–µ–Ω–µ—Ä—É—î –ø—ñ–¥–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—ó Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó."""
    if not st.session_state.get("swagger_spec_id"):
        return {}

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏ –∑ API
        headers = get_auth_headers()
        response = requests.post(
            f"{API_BASE_URL}/prompts/generate-suggestions",
            headers=headers,
            json={"swagger_data": st.session_state.get("swagger_data", {})},
        )

        if response.status_code == 200:
            data = response.json()
            suggestions = data.get("suggestions", [])

            # –ì—Ä—É–ø—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
            grouped_suggestions = {}
            for suggestion in suggestions:
                category = suggestion.get("category", "–Ü–Ω—à—ñ")
                if category not in grouped_suggestions:
                    grouped_suggestions[category] = []
                grouped_suggestions[category].append(suggestion)

            return grouped_suggestions
        else:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–∫–∞–∑–æ–∫: {response.status_code}")
            return {}

    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥–∫–∞–∑–æ–∫: {e}")
        return {}


def auto_generate_prompts():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î –ø—Ä–æ–º–ø—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó."""
    if not st.session_state.get("swagger_spec_id"):
        st.error("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é!")
        return False

    return auto_generate_prompts_for_swagger(st.session_state.swagger_spec_id)


def auto_generate_prompts_for_swagger(swagger_spec_id: str) -> bool:
    """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó."""
    try:
        with st.spinner("ü§ñ –ì–µ–Ω–µ—Ä—É—é –ø—Ä–æ–º–ø—Ç–∏ —á–µ—Ä–µ–∑ GPT..."):
            headers = get_auth_headers()
            response = requests.post(
                f"{API_BASE_URL}/prompts/auto-generate-for-user",
                headers=headers,
                json={"swagger_spec_id": swagger_spec_id},
            )

        if response.status_code == 200:
            data = response.json()
            st.success(f"‚úÖ {data['message']}")
            st.info(f"üìä –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {data['saved_count']} –ø—Ä–æ–º–ø—Ç—ñ–≤")

            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤
            if data.get("prompts"):
                with st.expander("üìã –î–µ—Ç–∞–ª—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤"):
                    for prompt in data["prompts"]:
                        st.write(f"**{prompt['name']}** ({prompt['category']})")
                        st.write(f"–†–µ—Å—É—Ä—Å: {prompt['resource_type']}")
                        st.write(f"Endpoint: {prompt['http_method']} {prompt['endpoint_path']}")
                        st.divider()

            return True
        else:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤: {response.status_code}")
            return False

    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
        return False


def display_example_queries():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –∫–ª—ñ–∫—É."""
    st.subheader("üí° –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤")

    # –ë–∞–∑–æ–≤—ñ –ø—Ä–∏–∫–ª–∞–¥–∏
    examples = get_example_queries()

    # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ Swagger
    swagger_suggestions = get_swagger_based_suggestions()

    # –ü–æ–∫–∞–∑—É—î–º–æ –±–∞–∑–æ–≤—ñ –ø—Ä–∏–∫–ª–∞–¥–∏
    st.subheader("üìö –ë–∞–∑–æ–≤—ñ –ø—Ä–∏–∫–ª–∞–¥–∏")
    for category, queries in examples.items():
        st.write(f"**{category}**")
        for i, query in enumerate(queries):
            if st.button(f"üìù {query}", key=f"base_example_{category}_{i}"):
                return query
        st.divider()

    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ Swagger
    if swagger_suggestions:
        st.subheader("üéØ –ü—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –≤–∞—à–æ–≥–æ API")
        for category, suggestions in swagger_suggestions.items():
            st.write(f"**{category} ({len(suggestions)})**")
            for i, suggestion in enumerate(suggestions):
                title = suggestion.get("title", "–ü—ñ–¥–∫–∞–∑–∫–∞")
                description = suggestion.get("description", "")
                example_query = suggestion.get("example_query", "")
                difficulty = suggestion.get("difficulty", "medium")

                # –Ü–∫–æ–Ω–∫–∞ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
                difficulty_icon = {"easy": "üü¢", "medium": "üü°", "hard": "üî¥"}.get(difficulty, "üü°")

                st.write(f"**{difficulty_icon} {title}**")
                if description:
                    st.write(f"*{description}*")
                if example_query:
                    if st.button(f"üí¨ {example_query}", key=f"swagger_suggestion_{category}_{i}"):
                        return example_query
                st.divider()

    return None


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É."""
    st.set_page_config(
        page_title="AI Swagger Bot", page_icon="ü§ñ", layout="wide", initial_sidebar_state="expanded"
    )

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    if not check_environment():
        st.stop()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó
    initialize_session_state()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ AI Swagger Bot")
    st.markdown("**–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç-–±–æ—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è–º–∏**")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω API
    if not check_api_health():
        st.error("‚ùå API —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π FastAPI —Å–µ—Ä–≤—ñ—Å.")
        st.info("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ Docker Compose –∑–∞–ø—É—â–µ–Ω–∏–π: `docker-compose up`")
        st.stop()

    # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
        st.subheader("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è")
        if not st.session_state.is_authenticated:
            if st.button("üë§ –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"):
                with st.spinner("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞..."):
                    if create_demo_user():
                        st.success("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
                        st.rerun()
                    else:
                        st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        else:
            st.success(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —è–∫: {st.session_state.user_id}")
            if st.button("üîÑ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"):
                st.session_state.is_authenticated = False
                st.session_state.user_id = None
                st.session_state.jwt_token = None
                st.session_state.messages = []
                st.rerun()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger
        if st.session_state.is_authenticated:
            st.subheader("üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Swagger")
            uploaded_file = st.file_uploader(
                "–í–∏–±–µ—Ä—ñ—Ç—å Swagger JSON —Ñ–∞–π–ª",
                type=["json"],
                help="–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Swagger/OpenAPI —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON",
            )

            if uploaded_file is not None:
                if st.button("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Swagger"):
                    with st.spinner("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."):
                        swagger_id = upload_swagger_file(uploaded_file, auto_generate_prompts=True)
                        if swagger_id:
                            st.success("‚úÖ Swagger —Ñ–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
                            st.session_state.swagger_spec_id = swagger_id
                            st.rerun()
                        else:
                            st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É")

            # –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–º–ø—Ç—ñ–≤ (—Ç—ñ–ª—å–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è)
            if st.session_state.get("swagger_spec_id"):
                if st.session_state.get("prompts_generated"):
                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ API")
                else:
                    st.info(
                        "üí° –ü—Ä–æ–º–ø—Ç–∏ –±—É–¥—É—Ç—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ Swagger —Ñ–∞–π–ª—É"
                    )

                # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π Swagger
                if st.session_state.get("swagger_data"):
                    with st.expander("üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API"):
                        swagger_data = st.session_state.swagger_data
                        st.write(
                            f"**–ù–∞–∑–≤–∞:** {swagger_data.get('info', {}).get('title', '–ù–µ–≤—ñ–¥–æ–º–æ')}"
                        )
                        st.write(
                            f"**–í–µ—Ä—Å—ñ—è:** {swagger_data.get('info', {}).get('version', '–ù–µ–≤—ñ–¥–æ–º–æ')}"
                        )
                        st.write(f"**Endpoints:** {len(swagger_data.get('paths', {}))}")

                        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ—Å—É—Ä—Å–∏
                        paths = swagger_data.get("paths", {})
                        resources = set()
                        for path in paths.keys():
                            if "/" in path and len(path.split("/")) > 1:
                                resource = path.split("/")[1]
                                if resource and not resource.startswith("{"):
                                    resources.add(resource)

                        if resources:
                            st.write(f"**–†–µ—Å—É—Ä—Å–∏:** {', '.join(resources)}")

    # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if st.session_state.is_authenticated:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç—É
        if st.session_state.messages:
            col1, col2, col3 = st.columns(3)
            with col1:
                total_messages = len(st.session_state.messages)
                user_messages = len([m for m in st.session_state.messages if m["role"] == "user"])
                bot_messages = len(
                    [m for m in st.session_state.messages if m["role"] == "assistant"]
                )

                st.metric("–í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", total_messages)
                st.metric("–í–∞—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", user_messages)
                st.metric("–í—ñ–¥–ø–æ–≤—ñ–¥–µ–π –±–æ—Ç–∞", bot_messages)

            # –ü–æ—Ä–∞–¥–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
            with st.expander("üöÄ –Ø–∫ –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É"):
                st.markdown(
                    """
                **1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è:**
                - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" –≤ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ
                - –¶–µ —Å—Ç–≤–æ—Ä–∏—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞—Å

                **2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API:**
                - –í–∏–±–µ—Ä—ñ—Ç—å Swagger JSON —Ñ–∞–π–ª
                - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"
                - –ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î –≤–∞—à API

                **3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–º–ø—Ç—ñ–≤:**
                - –ü—Ä–æ–º–ø—Ç–∏ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ Swagger —Ñ–∞–π–ª—É
                - GPT –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î –≤–∞—à API —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏
                - –¶–µ –ø–æ–∫—Ä–∞—â–∏—Ç—å —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –±–æ—Ç–∞ –¥–ª—è –≤–∞—à–æ–≥–æ API
                - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ

                **4. –ü–æ—á–∞—Ç–æ–∫ —á–∞—Ç—É:**
                - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∏–∂—á–µ
                - –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é
                - –ë–æ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –∫—Ä–∞—â–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                """
                )

            with st.expander("üîß –¢–∏–ø–∏ –∑–∞–ø–∏—Ç—ñ–≤"):
                st.markdown(
                    """
                **üìä –ê–Ω–∞–ª—ñ–∑ API:**
                - "–ü–æ–∫–∞–∂–∏ –≤—Å—ñ endpoints"
                - "–°–∫—ñ–ª—å–∫–∏ –º–µ—Ç–æ–¥—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è?"
                - "–Ø–∫—ñ —Å—Ö–µ–º–∏ –¥–∞–Ω–∏—Ö —î?"

                **üìù –ü—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–¥—ñ–≤:**
                - "–°—Ç–≤–æ—Ä–∏ –ø—Ä–∏–∫–ª–∞–¥ POST –∑–∞–ø–∏—Ç—É"
                - "–ü–æ–∫–∞–∂–∏ —è–∫ –∑—Ä–æ–±–∏—Ç–∏ GET –∑–∞–ø–∏—Ç"
                - "–Ø–∫ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ PUT?"

                **üîç –¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ:**
                - "–Ø–∫—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ?"
                - "–ü–æ–∫–∞–∂–∏ —Å—Ö–µ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"
                - "–Ø–∫ –æ–±—Ä–æ–±–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫–∏?"

                **üöÄ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó:**
                - "–Ø–∫ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞?"
                - "–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤"
                - "–Ø–∫ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ?"
                """
                )

            with st.expander("üí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–±–æ—Ç–∏"):
                st.markdown(
                    """
                **‚úÖ –©–æ —Ä–æ–±–∏—Ç–∏:**
                - –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
                - –ü—Ä–æ—Å–∏—Ç–µ –ø—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–¥—É
                - –ü–∏—Ç–∞–π—Ç–µ –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —ó—Ö –≤–∏—Ä—ñ—à–µ–Ω–Ω—è
                - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∏—Ä–æ–¥–Ω—É –º–æ–≤—É

                **‚ùå –©–æ —É–Ω–∏–∫–∞—Ç–∏:**
                - –ó–∞–Ω–∞–¥—Ç–æ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
                - –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –ø—Ä–æ API
                - –°–∫–ª–∞–¥–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó
                - –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —ñ–Ω—à—ñ —Å–∏—Å—Ç–µ–º–∏
                """
                )

        # –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        st.subheader("üí° –®–≤–∏–¥–∫—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:")
        example_query = display_example_queries()

        # Chat input –∑–∞ –º–µ–∂–∞–º–∏ columns
        prompt = st.chat_input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

        # –û–±—Ä–æ–±–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –∞–±–æ –ø—Ä–∏–∫–ª–∞–¥
        if prompt or example_query:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –∞–±–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
            final_prompt = example_query if example_query else prompt

            # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_message = {"role": "user", "content": final_prompt, "timestamp": datetime.now()}
            st.session_state.messages.append(user_message)
            display_message(final_prompt, "user")

            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API
            with st.spinner("ü§ñ –ë–æ—Ç –¥—É–º–∞—î..."):
                response = send_chat_message(final_prompt)

                if response:
                    # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞
                    bot_message = {
                        "role": "assistant",
                        "content": response,
                        "timestamp": datetime.now(),
                    }
                    st.session_state.messages.append(bot_message)
                    display_message(response, "assistant")
                else:
                    st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –±–æ—Ç–∞")

        # –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É
        if st.session_state.messages:
            st.subheader("üí¨ –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É")

            # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é"):
                st.session_state.messages = []
                st.rerun()

            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            for message in st.session_state.messages:
                display_message(message["content"], message["role"], message.get("timestamp"))
    else:
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        st.info("üëÜ –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ")

        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏
        st.subheader("üí° –ü—Ä–∏–∫–ª–∞–¥–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π:")
        st.markdown(
            """
        - üîç **–ê–Ω–∞–ª—ñ–∑ API** - –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ Swagger —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ–π
        - üìù **–ü—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–¥—ñ–≤** - –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤
        - üîß **–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞** - –î–æ–ø–æ–º–æ–≥–∞ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–∞ —Å—Ö–µ–º–∞–º–∏
        - üöÄ **–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó** - –†–µ–∞–ª—å–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è API
        - ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–º–ø—Ç—ñ–≤** - GPT —Å—Ç–≤–æ—Ä—é—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –¥–ª—è –≤–∞—à–æ–≥–æ API
        """
        )


if __name__ == "__main__":
    main()
